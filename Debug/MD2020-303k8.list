
MD2020-303k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007610  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080077a0  080077a0  000177a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800788c  0800788c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800788c  0800788c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800788c  0800788c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800788c  0800788c  0001788c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007890  08007890  00017890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026c8  20000010  080078a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026d8  080078a4  000226d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d7d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038c3  00000000  00000000  00039dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c8  00000000  00000000  0003d680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013f0  00000000  00000000  0003ec48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001afd9  00000000  00000000  00040038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012b63  00000000  00000000  0005b011  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c54a  00000000  00000000  0006db74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a0be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005940  00000000  00000000  0010a13c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007788 	.word	0x08007788

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007788 	.word	0x08007788

080001d0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b08a      	sub	sp, #40	; 0x28
 80001d4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80001d6:	f107 031c 	add.w	r3, r7, #28
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]
 80001ee:	611a      	str	r2, [r3, #16]
 80001f0:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80001f2:	4b2e      	ldr	r3, [pc, #184]	; (80002ac <MX_ADC1_Init+0xdc>)
 80001f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80001fa:	4b2c      	ldr	r3, [pc, #176]	; (80002ac <MX_ADC1_Init+0xdc>)
 80001fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000200:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000202:	4b2a      	ldr	r3, [pc, #168]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000204:	2200      	movs	r2, #0
 8000206:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000208:	4b28      	ldr	r3, [pc, #160]	; (80002ac <MX_ADC1_Init+0xdc>)
 800020a:	2200      	movs	r2, #0
 800020c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800020e:	4b27      	ldr	r3, [pc, #156]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000210:	2201      	movs	r2, #1
 8000212:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000214:	4b25      	ldr	r3, [pc, #148]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000216:	2200      	movs	r2, #0
 8000218:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800021c:	4b23      	ldr	r3, [pc, #140]	; (80002ac <MX_ADC1_Init+0xdc>)
 800021e:	2200      	movs	r2, #0
 8000220:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000222:	4b22      	ldr	r3, [pc, #136]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000224:	2201      	movs	r2, #1
 8000226:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000228:	4b20      	ldr	r3, [pc, #128]	; (80002ac <MX_ADC1_Init+0xdc>)
 800022a:	2200      	movs	r2, #0
 800022c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800022e:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000230:	2201      	movs	r2, #1
 8000232:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000234:	4b1d      	ldr	r3, [pc, #116]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000236:	2201      	movs	r2, #1
 8000238:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800023c:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <MX_ADC1_Init+0xdc>)
 800023e:	2204      	movs	r2, #4
 8000240:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000244:	2200      	movs	r2, #0
 8000246:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <MX_ADC1_Init+0xdc>)
 800024a:	2201      	movs	r2, #1
 800024c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800024e:	4817      	ldr	r0, [pc, #92]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000250:	f000 ffd0 	bl	80011f4 <HAL_ADC_Init>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800025a:	f000 fbbb 	bl	80009d4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800025e:	2300      	movs	r3, #0
 8000260:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000262:	f107 031c 	add.w	r3, r7, #28
 8000266:	4619      	mov	r1, r3
 8000268:	4810      	ldr	r0, [pc, #64]	; (80002ac <MX_ADC1_Init+0xdc>)
 800026a:	f002 f97d 	bl	8002568 <HAL_ADCEx_MultiModeConfigChannel>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000274:	f000 fbae 	bl	80009d4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000278:	2304      	movs	r3, #4
 800027a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800027c:	2301      	movs	r3, #1
 800027e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000280:	2300      	movs	r3, #0
 8000282:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000284:	2304      	movs	r3, #4
 8000286:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4619      	mov	r1, r3
 8000294:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000296:	f001 fb87 	bl	80019a8 <HAL_ADC_ConfigChannel>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80002a0:	f000 fb98 	bl	80009d4 <Error_Handler>
  }

}
 80002a4:	bf00      	nop
 80002a6:	3728      	adds	r7, #40	; 0x28
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20002484 	.word	0x20002484

080002b0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08a      	sub	sp, #40	; 0x28
 80002b4:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80002b6:	463b      	mov	r3, r7
 80002b8:	2228      	movs	r2, #40	; 0x28
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f007 fa5b 	bl	8007778 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 80002c2:	4b31      	ldr	r3, [pc, #196]	; (8000388 <MX_ADC2_Init+0xd8>)
 80002c4:	4a31      	ldr	r2, [pc, #196]	; (800038c <MX_ADC2_Init+0xdc>)
 80002c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002c8:	4b2f      	ldr	r3, [pc, #188]	; (8000388 <MX_ADC2_Init+0xd8>)
 80002ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80002ce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <MX_ADC2_Init+0xd8>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002d6:	4b2c      	ldr	r3, [pc, #176]	; (8000388 <MX_ADC2_Init+0xd8>)
 80002d8:	2201      	movs	r2, #1
 80002da:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <MX_ADC2_Init+0xd8>)
 80002de:	2201      	movs	r2, #1
 80002e0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80002e2:	4b29      	ldr	r3, [pc, #164]	; (8000388 <MX_ADC2_Init+0xd8>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ea:	4b27      	ldr	r3, [pc, #156]	; (8000388 <MX_ADC2_Init+0xd8>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80002f0:	4b25      	ldr	r3, [pc, #148]	; (8000388 <MX_ADC2_Init+0xd8>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80002f6:	4b24      	ldr	r3, [pc, #144]	; (8000388 <MX_ADC2_Init+0xd8>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80002fe:	4b22      	ldr	r3, [pc, #136]	; (8000388 <MX_ADC2_Init+0xd8>)
 8000300:	2208      	movs	r2, #8
 8000302:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000304:	4b20      	ldr	r3, [pc, #128]	; (8000388 <MX_ADC2_Init+0xd8>)
 8000306:	2200      	movs	r2, #0
 8000308:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800030a:	4b1f      	ldr	r3, [pc, #124]	; (8000388 <MX_ADC2_Init+0xd8>)
 800030c:	2200      	movs	r2, #0
 800030e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000310:	481d      	ldr	r0, [pc, #116]	; (8000388 <MX_ADC2_Init+0xd8>)
 8000312:	f000 ff6f 	bl	80011f4 <HAL_ADC_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800031c:	f000 fb5a 	bl	80009d4 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000320:	2301      	movs	r3, #1
 8000322:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000324:	2301      	movs	r3, #1
 8000326:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800032c:	2302      	movs	r3, #2
 800032e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000330:	2301      	movs	r3, #1
 8000332:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000334:	2340      	movs	r3, #64	; 0x40
 8000336:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T3_TRGO;
 8000338:	2330      	movs	r3, #48	; 0x30
 800033a:	623b      	str	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800033c:	2300      	movs	r3, #0
 800033e:	777b      	strb	r3, [r7, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	773b      	strb	r3, [r7, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000344:	2300      	movs	r3, #0
 8000346:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.InjectedOffset = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800034c:	2300      	movs	r3, #0
 800034e:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000350:	463b      	mov	r3, r7
 8000352:	4619      	mov	r1, r3
 8000354:	480c      	ldr	r0, [pc, #48]	; (8000388 <MX_ADC2_Init+0xd8>)
 8000356:	f001 fde9 	bl	8001f2c <HAL_ADCEx_InjectedConfigChannel>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000360:	f000 fb38 	bl	80009d4 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000364:	2302      	movs	r3, #2
 8000366:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000368:	2302      	movs	r3, #2
 800036a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800036c:	463b      	mov	r3, r7
 800036e:	4619      	mov	r1, r3
 8000370:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_ADC2_Init+0xd8>)
 8000372:	f001 fddb 	bl	8001f2c <HAL_ADCEx_InjectedConfigChannel>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 800037c:	f000 fb2a 	bl	80009d4 <Error_Handler>
  }

}
 8000380:	bf00      	nop
 8000382:	3728      	adds	r7, #40	; 0x28
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20002434 	.word	0x20002434
 800038c:	50000100 	.word	0x50000100

08000390 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08c      	sub	sp, #48	; 0x30
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	f107 031c 	add.w	r3, r7, #28
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003b0:	d15e      	bne.n	8000470 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80003b2:	4b63      	ldr	r3, [pc, #396]	; (8000540 <HAL_ADC_MspInit+0x1b0>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	3301      	adds	r3, #1
 80003b8:	4a61      	ldr	r2, [pc, #388]	; (8000540 <HAL_ADC_MspInit+0x1b0>)
 80003ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80003bc:	4b60      	ldr	r3, [pc, #384]	; (8000540 <HAL_ADC_MspInit+0x1b0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d10b      	bne.n	80003dc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80003c4:	4b5f      	ldr	r3, [pc, #380]	; (8000544 <HAL_ADC_MspInit+0x1b4>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a5e      	ldr	r2, [pc, #376]	; (8000544 <HAL_ADC_MspInit+0x1b4>)
 80003ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ce:	6153      	str	r3, [r2, #20]
 80003d0:	4b5c      	ldr	r3, [pc, #368]	; (8000544 <HAL_ADC_MspInit+0x1b4>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d8:	61bb      	str	r3, [r7, #24]
 80003da:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003dc:	4b59      	ldr	r3, [pc, #356]	; (8000544 <HAL_ADC_MspInit+0x1b4>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a58      	ldr	r2, [pc, #352]	; (8000544 <HAL_ADC_MspInit+0x1b4>)
 80003e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e6:	6153      	str	r3, [r2, #20]
 80003e8:	4b56      	ldr	r3, [pc, #344]	; (8000544 <HAL_ADC_MspInit+0x1b4>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003f0:	617b      	str	r3, [r7, #20]
 80003f2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = POT_Pin;
 80003f4:	2308      	movs	r3, #8
 80003f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003f8:	2303      	movs	r3, #3
 80003fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(POT_GPIO_Port, &GPIO_InitStruct);
 8000400:	f107 031c 	add.w	r3, r7, #28
 8000404:	4619      	mov	r1, r3
 8000406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040a:	f002 ff2b 	bl	8003264 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800040e:	4b4e      	ldr	r3, [pc, #312]	; (8000548 <HAL_ADC_MspInit+0x1b8>)
 8000410:	4a4e      	ldr	r2, [pc, #312]	; (800054c <HAL_ADC_MspInit+0x1bc>)
 8000412:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000414:	4b4c      	ldr	r3, [pc, #304]	; (8000548 <HAL_ADC_MspInit+0x1b8>)
 8000416:	2200      	movs	r2, #0
 8000418:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800041a:	4b4b      	ldr	r3, [pc, #300]	; (8000548 <HAL_ADC_MspInit+0x1b8>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000420:	4b49      	ldr	r3, [pc, #292]	; (8000548 <HAL_ADC_MspInit+0x1b8>)
 8000422:	2280      	movs	r2, #128	; 0x80
 8000424:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000426:	4b48      	ldr	r3, [pc, #288]	; (8000548 <HAL_ADC_MspInit+0x1b8>)
 8000428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800042c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800042e:	4b46      	ldr	r3, [pc, #280]	; (8000548 <HAL_ADC_MspInit+0x1b8>)
 8000430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000434:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000436:	4b44      	ldr	r3, [pc, #272]	; (8000548 <HAL_ADC_MspInit+0x1b8>)
 8000438:	2220      	movs	r2, #32
 800043a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800043c:	4b42      	ldr	r3, [pc, #264]	; (8000548 <HAL_ADC_MspInit+0x1b8>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000442:	4841      	ldr	r0, [pc, #260]	; (8000548 <HAL_ADC_MspInit+0x1b8>)
 8000444:	f002 fdc6 	bl	8002fd4 <HAL_DMA_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800044e:	f000 fac1 	bl	80009d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a3c      	ldr	r2, [pc, #240]	; (8000548 <HAL_ADC_MspInit+0x1b8>)
 8000456:	639a      	str	r2, [r3, #56]	; 0x38
 8000458:	4a3b      	ldr	r2, [pc, #236]	; (8000548 <HAL_ADC_MspInit+0x1b8>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	2105      	movs	r1, #5
 8000462:	2012      	movs	r0, #18
 8000464:	f002 fd8c 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000468:	2012      	movs	r0, #18
 800046a:	f002 fda5 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800046e:	e062      	b.n	8000536 <HAL_ADC_MspInit+0x1a6>
  else if(adcHandle->Instance==ADC2)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a36      	ldr	r2, [pc, #216]	; (8000550 <HAL_ADC_MspInit+0x1c0>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d15d      	bne.n	8000536 <HAL_ADC_MspInit+0x1a6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800047a:	4b31      	ldr	r3, [pc, #196]	; (8000540 <HAL_ADC_MspInit+0x1b0>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	3301      	adds	r3, #1
 8000480:	4a2f      	ldr	r2, [pc, #188]	; (8000540 <HAL_ADC_MspInit+0x1b0>)
 8000482:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000484:	4b2e      	ldr	r3, [pc, #184]	; (8000540 <HAL_ADC_MspInit+0x1b0>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d10b      	bne.n	80004a4 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800048c:	4b2d      	ldr	r3, [pc, #180]	; (8000544 <HAL_ADC_MspInit+0x1b4>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	4a2c      	ldr	r2, [pc, #176]	; (8000544 <HAL_ADC_MspInit+0x1b4>)
 8000492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000496:	6153      	str	r3, [r2, #20]
 8000498:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <HAL_ADC_MspInit+0x1b4>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a0:	613b      	str	r3, [r7, #16]
 80004a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a4:	4b27      	ldr	r3, [pc, #156]	; (8000544 <HAL_ADC_MspInit+0x1b4>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	4a26      	ldr	r2, [pc, #152]	; (8000544 <HAL_ADC_MspInit+0x1b4>)
 80004aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ae:	6153      	str	r3, [r2, #20]
 80004b0:	4b24      	ldr	r3, [pc, #144]	; (8000544 <HAL_ADC_MspInit+0x1b4>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Current_Pin|Voltage_Pin;
 80004bc:	2330      	movs	r3, #48	; 0x30
 80004be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c0:	2303      	movs	r3, #3
 80004c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c8:	f107 031c 	add.w	r3, r7, #28
 80004cc:	4619      	mov	r1, r3
 80004ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d2:	f002 fec7 	bl	8003264 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80004d6:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <HAL_ADC_MspInit+0x1c4>)
 80004d8:	4a1f      	ldr	r2, [pc, #124]	; (8000558 <HAL_ADC_MspInit+0x1c8>)
 80004da:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004dc:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <HAL_ADC_MspInit+0x1c4>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <HAL_ADC_MspInit+0x1c4>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80004e8:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <HAL_ADC_MspInit+0x1c4>)
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004ee:	4b19      	ldr	r3, [pc, #100]	; (8000554 <HAL_ADC_MspInit+0x1c4>)
 80004f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <HAL_ADC_MspInit+0x1c4>)
 80004f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004fc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <HAL_ADC_MspInit+0x1c4>)
 8000500:	2220      	movs	r2, #32
 8000502:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <HAL_ADC_MspInit+0x1c4>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800050a:	4812      	ldr	r0, [pc, #72]	; (8000554 <HAL_ADC_MspInit+0x1c4>)
 800050c:	f002 fd62 	bl	8002fd4 <HAL_DMA_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 8000516:	f000 fa5d 	bl	80009d4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <HAL_ADC_MspInit+0x1c4>)
 800051e:	639a      	str	r2, [r3, #56]	; 0x38
 8000520:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <HAL_ADC_MspInit+0x1c4>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2105      	movs	r1, #5
 800052a:	2012      	movs	r0, #18
 800052c:	f002 fd28 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000530:	2012      	movs	r0, #18
 8000532:	f002 fd41 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
}
 8000536:	bf00      	nop
 8000538:	3730      	adds	r7, #48	; 0x30
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	2000002c 	.word	0x2000002c
 8000544:	40021000 	.word	0x40021000
 8000548:	200024d4 	.word	0x200024d4
 800054c:	40020008 	.word	0x40020008
 8000550:	50000100 	.word	0x50000100
 8000554:	20002518 	.word	0x20002518
 8000558:	4002001c 	.word	0x4002001c

0800055c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8000560:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <MX_CAN_Init+0x64>)
 8000562:	4a18      	ldr	r2, [pc, #96]	; (80005c4 <MX_CAN_Init+0x68>)
 8000564:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <MX_CAN_Init+0x64>)
 8000568:	2202      	movs	r2, #2
 800056a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_CAN_Init+0x64>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_CAN_Init+0x64>)
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_CAN_Init+0x64>)
 800057a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800057e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_CAN_Init+0x64>)
 8000582:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000586:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_CAN_Init+0x64>)
 800058a:	2200      	movs	r2, #0
 800058c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_CAN_Init+0x64>)
 8000590:	2200      	movs	r2, #0
 8000592:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <MX_CAN_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_CAN_Init+0x64>)
 800059c:	2200      	movs	r2, #0
 800059e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <MX_CAN_Init+0x64>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_CAN_Init+0x64>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <MX_CAN_Init+0x64>)
 80005ae:	f002 f900 	bl	80027b2 <HAL_CAN_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80005b8:	f000 fa0c 	bl	80009d4 <Error_Handler>
  }

}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000255c 	.word	0x2000255c
 80005c4:	40006400 	.word	0x40006400

080005c8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a24      	ldr	r2, [pc, #144]	; (8000678 <HAL_CAN_MspInit+0xb0>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d141      	bne.n	800066e <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ea:	4b24      	ldr	r3, [pc, #144]	; (800067c <HAL_CAN_MspInit+0xb4>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a23      	ldr	r2, [pc, #140]	; (800067c <HAL_CAN_MspInit+0xb4>)
 80005f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b21      	ldr	r3, [pc, #132]	; (800067c <HAL_CAN_MspInit+0xb4>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b1e      	ldr	r3, [pc, #120]	; (800067c <HAL_CAN_MspInit+0xb4>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a1d      	ldr	r2, [pc, #116]	; (800067c <HAL_CAN_MspInit+0xb4>)
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b1b      	ldr	r3, [pc, #108]	; (800067c <HAL_CAN_MspInit+0xb4>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800061a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	2302      	movs	r3, #2
 8000622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800062c:	2309      	movs	r3, #9
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4619      	mov	r1, r3
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f002 fe13 	bl	8003264 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 5, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2105      	movs	r1, #5
 8000642:	2013      	movs	r0, #19
 8000644:	f002 fc9c 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8000648:	2013      	movs	r0, #19
 800064a:	f002 fcb5 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 5, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2105      	movs	r1, #5
 8000652:	2014      	movs	r0, #20
 8000654:	f002 fc94 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000658:	2014      	movs	r0, #20
 800065a:	f002 fcad 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 5, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2105      	movs	r1, #5
 8000662:	2015      	movs	r0, #21
 8000664:	f002 fc8c 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000668:	2015      	movs	r0, #21
 800066a:	f002 fca5 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	; 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40006400 	.word	0x40006400
 800067c:	40021000 	.word	0x40021000

08000680 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_DMA_Init+0x48>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <MX_DMA_Init+0x48>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_DMA_Init+0x48>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2105      	movs	r1, #5
 80006a2:	200b      	movs	r0, #11
 80006a4:	f002 fc6c 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006a8:	200b      	movs	r0, #11
 80006aa:	f002 fc85 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2105      	movs	r1, #5
 80006b2:	200c      	movs	r0, #12
 80006b4:	f002 fc64 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006b8:	200c      	movs	r0, #12
 80006ba:	f002 fc7d 	bl	8002fb8 <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80006dc:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	4a06      	ldr	r2, [pc, #24]	; (80006fc <vApplicationGetIdleTaskMemory+0x30>)
 80006e2:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000030 	.word	0x20000030
 80006fc:	20000084 	.word	0x20000084

08000700 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000700:	b5b0      	push	{r4, r5, r7, lr}
 8000702:	b09c      	sub	sp, #112	; 0x70
 8000704:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_FREERTOS_Init+0xa4>)
 8000708:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800070c:	461d      	mov	r5, r3
 800070e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000712:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800071a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f005 fd75 	bl	8006210 <osThreadCreate>
 8000726:	4602      	mov	r2, r0
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_FREERTOS_Init+0xa8>)
 800072a:	601a      	str	r2, [r3, #0]

  /* definition and creation of MinorLoopTask */
  osThreadDef(MinorLoopTask, StartMinorLoopTask, osPriorityRealtime, 0, 256);
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_FREERTOS_Init+0xac>)
 800072e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000732:	461d      	mov	r5, r3
 8000734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000738:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800073c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MinorLoopTaskHandle = osThreadCreate(osThread(MinorLoopTask), NULL);
 8000740:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f005 fd62 	bl	8006210 <osThreadCreate>
 800074c:	4602      	mov	r2, r0
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_FREERTOS_Init+0xb0>)
 8000750:	601a      	str	r2, [r3, #0]

  /* definition and creation of MajorLoopTask */
  osThreadDef(MajorLoopTask, StartMajorLoopTask, osPriorityHigh, 0, 1024);
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_FREERTOS_Init+0xb4>)
 8000754:	f107 041c 	add.w	r4, r7, #28
 8000758:	461d      	mov	r5, r3
 800075a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000762:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MajorLoopTaskHandle = osThreadCreate(osThread(MajorLoopTask), NULL);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f005 fd4f 	bl	8006210 <osThreadCreate>
 8000772:	4602      	mov	r2, r0
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_FREERTOS_Init+0xb8>)
 8000776:	601a      	str	r2, [r3, #0]

  /* definition and creation of CanCommunicatio */
  osThreadDef(CanCommunicatio, StartCanCommunicationTask, osPriorityAboveNormal, 0, 512);
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_FREERTOS_Init+0xbc>)
 800077a:	463c      	mov	r4, r7
 800077c:	461d      	mov	r5, r3
 800077e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000782:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000786:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CanCommunicatioHandle = osThreadCreate(osThread(CanCommunicatio), NULL);
 800078a:	463b      	mov	r3, r7
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f005 fd3e 	bl	8006210 <osThreadCreate>
 8000794:	4602      	mov	r2, r0
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_FREERTOS_Init+0xc0>)
 8000798:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800079a:	bf00      	nop
 800079c:	3770      	adds	r7, #112	; 0x70
 800079e:	46bd      	mov	sp, r7
 80007a0:	bdb0      	pop	{r4, r5, r7, pc}
 80007a2:	bf00      	nop
 80007a4:	080077ac 	.word	0x080077ac
 80007a8:	20002584 	.word	0x20002584
 80007ac:	080077d8 	.word	0x080077d8
 80007b0:	20002590 	.word	0x20002590
 80007b4:	08007804 	.word	0x08007804
 80007b8:	2000258c 	.word	0x2000258c
 80007bc:	08007830 	.word	0x08007830
 80007c0:	20002588 	.word	0x20002588

080007c4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f005 fd6b 	bl	80062a8 <osDelay>
 80007d2:	e7fb      	b.n	80007cc <StartDefaultTask+0x8>

080007d4 <StartMinorLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMinorLoopTask */
void StartMinorLoopTask(void const * argument)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMinorLoopTask */
  /* Infinite loop */
	TickType_t pxPrevWakeTime = xTaskGetTickCount();
 80007dc:	f006 f96c 	bl	8006ab8 <xTaskGetTickCount>
 80007e0:	4603      	mov	r3, r0
 80007e2:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
		vTaskDelayUntil(&pxPrevWakeTime, 1); //20000Hz loop
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2101      	movs	r1, #1
 80007ea:	4618      	mov	r0, r3
 80007ec:	f005 ffae 	bl	800674c <vTaskDelayUntil>
		Duty_Out(-0.1);
 80007f0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80007fc <StartMinorLoopTask+0x28>
 80007f4:	f000 fbbc 	bl	8000f70 <Duty_Out>
		vTaskDelayUntil(&pxPrevWakeTime, 1); //20000Hz loop
 80007f8:	e7f4      	b.n	80007e4 <StartMinorLoopTask+0x10>
 80007fa:	bf00      	nop
 80007fc:	bdcccccd 	.word	0xbdcccccd

08000800 <StartMajorLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMajorLoopTask */
void StartMajorLoopTask(void const * argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMajorLoopTask */
  /* Infinite loop */
	TickType_t pxPrevWakeTime = xTaskGetTickCount();
 8000808:	f006 f956 	bl	8006ab8 <xTaskGetTickCount>
 800080c:	4603      	mov	r3, r0
 800080e:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  vTaskDelayUntil(&pxPrevWakeTime, 4); //5000Hz loop
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2104      	movs	r1, #4
 8000816:	4618      	mov	r0, r3
 8000818:	f005 ff98 	bl	800674c <vTaskDelayUntil>
 800081c:	e7f8      	b.n	8000810 <StartMajorLoopTask+0x10>

0800081e <StartCanCommunicationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanCommunicationTask */
void StartCanCommunicationTask(void const * argument)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanCommunicationTask */
  /* Infinite loop */
	TickType_t pxPrevWakeTime = xTaskGetTickCount();
 8000826:	f006 f947 	bl	8006ab8 <xTaskGetTickCount>
 800082a:	4603      	mov	r3, r0
 800082c:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  vTaskDelayUntil(&pxPrevWakeTime, 20); //1kHz loop
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	2114      	movs	r1, #20
 8000834:	4618      	mov	r0, r3
 8000836:	f005 ff89 	bl	800674c <vTaskDelayUntil>
 800083a:	e7f8      	b.n	800082e <StartCanCommunicationTask+0x10>

0800083c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000852:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <MX_GPIO_Init+0xa8>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a23      	ldr	r2, [pc, #140]	; (80008e4 <MX_GPIO_Init+0xa8>)
 8000858:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800085c:	6153      	str	r3, [r2, #20]
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_GPIO_Init+0xa8>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_GPIO_Init+0xa8>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a1d      	ldr	r2, [pc, #116]	; (80008e4 <MX_GPIO_Init+0xa8>)
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_GPIO_Init+0xa8>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_GPIO_Init+0xa8>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <MX_GPIO_Init+0xa8>)
 8000888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_GPIO_Init+0xa8>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A2C8_Pin|D2D8_Pin|D3D9_Pin|D4D10_Pin 
 800089a:	2200      	movs	r2, #0
 800089c:	21f8      	movs	r1, #248	; 0xf8
 800089e:	4812      	ldr	r0, [pc, #72]	; (80008e8 <MX_GPIO_Init+0xac>)
 80008a0:	f002 fe52 	bl	8003548 <HAL_GPIO_WritePin>
                          |D5D11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = p1_Pin|p2_Pin|p3_Pin;
 80008a4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80008a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f002 fcd2 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = A2C8_Pin|D2D8_Pin|D3D9_Pin|D4D10_Pin 
 80008c0:	23f8      	movs	r3, #248	; 0xf8
 80008c2:	60fb      	str	r3, [r7, #12]
                          |D5D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_GPIO_Init+0xac>)
 80008d8:	f002 fcc4 	bl	8003264 <HAL_GPIO_Init>

}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	48000400 	.word	0x48000400

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f0:	f000 fc2c 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f817 	bl	8000926 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f7ff ffa0 	bl	800083c <MX_GPIO_Init>
  MX_DMA_Init();
 80008fc:	f7ff fec0 	bl	8000680 <MX_DMA_Init>
  MX_ADC1_Init();
 8000900:	f7ff fc66 	bl	80001d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000904:	f7ff fcd4 	bl	80002b0 <MX_ADC2_Init>
  MX_CAN_Init();
 8000908:	f7ff fe28 	bl	800055c <MX_CAN_Init>
  MX_TIM2_Init();
 800090c:	f000 f96c 	bl	8000be8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000910:	f000 f9bc 	bl	8000c8c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000914:	f000 fb74 	bl	8001000 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  TIM_Start_Encoder();
 8000918:	f000 fada 	bl	8000ed0 <TIM_Start_Encoder>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800091c:	f7ff fef0 	bl	8000700 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000920:	f005 fc6f 	bl	8006202 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000924:	e7fe      	b.n	8000924 <main+0x38>

08000926 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b090      	sub	sp, #64	; 0x40
 800092a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092c:	f107 0318 	add.w	r3, r7, #24
 8000930:	2228      	movs	r2, #40	; 0x28
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f006 ff1f 	bl	8007778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000948:	2301      	movs	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800094c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000950:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000956:	2301      	movs	r3, #1
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000964:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000968:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	f107 0318 	add.w	r3, r7, #24
 800096e:	4618      	mov	r0, r3
 8000970:	f002 fe02 	bl	8003578 <HAL_RCC_OscConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800097a:	f000 f82b 	bl	80009d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	230f      	movs	r3, #15
 8000980:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000982:	2302      	movs	r3, #2
 8000984:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800098a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2102      	movs	r1, #2
 8000998:	4618      	mov	r0, r3
 800099a:	f003 fcf5 	bl	8004388 <HAL_RCC_ClockConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009a4:	f000 f816 	bl	80009d4 <Error_Handler>
  }
}
 80009a8:	bf00      	nop
 80009aa:	3740      	adds	r7, #64	; 0x40
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d101      	bne.n	80009c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009c2:	f000 fbd9 	bl	8001178 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40014800 	.word	0x40014800

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_MspInit+0x4c>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	210f      	movs	r1, #15
 8000a1e:	f06f 0001 	mvn.w	r0, #1
 8000a22:	f002 faad 	bl	8002f80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0); 
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	201a      	movs	r0, #26
 8000a4a:	f002 fa99 	bl	8002f80 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn); 
 8000a4e:	201a      	movs	r0, #26
 8000a50:	f002 fab2 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <HAL_InitTick+0x9c>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <HAL_InitTick+0x9c>)
 8000a5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <HAL_InitTick+0x9c>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a6c:	f107 0210 	add.w	r2, r7, #16
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 febe 	bl	80047f8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a7c:	f003 fe9a 	bl	80047b4 <HAL_RCC_GetPCLK2Freq>
 8000a80:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a84:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <HAL_InitTick+0xa0>)
 8000a86:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8a:	0c9b      	lsrs	r3, r3, #18
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <HAL_InitTick+0xa8>)
 8000a94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a9c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000ab2:	f003 fed3 	bl	800485c <HAL_TIM_Base_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d104      	bne.n	8000ac6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000abc:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000abe:	f003 ff03 	bl	80048c8 <HAL_TIM_Base_Start_IT>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3730      	adds	r7, #48	; 0x30
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	431bde83 	.word	0x431bde83
 8000ad8:	20002594 	.word	0x20002594
 8000adc:	40014800 	.word	0x40014800

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <DMA1_Channel1_IRQHandler+0x10>)
 8000b1a:	f002 fae0 	bl	80030de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200024d4 	.word	0x200024d4

08000b28 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <DMA1_Channel2_IRQHandler+0x10>)
 8000b2e:	f002 fad6 	bl	80030de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20002518 	.word	0x20002518

08000b3c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <ADC1_2_IRQHandler+0x14>)
 8000b42:	f000 fce9 	bl	8001518 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000b46:	4803      	ldr	r0, [pc, #12]	; (8000b54 <ADC1_2_IRQHandler+0x18>)
 8000b48:	f000 fce6 	bl	8001518 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20002484 	.word	0x20002484
 8000b54:	20002434 	.word	0x20002434

08000b58 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <CAN_TX_IRQHandler+0x10>)
 8000b5e:	f001 ff23 	bl	80029a8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000255c 	.word	0x2000255c

08000b6c <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <CAN_RX0_IRQHandler+0x10>)
 8000b72:	f001 ff19 	bl	80029a8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000255c 	.word	0x2000255c

08000b80 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <CAN_RX1_IRQHandler+0x10>)
 8000b86:	f001 ff0f 	bl	80029a8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000255c 	.word	0x2000255c

08000b94 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000b9a:	f004 f806 	bl	8004baa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20002594 	.word	0x20002594

08000ba8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <USART2_IRQHandler+0x10>)
 8000bae:	f004 fe79 	bl	80058a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20002654 	.word	0x20002654

08000bbc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <SystemInit+0x28>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <SystemInit+0x28>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SystemInit+0x28>)
 8000bd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bd6:	609a      	str	r2, [r3, #8]
#endif
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
//  TIM_Encoder_InitTypeDef sConfig = {0};
//  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bf4:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000c02:	f04f 32ff 	mov.w	r2, #4294967295
 8000c06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_TIM2_Init+0x9c>)
 8000c16:	2203      	movs	r2, #3
 8000c18:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_TIM2_Init+0x9c>)
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_TIM2_Init+0x9c>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_TIM2_Init+0x9c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 3;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_TIM2_Init+0x9c>)
 8000c2e:	2203      	movs	r2, #3
 8000c30:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_TIM2_Init+0x9c>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_TIM2_Init+0x9c>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_TIM2_Init+0x9c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 3;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_TIM2_Init+0x9c>)
 8000c46:	2203      	movs	r2, #3
 8000c48:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c4a:	490e      	ldr	r1, [pc, #56]	; (8000c84 <MX_TIM2_Init+0x9c>)
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000c4e:	f003 fee3 	bl	8004a18 <HAL_TIM_Encoder_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c58:	f7ff febc 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MX_TIM2_Init+0xa0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_TIM2_Init+0xa0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c68:	4907      	ldr	r1, [pc, #28]	; (8000c88 <MX_TIM2_Init+0xa0>)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000c6c:	f004 fd40 	bl	80056f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000c76:	f7ff fead 	bl	80009d4 <Error_Handler>
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20002614 	.word	0x20002614
 8000c84:	20000284 	.word	0x20000284
 8000c88:	200002a8 	.word	0x200002a8

08000c8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
//  TIM_MasterConfigTypeDef sMasterConfig = {0};
//  TIM_OC_InitTypeDef sConfigOC = {0};

  htim3.Instance = TIM3;
 8000c90:	4b31      	ldr	r3, [pc, #196]	; (8000d58 <MX_TIM3_Init+0xcc>)
 8000c92:	4a32      	ldr	r2, [pc, #200]	; (8000d5c <MX_TIM3_Init+0xd0>)
 8000c94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c96:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <MX_TIM3_Init+0xcc>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c9c:	4b2e      	ldr	r3, [pc, #184]	; (8000d58 <MX_TIM3_Init+0xcc>)
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <MX_TIM3_Init+0xcc>)
 8000ca4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000ca8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000caa:	4b2b      	ldr	r3, [pc, #172]	; (8000d58 <MX_TIM3_Init+0xcc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cb0:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <MX_TIM3_Init+0xcc>)
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cb6:	4828      	ldr	r0, [pc, #160]	; (8000d58 <MX_TIM3_Init+0xcc>)
 8000cb8:	f003 fe30 	bl	800491c <HAL_TIM_PWM_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM3_Init+0x3a>
  {
    Error_Handler();
 8000cc2:	f7ff fe87 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <MX_TIM3_Init+0xd4>)
 8000cc8:	2220      	movs	r2, #32
 8000cca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <MX_TIM3_Init+0xd4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cd2:	4923      	ldr	r1, [pc, #140]	; (8000d60 <MX_TIM3_Init+0xd4>)
 8000cd4:	4820      	ldr	r0, [pc, #128]	; (8000d58 <MX_TIM3_Init+0xcc>)
 8000cd6:	f004 fd0b 	bl	80056f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ce0:	f7ff fe78 	bl	80009d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <MX_TIM3_Init+0xd8>)
 8000ce6:	2260      	movs	r2, #96	; 0x60
 8000ce8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000cea:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <MX_TIM3_Init+0xd8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <MX_TIM3_Init+0xd8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_TIM3_Init+0xd8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4919      	ldr	r1, [pc, #100]	; (8000d64 <MX_TIM3_Init+0xd8>)
 8000d00:	4815      	ldr	r0, [pc, #84]	; (8000d58 <MX_TIM3_Init+0xcc>)
 8000d02:	f004 f871 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d0c:	f7ff fe62 	bl	80009d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d10:	2204      	movs	r2, #4
 8000d12:	4914      	ldr	r1, [pc, #80]	; (8000d64 <MX_TIM3_Init+0xd8>)
 8000d14:	4810      	ldr	r0, [pc, #64]	; (8000d58 <MX_TIM3_Init+0xcc>)
 8000d16:	f004 f867 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000d20:	f7ff fe58 	bl	80009d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d24:	2208      	movs	r2, #8
 8000d26:	490f      	ldr	r1, [pc, #60]	; (8000d64 <MX_TIM3_Init+0xd8>)
 8000d28:	480b      	ldr	r0, [pc, #44]	; (8000d58 <MX_TIM3_Init+0xcc>)
 8000d2a:	f004 f85d 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8000d34:	f7ff fe4e 	bl	80009d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d38:	220c      	movs	r2, #12
 8000d3a:	490a      	ldr	r1, [pc, #40]	; (8000d64 <MX_TIM3_Init+0xd8>)
 8000d3c:	4806      	ldr	r0, [pc, #24]	; (8000d58 <MX_TIM3_Init+0xcc>)
 8000d3e:	f004 f853 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000d48:	f7ff fe44 	bl	80009d4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <MX_TIM3_Init+0xcc>)
 8000d4e:	f000 f86b 	bl	8000e28 <HAL_TIM_MspPostInit>

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200025d4 	.word	0x200025d4
 8000d5c:	40000400 	.word	0x40000400
 8000d60:	200002a8 	.word	0x200002a8
 8000d64:	200002b4 	.word	0x200002b4

08000d68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d88:	d128      	bne.n	8000ddc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	61d3      	str	r3, [r2, #28]
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	6153      	str	r3, [r2, #20]
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f002 fa44 	bl	8003264 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	; 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_TIM_PWM_MspInit+0x38>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10b      	bne.n	8000e12 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	61d3      	str	r3, [r2, #28]
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40000400 	.word	0x40000400
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <HAL_TIM_MspPostInit+0x9c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d138      	bne.n	8000ebc <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <HAL_TIM_MspPostInit+0xa0>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <HAL_TIM_MspPostInit+0xa0>)
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	6153      	str	r3, [r2, #20]
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_TIM_MspPostInit+0xa0>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_TIM_MspPostInit+0xa0>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <HAL_TIM_MspPostInit+0xa0>)
 8000e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e6c:	6153      	str	r3, [r2, #20]
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_TIM_MspPostInit+0xa0>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e7a:	23c0      	movs	r3, #192	; 0xc0
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e98:	f002 f9e4 	bl	8003264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eac:	2302      	movs	r3, #2
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <HAL_TIM_MspPostInit+0xa4>)
 8000eb8:	f002 f9d4 	bl	8003264 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	; 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40000400 	.word	0x40000400
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	48000400 	.word	0x48000400

08000ed0 <TIM_Start_Encoder>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void TIM_Start_Encoder(){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	if(HAL_TIM_Encoder_Init(&htim2, &sConfig)!=HAL_OK)Error_Handler();
 8000ed4:	4909      	ldr	r1, [pc, #36]	; (8000efc <TIM_Start_Encoder+0x2c>)
 8000ed6:	480a      	ldr	r0, [pc, #40]	; (8000f00 <TIM_Start_Encoder+0x30>)
 8000ed8:	f003 fd9e 	bl	8004a18 <HAL_TIM_Encoder_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <TIM_Start_Encoder+0x16>
 8000ee2:	f7ff fd77 	bl	80009d4 <Error_Handler>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000ee6:	213c      	movs	r1, #60	; 0x3c
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <TIM_Start_Encoder+0x30>)
 8000eea:	f003 fe27 	bl	8004b3c <HAL_TIM_Encoder_Start>
	TIM2->CNT=2000000000;
 8000eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <TIM_Start_Encoder+0x34>)
 8000ef4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000284 	.word	0x20000284
 8000f00:	20002614 	.word	0x20002614
 8000f04:	77359400 	.word	0x77359400

08000f08 <TIM_PWMs_Set>:
uint32_t Read_Encoder(){
	return TIM2->CNT;
}
void TIM_PWMs_Set(int *pwms){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; ++i) {
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	e021      	b.n	8000f5a <TIM_PWMs_Set+0x52>
		sConfigOC.Pulse = pwms[i];
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <TIM_PWMs_Set+0x60>)
 8000f24:	605a      	str	r2, [r3, #4]
		if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, 0x00000004U * i)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	490e      	ldr	r1, [pc, #56]	; (8000f68 <TIM_PWMs_Set+0x60>)
 8000f2e:	480f      	ldr	r0, [pc, #60]	; (8000f6c <TIM_PWMs_Set+0x64>)
 8000f30:	f003 ff5a 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <TIM_PWMs_Set+0x36>
				!= HAL_OK)
			Error_Handler();
 8000f3a:	f7ff fd4b 	bl	80009d4 <Error_Handler>
		if (HAL_TIM_PWM_Start(&htim3, 0x00000004U * i) != HAL_OK)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4619      	mov	r1, r3
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <TIM_PWMs_Set+0x64>)
 8000f46:	f003 fd15 	bl	8004974 <HAL_TIM_PWM_Start>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <TIM_PWMs_Set+0x4c>
			Error_Handler();
 8000f50:	f7ff fd40 	bl	80009d4 <Error_Handler>
	for (int i = 0; i < 4; ++i) {
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	3301      	adds	r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	ddda      	ble.n	8000f16 <TIM_PWMs_Set+0xe>
	}
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200002b4 	.word	0x200002b4
 8000f6c:	200025d4 	.word	0x200025d4

08000f70 <Duty_Out>:
void Duty_Out(float duty){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	ed87 0a01 	vstr	s0, [r7, #4]
	static int pwms[4];
	if (duty > 0) {
 8000f7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f86:	dd17      	ble.n	8000fb8 <Duty_Out+0x48>
		pwms[0] = pwms[1] = duty * 1023;
 8000f88:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000ff8 <Duty_Out+0x88>
 8000f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f98:	ee17 2a90 	vmov	r2, s15
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <Duty_Out+0x8c>)
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <Duty_Out+0x8c>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <Duty_Out+0x8c>)
 8000fa6:	6013      	str	r3, [r2, #0]
		pwms[2] = pwms[3] = 10;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <Duty_Out+0x8c>)
 8000faa:	220a      	movs	r2, #10
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <Duty_Out+0x8c>)
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <Duty_Out+0x8c>)
 8000fb4:	6093      	str	r3, [r2, #8]
 8000fb6:	e018      	b.n	8000fea <Duty_Out+0x7a>
	} else {
		pwms[0] = pwms[1] = 10;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <Duty_Out+0x8c>)
 8000fba:	220a      	movs	r2, #10
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <Duty_Out+0x8c>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <Duty_Out+0x8c>)
 8000fc4:	6013      	str	r3, [r2, #0]
		pwms[2] = pwms[3] = -duty * 1023;
 8000fc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fca:	eef1 7a67 	vneg.f32	s15, s15
 8000fce:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000ff8 <Duty_Out+0x88>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fda:	ee17 2a90 	vmov	r2, s15
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <Duty_Out+0x8c>)
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <Duty_Out+0x8c>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <Duty_Out+0x8c>)
 8000fe8:	6093      	str	r3, [r2, #8]
	}
	TIM_PWMs_Set(pwms);
 8000fea:	4804      	ldr	r0, [pc, #16]	; (8000ffc <Duty_Out+0x8c>)
 8000fec:	f7ff ff8c 	bl	8000f08 <TIM_PWMs_Set>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	447fc000 	.word	0x447fc000
 8000ffc:	200002d0 	.word	0x200002d0

08001000 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_USART2_UART_Init+0x58>)
 8001006:	4a15      	ldr	r2, [pc, #84]	; (800105c <MX_USART2_UART_Init+0x5c>)
 8001008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <MX_USART2_UART_Init+0x58>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_USART2_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_USART2_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_USART2_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_USART2_UART_Init+0x58>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MX_USART2_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_USART2_UART_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <MX_USART2_UART_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_USART2_UART_Init+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_USART2_UART_Init+0x58>)
 8001044:	f004 fbe0 	bl	8005808 <HAL_UART_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800104e:	f7ff fcc1 	bl	80009d4 <Error_Handler>
  }

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20002654 	.word	0x20002654
 800105c:	40004400 	.word	0x40004400

08001060 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <HAL_UART_MspInit+0x90>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d131      	bne.n	80010e6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_UART_MspInit+0x94>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <HAL_UART_MspInit+0x94>)
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	61d3      	str	r3, [r2, #28]
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <HAL_UART_MspInit+0x94>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_UART_MspInit+0x94>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <HAL_UART_MspInit+0x94>)
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	6153      	str	r3, [r2, #20]
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <HAL_UART_MspInit+0x94>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80010b2:	f248 0304 	movw	r3, #32772	; 0x8004
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c4:	2307      	movs	r3, #7
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f002 f8c7 	bl	8003264 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2105      	movs	r1, #5
 80010da:	2026      	movs	r0, #38	; 0x26
 80010dc:	f001 ff50 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010e0:	2026      	movs	r0, #38	; 0x26
 80010e2:	f001 ff69 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	; 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40004400 	.word	0x40004400
 80010f4:	40021000 	.word	0x40021000

080010f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001130 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010fe:	e003      	b.n	8001108 <LoopCopyDataInit>

08001100 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001102:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001104:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001106:	3104      	adds	r1, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <LoopForever+0xa>)
	ldr	r3, =_edata
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <LoopForever+0xe>)
	adds	r2, r0, r1
 800110c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800110e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001110:	d3f6      	bcc.n	8001100 <CopyDataInit>
	ldr	r2, =_sbss
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001114:	e002      	b.n	800111c <LoopFillZerobss>

08001116 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001116:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001118:	f842 3b04 	str.w	r3, [r2], #4

0800111c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <LoopForever+0x16>)
	cmp	r2, r3
 800111e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001120:	d3f9      	bcc.n	8001116 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001122:	f7ff fd4b 	bl	8000bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001126:	f006 fb03 	bl	8007730 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800112a:	f7ff fbdf 	bl	80008ec <main>

0800112e <LoopForever>:

LoopForever:
    b LoopForever
 800112e:	e7fe      	b.n	800112e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001130:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001134:	08007894 	.word	0x08007894
	ldr	r0, =_sdata
 8001138:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800113c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001140:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001144:	200026d8 	.word	0x200026d8

08001148 <CAN_SCE_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <CAN_SCE_IRQHandler>
	...

0800114c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_Init+0x28>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_Init+0x28>)
 8001156:	f043 0310 	orr.w	r3, r3, #16
 800115a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f001 ff04 	bl	8002f6a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff fc66 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff fc3c 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40022000 	.word	0x40022000

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008
 800119c:	200026d4 	.word	0x200026d4

080011a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200026d4 	.word	0x200026d4

080011b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b09a      	sub	sp, #104	; 0x68
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e172      	b.n	80014fa <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	2b00      	cmp	r3, #0
 8001224:	d176      	bne.n	8001314 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	2b00      	cmp	r3, #0
 800122c:	d152      	bne.n	80012d4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff f8a1 	bl	8000390 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d13b      	bne.n	80012d4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f001 fa49 	bl	80026f4 <ADC_Disable>
 8001262:	4603      	mov	r3, r0
 8001264:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	d12f      	bne.n	80012d4 <HAL_ADC_Init+0xe0>
 8001274:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001278:	2b00      	cmp	r3, #0
 800127a:	d12b      	bne.n	80012d4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001284:	f023 0302 	bic.w	r3, r3, #2
 8001288:	f043 0202 	orr.w	r2, r3, #2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800129e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ae:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012b0:	4b94      	ldr	r3, [pc, #592]	; (8001504 <HAL_ADC_Init+0x310>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a94      	ldr	r2, [pc, #592]	; (8001508 <HAL_ADC_Init+0x314>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9a      	lsrs	r2, r3, #18
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012c6:	e002      	b.n	80012ce <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f9      	bne.n	80012c8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012f0:	d110      	bne.n	8001314 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f023 0312 	bic.w	r3, r3, #18
 80012fa:	f043 0210 	orr.w	r2, r3, #16
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f043 0201 	orr.w	r2, r3, #1
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f003 0310 	and.w	r3, r3, #16
 800131c:	2b00      	cmp	r3, #0
 800131e:	f040 80df 	bne.w	80014e0 <HAL_ADC_Init+0x2ec>
 8001322:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001326:	2b00      	cmp	r3, #0
 8001328:	f040 80da 	bne.w	80014e0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001336:	2b00      	cmp	r3, #0
 8001338:	f040 80d2 	bne.w	80014e0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001344:	f043 0202 	orr.w	r2, r3, #2
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800134c:	4b6f      	ldr	r3, [pc, #444]	; (800150c <HAL_ADC_Init+0x318>)
 800134e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001358:	d102      	bne.n	8001360 <HAL_ADC_Init+0x16c>
 800135a:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <HAL_ADC_Init+0x31c>)
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	e002      	b.n	8001366 <HAL_ADC_Init+0x172>
 8001360:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001364:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b01      	cmp	r3, #1
 8001372:	d108      	bne.n	8001386 <HAL_ADC_Init+0x192>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b01      	cmp	r3, #1
 8001380:	d101      	bne.n	8001386 <HAL_ADC_Init+0x192>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_ADC_Init+0x194>
 8001386:	2300      	movs	r3, #0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d11c      	bne.n	80013c6 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800138c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800138e:	2b00      	cmp	r3, #0
 8001390:	d010      	beq.n	80013b4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b01      	cmp	r3, #1
 800139c:	d107      	bne.n	80013ae <HAL_ADC_Init+0x1ba>
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d101      	bne.n	80013ae <HAL_ADC_Init+0x1ba>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_ADC_Init+0x1bc>
 80013ae:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d108      	bne.n	80013c6 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80013b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7e5b      	ldrb	r3, [r3, #25]
 80013ca:	035b      	lsls	r3, r3, #13
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013d0:	2a01      	cmp	r2, #1
 80013d2:	d002      	beq.n	80013da <HAL_ADC_Init+0x1e6>
 80013d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d8:	e000      	b.n	80013dc <HAL_ADC_Init+0x1e8>
 80013da:	2200      	movs	r2, #0
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013ec:	4313      	orrs	r3, r2
 80013ee:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d11b      	bne.n	8001432 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7e5b      	ldrb	r3, [r3, #25]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d109      	bne.n	8001416 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	3b01      	subs	r3, #1
 8001408:	045a      	lsls	r2, r3, #17
 800140a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800140c:	4313      	orrs	r3, r2
 800140e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001412:	663b      	str	r3, [r7, #96]	; 0x60
 8001414:	e00d      	b.n	8001432 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800141e:	f043 0220 	orr.w	r2, r3, #32
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	2b01      	cmp	r3, #1
 8001438:	d007      	beq.n	800144a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	4313      	orrs	r3, r2
 8001444:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001446:	4313      	orrs	r3, r2
 8001448:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	2b00      	cmp	r3, #0
 8001456:	d114      	bne.n	8001482 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001466:	f023 0302 	bic.w	r3, r3, #2
 800146a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7e1b      	ldrb	r3, [r3, #24]
 8001470:	039a      	lsls	r2, r3, #14
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4313      	orrs	r3, r2
 800147c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800147e:	4313      	orrs	r3, r2
 8001480:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_ADC_Init+0x320>)
 800148a:	4013      	ands	r3, r2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001492:	430b      	orrs	r3, r1
 8001494:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d10c      	bne.n	80014b8 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	f023 010f 	bic.w	r1, r3, #15
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	1e5a      	subs	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30
 80014b6:	e007      	b.n	80014c8 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 020f 	bic.w	r2, r2, #15
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	f043 0201 	orr.w	r2, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
 80014de:	e00a      	b.n	80014f6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f023 0312 	bic.w	r3, r3, #18
 80014e8:	f043 0210 	orr.w	r2, r3, #16
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80014f0:	2301      	movs	r3, #1
 80014f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80014f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3768      	adds	r7, #104	; 0x68
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000000 	.word	0x20000000
 8001508:	431bde83 	.word	0x431bde83
 800150c:	50000300 	.word	0x50000300
 8001510:	50000100 	.word	0x50000100
 8001514:	fff0c007 	.word	0xfff0c007

08001518 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b04      	cmp	r3, #4
 8001538:	d106      	bne.n	8001548 <HAL_ADC_IRQHandler+0x30>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b04      	cmp	r3, #4
 8001546:	d00d      	beq.n	8001564 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001552:	2b08      	cmp	r3, #8
 8001554:	d17a      	bne.n	800164c <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b08      	cmp	r3, #8
 8001562:	d173      	bne.n	800164c <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	2b00      	cmp	r3, #0
 800156e:	d105      	bne.n	800157c <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800157c:	4b88      	ldr	r3, [pc, #544]	; (80017a0 <HAL_ADC_IRQHandler+0x288>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 031f 	and.w	r3, r3, #31
 8001584:	2b00      	cmp	r3, #0
 8001586:	d010      	beq.n	80015aa <HAL_ADC_IRQHandler+0x92>
 8001588:	4b85      	ldr	r3, [pc, #532]	; (80017a0 <HAL_ADC_IRQHandler+0x288>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	2b05      	cmp	r3, #5
 8001592:	d00a      	beq.n	80015aa <HAL_ADC_IRQHandler+0x92>
 8001594:	4b82      	ldr	r3, [pc, #520]	; (80017a0 <HAL_ADC_IRQHandler+0x288>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 031f 	and.w	r3, r3, #31
 800159c:	2b09      	cmp	r3, #9
 800159e:	d004      	beq.n	80015aa <HAL_ADC_IRQHandler+0x92>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a8:	d104      	bne.n	80015b4 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	e003      	b.n	80015bc <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80015b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d139      	bne.n	800163e <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d134      	bne.n	800163e <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d12d      	bne.n	800163e <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d11a      	bne.n	8001626 <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 020c 	bic.w	r2, r2, #12
 80015fe:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d112      	bne.n	800163e <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
 8001624:	e00b      	b.n	800163e <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f043 0210 	orr.w	r2, r3, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f043 0201 	orr.w	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fdba 	bl	80011b8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	220c      	movs	r2, #12
 800164a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	2b20      	cmp	r3, #32
 8001658:	d106      	bne.n	8001668 <HAL_ADC_IRQHandler+0x150>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0320 	and.w	r3, r3, #32
 8001664:	2b20      	cmp	r3, #32
 8001666:	d00f      	beq.n	8001688 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001672:	2b40      	cmp	r3, #64	; 0x40
 8001674:	f040 80a9 	bne.w	80017ca <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001682:	2b40      	cmp	r3, #64	; 0x40
 8001684:	f040 80a1 	bne.w	80017ca <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001694:	4b42      	ldr	r3, [pc, #264]	; (80017a0 <HAL_ADC_IRQHandler+0x288>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 031f 	and.w	r3, r3, #31
 800169c:	2b00      	cmp	r3, #0
 800169e:	d010      	beq.n	80016c2 <HAL_ADC_IRQHandler+0x1aa>
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <HAL_ADC_IRQHandler+0x288>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d00a      	beq.n	80016c2 <HAL_ADC_IRQHandler+0x1aa>
 80016ac:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <HAL_ADC_IRQHandler+0x288>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	d004      	beq.n	80016c2 <HAL_ADC_IRQHandler+0x1aa>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c0:	d104      	bne.n	80016cc <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	e003      	b.n	80016d4 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80016cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d010      	beq.n	8001704 <HAL_ADC_IRQHandler+0x1ec>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d167      	bne.n	80017bc <HAL_ADC_IRQHandler+0x2a4>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d160      	bne.n	80017bc <HAL_ADC_IRQHandler+0x2a4>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001700:	2b00      	cmp	r3, #0
 8001702:	d15b      	bne.n	80017bc <HAL_ADC_IRQHandler+0x2a4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170e:	2b40      	cmp	r3, #64	; 0x40
 8001710:	d154      	bne.n	80017bc <HAL_ADC_IRQHandler+0x2a4>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_ADC_IRQHandler+0x288>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	2b00      	cmp	r3, #0
 800171c:	d010      	beq.n	8001740 <HAL_ADC_IRQHandler+0x228>
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_ADC_IRQHandler+0x288>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	2b06      	cmp	r3, #6
 8001728:	d00a      	beq.n	8001740 <HAL_ADC_IRQHandler+0x228>
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <HAL_ADC_IRQHandler+0x288>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	2b07      	cmp	r3, #7
 8001734:	d004      	beq.n	8001740 <HAL_ADC_IRQHandler+0x228>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800173e:	d104      	bne.n	800174a <HAL_ADC_IRQHandler+0x232>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	e003      	b.n	8001752 <HAL_ADC_IRQHandler+0x23a>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800174a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d12f      	bne.n	80017bc <HAL_ADC_IRQHandler+0x2a4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d11c      	bne.n	80017a4 <HAL_ADC_IRQHandler+0x28c>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001778:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d114      	bne.n	80017bc <HAL_ADC_IRQHandler+0x2a4>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
 800179e:	e00d      	b.n	80017bc <HAL_ADC_IRQHandler+0x2a4>
 80017a0:	50000300 	.word	0x50000300
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f043 0210 	orr.w	r2, r3, #16
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f8cb 	bl	8001958 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2260      	movs	r2, #96	; 0x60
 80017c8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d4:	2b80      	cmp	r3, #128	; 0x80
 80017d6:	d113      	bne.n	8001800 <HAL_ADC_IRQHandler+0x2e8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e2:	2b80      	cmp	r3, #128	; 0x80
 80017e4:	d10c      	bne.n	8001800 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fcea 	bl	80011cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800180e:	d115      	bne.n	800183c <HAL_ADC_IRQHandler+0x324>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800181e:	d10d      	bne.n	800183c <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f8a7 	bl	8001980 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183a:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800184a:	d115      	bne.n	8001878 <HAL_ADC_IRQHandler+0x360>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800185a:	d10d      	bne.n	8001878 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f893 	bl	8001994 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001876:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	2b10      	cmp	r3, #16
 8001884:	d13d      	bne.n	8001902 <HAL_ADC_IRQHandler+0x3ea>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	2b10      	cmp	r3, #16
 8001892:	d136      	bne.n	8001902 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001898:	2b01      	cmp	r3, #1
 800189a:	d102      	bne.n	80018a2 <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 800189c:	2301      	movs	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e019      	b.n	80018d6 <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a2:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <HAL_ADC_IRQHandler+0x43c>)
 80018a4:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d10a      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80018c0:	2301      	movs	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e007      	b.n	80018d6 <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80018d2:	2301      	movs	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d10e      	bne.n	80018fa <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ec:	f043 0202 	orr.w	r2, r3, #2
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fc73 	bl	80011e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2210      	movs	r2, #16
 8001900:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001910:	d11b      	bne.n	800194a <HAL_ADC_IRQHandler+0x432>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001920:	d113      	bne.n	800194a <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f043 0208 	orr.w	r2, r3, #8
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001942:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f811 	bl	800196c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	50000300 	.word	0x50000300

08001958 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b09b      	sub	sp, #108	; 0x6c
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x22>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e2a5      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x56e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f040 8289 	bne.w	8001ef4 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d81c      	bhi.n	8001a24 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	461a      	mov	r2, r3
 80019fe:	231f      	movs	r3, #31
 8001a00:	4093      	lsls	r3, r2
 8001a02:	43db      	mvns	r3, r3
 8001a04:	4019      	ands	r1, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30
 8001a22:	e063      	b.n	8001aec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b09      	cmp	r3, #9
 8001a2a:	d81e      	bhi.n	8001a6a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	3b1e      	subs	r3, #30
 8001a40:	221f      	movs	r2, #31
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	4019      	ands	r1, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	3b1e      	subs	r3, #30
 8001a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	635a      	str	r2, [r3, #52]	; 0x34
 8001a68:	e040      	b.n	8001aec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b0e      	cmp	r3, #14
 8001a70:	d81e      	bhi.n	8001ab0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	3b3c      	subs	r3, #60	; 0x3c
 8001a86:	221f      	movs	r2, #31
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4019      	ands	r1, r3
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	3b3c      	subs	r3, #60	; 0x3c
 8001aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
 8001aae:	e01d      	b.n	8001aec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	3b5a      	subs	r3, #90	; 0x5a
 8001ac4:	221f      	movs	r2, #31
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	4019      	ands	r1, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	3b5a      	subs	r3, #90	; 0x5a
 8001ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 80e5 	bne.w	8001cc6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b09      	cmp	r3, #9
 8001b02:	d91c      	bls.n	8001b3e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6999      	ldr	r1, [r3, #24]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	3b1e      	subs	r3, #30
 8001b16:	2207      	movs	r2, #7
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4019      	ands	r1, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6898      	ldr	r0, [r3, #8]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3b1e      	subs	r3, #30
 8001b30:	fa00 f203 	lsl.w	r2, r0, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	619a      	str	r2, [r3, #24]
 8001b3c:	e019      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6959      	ldr	r1, [r3, #20]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	2207      	movs	r2, #7
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4019      	ands	r1, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6898      	ldr	r0, [r3, #8]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	08db      	lsrs	r3, r3, #3
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d84f      	bhi.n	8001c34 <HAL_ADC_ConfigChannel+0x28c>
 8001b94:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <HAL_ADC_ConfigChannel+0x1f4>)
 8001b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9a:	bf00      	nop
 8001b9c:	08001bad 	.word	0x08001bad
 8001ba0:	08001bcf 	.word	0x08001bcf
 8001ba4:	08001bf1 	.word	0x08001bf1
 8001ba8:	08001c13 	.word	0x08001c13
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bb2:	4b9e      	ldr	r3, [pc, #632]	; (8001e2c <HAL_ADC_ConfigChannel+0x484>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	0691      	lsls	r1, r2, #26
 8001bbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bca:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bcc:	e07e      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bd4:	4b95      	ldr	r3, [pc, #596]	; (8001e2c <HAL_ADC_ConfigChannel+0x484>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	0691      	lsls	r1, r2, #26
 8001bde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001be0:	430a      	orrs	r2, r1
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bec:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bee:	e06d      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001bf6:	4b8d      	ldr	r3, [pc, #564]	; (8001e2c <HAL_ADC_ConfigChannel+0x484>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	0691      	lsls	r1, r2, #26
 8001c00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c02:	430a      	orrs	r2, r1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c0e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c10:	e05c      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c18:	4b84      	ldr	r3, [pc, #528]	; (8001e2c <HAL_ADC_ConfigChannel+0x484>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	0691      	lsls	r1, r2, #26
 8001c22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c24:	430a      	orrs	r2, r1
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c30:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c32:	e04b      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	069b      	lsls	r3, r3, #26
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d107      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c56:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	069b      	lsls	r3, r3, #26
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d107      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c7a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	069b      	lsls	r3, r3, #26
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d107      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c9e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ca6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	069b      	lsls	r3, r3, #26
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d10a      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cc2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001cc4:	e001      	b.n	8001cca <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001cc6:	bf00      	nop
 8001cc8:	e000      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x324>
      break;
 8001cca:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d108      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x344>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x344>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_ADC_ConfigChannel+0x346>
 8001cec:	2300      	movs	r3, #0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 810b 	bne.w	8001f0a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d00f      	beq.n	8001d1c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	400a      	ands	r2, r1
 8001d16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001d1a:	e049      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b09      	cmp	r3, #9
 8001d3c:	d91c      	bls.n	8001d78 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6999      	ldr	r1, [r3, #24]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3b1b      	subs	r3, #27
 8001d50:	2207      	movs	r2, #7
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	4019      	ands	r1, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6898      	ldr	r0, [r3, #8]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	3b1b      	subs	r3, #27
 8001d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	619a      	str	r2, [r3, #24]
 8001d76:	e01b      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6959      	ldr	r1, [r3, #20]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4019      	ands	r1, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6898      	ldr	r0, [r3, #8]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	fa00 f203 	lsl.w	r2, r0, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db0:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <HAL_ADC_ConfigChannel+0x488>)
 8001db2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b10      	cmp	r3, #16
 8001dba:	d105      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d015      	beq.n	8001df4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001dcc:	2b11      	cmp	r3, #17
 8001dce:	d105      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00b      	beq.n	8001df4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001de0:	2b12      	cmp	r3, #18
 8001de2:	f040 8092 	bne.w	8001f0a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 808b 	bne.w	8001f0a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dfc:	d102      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x45c>
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_ADC_ConfigChannel+0x48c>)
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e002      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x462>
 8001e04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e08:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d10f      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x490>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d108      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x490>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e007      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x492>
 8001e2a:	bf00      	nop
 8001e2c:	83fff000 	.word	0x83fff000
 8001e30:	50000300 	.word	0x50000300
 8001e34:	50000100 	.word	0x50000100
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d150      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d010      	beq.n	8001e66 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d107      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x4b8>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x4b8>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x4ba>
 8001e60:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d13c      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b10      	cmp	r3, #16
 8001e6c:	d11d      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x502>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e76:	d118      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e82:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <HAL_ADC_ConfigChannel+0x57c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a27      	ldr	r2, [pc, #156]	; (8001f28 <HAL_ADC_ConfigChannel+0x580>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0c9a      	lsrs	r2, r3, #18
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e9a:	e002      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f9      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ea8:	e02e      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b11      	cmp	r3, #17
 8001eb0:	d10b      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x522>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eba:	d106      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ec8:	e01e      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b12      	cmp	r3, #18
 8001ed0:	d11a      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001edc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ede:	e013      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f043 0220 	orr.w	r2, r3, #32
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ef2:	e00a      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f043 0220 	orr.w	r2, r3, #32
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f06:	e000      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f08:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	376c      	adds	r7, #108	; 0x6c
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000000 	.word	0x20000000
 8001f28:	431bde83 	.word	0x431bde83

08001f2c <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b09d      	sub	sp, #116	; 0x74
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADCEx_InjectedConfigChannel+0x26>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e2ff      	b.n	8002552 <HAL_ADCEx_InjectedConfigChannel+0x626>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d132      	bne.n	8001fd0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d124      	bne.n	8001fbc <HAL_ADCEx_InjectedConfigChannel+0x90>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d00c      	beq.n	8001f94 <HAL_ADCEx_InjectedConfigChannel+0x68>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	021a      	lsls	r2, r3, #8
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f92:	e005      	b.n	8001fa0 <HAL_ADCEx_InjectedConfigChannel+0x74>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fa6:	4b9c      	ldr	r3, [pc, #624]	; (8002218 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001fb8:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001fba:	e060      	b.n	800207e <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f043 0220 	orr.w	r2, r3, #32
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001fce:	e056      	b.n	800207e <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d121      	bne.n	800201c <HAL_ADCEx_InjectedConfigChannel+0xf0>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d00e      	beq.n	800200c <HAL_ADCEx_InjectedConfigChannel+0xe0>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	1e59      	subs	r1, r3, #1
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4319      	orrs	r1, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	430b      	orrs	r3, r1
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	649a      	str	r2, [r3, #72]	; 0x48
 800200a:	e007      	b.n	800201c <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	3b01      	subs	r3, #1
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	3302      	adds	r3, #2
 800202e:	221f      	movs	r2, #31
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	4019      	ands	r1, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	3302      	adds	r3, #2
 800204a:	fa00 f303 	lsl.w	r3, r0, r3
 800204e:	ea41 0203 	orr.w	r2, r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	1e5a      	subs	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <HAL_ADCEx_InjectedConfigChannel+0x152>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800206e:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8002070:	4013      	ands	r3, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	430b      	orrs	r3, r1
 800207c:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d12d      	bne.n	80020e8 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	7f5b      	ldrb	r3, [r3, #29]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d110      	bne.n	80020b6 <HAL_ADCEx_InjectedConfigChannel+0x18a>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	7f9b      	ldrb	r3, [r3, #30]
 80020a2:	055a      	lsls	r2, r3, #21
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	7f1b      	ldrb	r3, [r3, #28]
 80020a8:	051b      	lsls	r3, r3, #20
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	e018      	b.n	80020e8 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	7f9b      	ldrb	r3, [r3, #30]
 80020c4:	055a      	lsls	r2, r3, #21
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	7f1b      	ldrb	r3, [r3, #28]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d108      	bne.n	80020e8 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f043 0220 	orr.w	r2, r3, #32
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 8110 	bne.w	8002318 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d10c      	bne.n	800211a <HAL_ADCEx_InjectedConfigChannel+0x1ee>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	7f5b      	ldrb	r3, [r3, #29]
 800210e:	065a      	lsls	r2, r3, #25
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	e014      	b.n	8002144 <HAL_ADCEx_InjectedConfigChannel+0x218>
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002128:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	7f5b      	ldrb	r3, [r3, #29]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d108      	bne.n	8002144 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f043 0220 	orr.w	r2, r3, #32
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b09      	cmp	r3, #9
 800214a:	d91c      	bls.n	8002186 <HAL_ADCEx_InjectedConfigChannel+0x25a>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6999      	ldr	r1, [r3, #24]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	3b1e      	subs	r3, #30
 800215e:	2207      	movs	r2, #7
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	4019      	ands	r1, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6898      	ldr	r0, [r3, #8]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	3b1e      	subs	r3, #30
 8002178:	fa00 f203 	lsl.w	r2, r0, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	619a      	str	r2, [r3, #24]
 8002184:	e019      	b.n	80021ba <HAL_ADCEx_InjectedConfigChannel+0x28e>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6959      	ldr	r1, [r3, #20]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	2207      	movs	r2, #7
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	4019      	ands	r1, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6898      	ldr	r0, [r3, #8]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	fa00 f203 	lsl.w	r2, r0, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d854      	bhi.n	8002286 <HAL_ADCEx_InjectedConfigChannel+0x35a>
 80021dc:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <HAL_ADCEx_InjectedConfigChannel+0x2b8>)
 80021de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e2:	bf00      	nop
 80021e4:	080021f5 	.word	0x080021f5
 80021e8:	08002221 	.word	0x08002221
 80021ec:	08002243 	.word	0x08002243
 80021f0:	08002265 	.word	0x08002265
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	0691      	lsls	r1, r2, #26
 8002204:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002206:	430a      	orrs	r2, r1
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002212:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002214:	e083      	b.n	800231e <HAL_ADCEx_InjectedConfigChannel+0x3f2>
 8002216:	bf00      	nop
 8002218:	82082000 	.word	0x82082000
 800221c:	83fff000 	.word	0x83fff000
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002226:	4b9f      	ldr	r3, [pc, #636]	; (80024a4 <HAL_ADCEx_InjectedConfigChannel+0x578>)
 8002228:	4013      	ands	r3, r2
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	0691      	lsls	r1, r2, #26
 8002230:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002232:	430a      	orrs	r2, r1
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800223e:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002240:	e06d      	b.n	800231e <HAL_ADCEx_InjectedConfigChannel+0x3f2>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002248:	4b96      	ldr	r3, [pc, #600]	; (80024a4 <HAL_ADCEx_InjectedConfigChannel+0x578>)
 800224a:	4013      	ands	r3, r2
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	0691      	lsls	r1, r2, #26
 8002252:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002254:	430a      	orrs	r2, r1
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002260:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002262:	e05c      	b.n	800231e <HAL_ADCEx_InjectedConfigChannel+0x3f2>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800226a:	4b8e      	ldr	r3, [pc, #568]	; (80024a4 <HAL_ADCEx_InjectedConfigChannel+0x578>)
 800226c:	4013      	ands	r3, r2
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	0691      	lsls	r1, r2, #26
 8002274:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002276:	430a      	orrs	r2, r1
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002282:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002284:	e04b      	b.n	800231e <HAL_ADCEx_InjectedConfigChannel+0x3f2>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	069b      	lsls	r3, r3, #26
 8002296:	429a      	cmp	r2, r3
 8002298:	d107      	bne.n	80022aa <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022a8:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	069b      	lsls	r3, r3, #26
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d107      	bne.n	80022ce <HAL_ADCEx_InjectedConfigChannel+0x3a2>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022cc:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	069b      	lsls	r3, r3, #26
 80022de:	429a      	cmp	r2, r3
 80022e0:	d107      	bne.n	80022f2 <HAL_ADCEx_InjectedConfigChannel+0x3c6>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022f0:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	069b      	lsls	r3, r3, #26
 8002302:	429a      	cmp	r2, r3
 8002304:	d10a      	bne.n	800231c <HAL_ADCEx_InjectedConfigChannel+0x3f0>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002314:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002316:	e001      	b.n	800231c <HAL_ADCEx_InjectedConfigChannel+0x3f0>
    }
    
  }
 8002318:	bf00      	nop
 800231a:	e000      	b.n	800231e <HAL_ADCEx_InjectedConfigChannel+0x3f2>
      break;
 800231c:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d108      	bne.n	800233e <HAL_ADCEx_InjectedConfigChannel+0x412>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_ADCEx_InjectedConfigChannel+0x412>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_ADCEx_InjectedConfigChannel+0x414>
 800233e:	2300      	movs	r3, #0
 8002340:	2b00      	cmp	r3, #0
 8002342:	f040 8100 	bne.w	8002546 <HAL_ADCEx_InjectedConfigChannel+0x61a>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d00f      	beq.n	800236e <HAL_ADCEx_InjectedConfigChannel+0x442>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2201      	movs	r2, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43da      	mvns	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	400a      	ands	r2, r1
 8002368:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800236c:	e049      	b.n	8002402 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	409a      	lsls	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b09      	cmp	r3, #9
 800238e:	d91c      	bls.n	80023ca <HAL_ADCEx_InjectedConfigChannel+0x49e>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6999      	ldr	r1, [r3, #24]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4613      	mov	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4413      	add	r3, r2
 80023a0:	3b1b      	subs	r3, #27
 80023a2:	2207      	movs	r2, #7
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	4019      	ands	r1, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6898      	ldr	r0, [r3, #8]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	3b1b      	subs	r3, #27
 80023bc:	fa00 f203 	lsl.w	r2, r0, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	619a      	str	r2, [r3, #24]
 80023c8:	e01b      	b.n	8002402 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6959      	ldr	r1, [r3, #20]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	4613      	mov	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	2207      	movs	r2, #7
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4019      	ands	r1, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6898      	ldr	r0, [r3, #8]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	fa00 f203 	lsl.w	r2, r0, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002402:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <HAL_ADCEx_InjectedConfigChannel+0x57c>)
 8002404:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b10      	cmp	r3, #16
 800240c:	d105      	bne.n	800241a <HAL_ADCEx_InjectedConfigChannel+0x4ee>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800240e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002416:	2b00      	cmp	r3, #0
 8002418:	d015      	beq.n	8002446 <HAL_ADCEx_InjectedConfigChannel+0x51a>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800241e:	2b11      	cmp	r3, #17
 8002420:	d105      	bne.n	800242e <HAL_ADCEx_InjectedConfigChannel+0x502>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <HAL_ADCEx_InjectedConfigChannel+0x51a>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002432:	2b12      	cmp	r3, #18
 8002434:	f040 8087 	bne.w	8002546 <HAL_ADCEx_InjectedConfigChannel+0x61a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002438:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002440:	2b00      	cmp	r3, #0
 8002442:	f040 8080 	bne.w	8002546 <HAL_ADCEx_InjectedConfigChannel+0x61a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800244e:	d102      	bne.n	8002456 <HAL_ADCEx_InjectedConfigChannel+0x52a>
 8002450:	4b16      	ldr	r3, [pc, #88]	; (80024ac <HAL_ADCEx_InjectedConfigChannel+0x580>)
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e002      	b.n	800245c <HAL_ADCEx_InjectedConfigChannel+0x530>
 8002456:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800245a:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d108      	bne.n	800247c <HAL_ADCEx_InjectedConfigChannel+0x550>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_ADCEx_InjectedConfigChannel+0x550>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_ADCEx_InjectedConfigChannel+0x552>
 800247c:	2300      	movs	r3, #0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d156      	bne.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x604>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002482:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002484:	2b00      	cmp	r3, #0
 8002486:	d016      	beq.n	80024b6 <HAL_ADCEx_InjectedConfigChannel+0x58a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d10d      	bne.n	80024b0 <HAL_ADCEx_InjectedConfigChannel+0x584>
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d107      	bne.n	80024b0 <HAL_ADCEx_InjectedConfigChannel+0x584>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e006      	b.n	80024b2 <HAL_ADCEx_InjectedConfigChannel+0x586>
 80024a4:	83fff000 	.word	0x83fff000
 80024a8:	50000300 	.word	0x50000300
 80024ac:	50000100 	.word	0x50000100
 80024b0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d13c      	bne.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x604>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b10      	cmp	r3, #16
 80024bc:	d11d      	bne.n	80024fa <HAL_ADCEx_InjectedConfigChannel+0x5ce>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024c6:	d118      	bne.n	80024fa <HAL_ADCEx_InjectedConfigChannel+0x5ce>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80024c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024d2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024d4:	4b22      	ldr	r3, [pc, #136]	; (8002560 <HAL_ADCEx_InjectedConfigChannel+0x634>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a22      	ldr	r2, [pc, #136]	; (8002564 <HAL_ADCEx_InjectedConfigChannel+0x638>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0c9a      	lsrs	r2, r3, #18
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80024ea:	e002      	b.n	80024f2 <HAL_ADCEx_InjectedConfigChannel+0x5c6>
          {
            wait_loop_index--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f9      	bne.n	80024ec <HAL_ADCEx_InjectedConfigChannel+0x5c0>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024f8:	e024      	b.n	8002544 <HAL_ADCEx_InjectedConfigChannel+0x618>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b11      	cmp	r3, #17
 8002500:	d10b      	bne.n	800251a <HAL_ADCEx_InjectedConfigChannel+0x5ee>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800250a:	d106      	bne.n	800251a <HAL_ADCEx_InjectedConfigChannel+0x5ee>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800250c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002516:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002518:	e014      	b.n	8002544 <HAL_ADCEx_InjectedConfigChannel+0x618>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b12      	cmp	r3, #18
 8002520:	d110      	bne.n	8002544 <HAL_ADCEx_InjectedConfigChannel+0x618>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800252a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800252c:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800252e:	e009      	b.n	8002544 <HAL_ADCEx_InjectedConfigChannel+0x618>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002542:	e000      	b.n	8002546 <HAL_ADCEx_InjectedConfigChannel+0x61a>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002544:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800254e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8002552:	4618      	mov	r0, r3
 8002554:	3774      	adds	r7, #116	; 0x74
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000000 	.word	0x20000000
 8002564:	431bde83 	.word	0x431bde83

08002568 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002568:	b480      	push	{r7}
 800256a:	b099      	sub	sp, #100	; 0x64
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002580:	d102      	bne.n	8002588 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002582:	4b5a      	ldr	r3, [pc, #360]	; (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	e002      	b.n	800258e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002588:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800258c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0a2      	b.n	80026de <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e09b      	b.n	80026de <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d17f      	bne.n	80026bc <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d179      	bne.n	80026bc <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025c8:	4b49      	ldr	r3, [pc, #292]	; (80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80025ca:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d040      	beq.n	8002656 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80025d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025e6:	035b      	lsls	r3, r3, #13
 80025e8:	430b      	orrs	r3, r1
 80025ea:	431a      	orrs	r2, r3
 80025ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ee:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d108      	bne.n	8002610 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002610:	2300      	movs	r3, #0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d15c      	bne.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d107      	bne.n	8002632 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002632:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002634:	2b00      	cmp	r3, #0
 8002636:	d14b      	bne.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002638:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002640:	f023 030f 	bic.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	6811      	ldr	r1, [r2, #0]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	6892      	ldr	r2, [r2, #8]
 800264c:	430a      	orrs	r2, r1
 800264e:	431a      	orrs	r2, r3
 8002650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002652:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002654:	e03c      	b.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800265e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002660:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b01      	cmp	r3, #1
 800266e:	d108      	bne.n	8002682 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002682:	2300      	movs	r3, #0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d123      	bne.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d107      	bne.n	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80026a4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d112      	bne.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80026aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026b2:	f023 030f 	bic.w	r3, r3, #15
 80026b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026b8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026ba:	e009      	b.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80026ce:	e000      	b.n	80026d2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026d0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80026da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80026de:	4618      	mov	r0, r3
 80026e0:	3764      	adds	r7, #100	; 0x64
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	50000100 	.word	0x50000100
 80026f0:	50000300 	.word	0x50000300

080026f4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d108      	bne.n	8002720 <ADC_Disable+0x2c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <ADC_Disable+0x2c>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <ADC_Disable+0x2e>
 8002720:	2300      	movs	r3, #0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d040      	beq.n	80027a8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 030d 	and.w	r3, r3, #13
 8002730:	2b01      	cmp	r3, #1
 8002732:	d10f      	bne.n	8002754 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0202 	orr.w	r2, r2, #2
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2203      	movs	r2, #3
 800274a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800274c:	f7fe fd28 	bl	80011a0 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002752:	e022      	b.n	800279a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f043 0210 	orr.w	r2, r3, #16
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	f043 0201 	orr.w	r2, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e01c      	b.n	80027aa <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002770:	f7fe fd16 	bl	80011a0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d90d      	bls.n	800279a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f043 0210 	orr.w	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e007      	b.n	80027aa <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d0e3      	beq.n	8002770 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0ed      	b.n	80029a0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7fd fef9 	bl	80005c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0202 	bic.w	r2, r2, #2
 80027e4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027e6:	f7fe fcdb 	bl	80011a0 <HAL_GetTick>
 80027ea:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027ec:	e012      	b.n	8002814 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027ee:	f7fe fcd7 	bl	80011a0 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b0a      	cmp	r3, #10
 80027fa:	d90b      	bls.n	8002814 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2205      	movs	r2, #5
 800280c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0c5      	b.n	80029a0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1e5      	bne.n	80027ee <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0201 	orr.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002832:	f7fe fcb5 	bl	80011a0 <HAL_GetTick>
 8002836:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002838:	e012      	b.n	8002860 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800283a:	f7fe fcb1 	bl	80011a0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b0a      	cmp	r3, #10
 8002846:	d90b      	bls.n	8002860 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2205      	movs	r2, #5
 8002858:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e09f      	b.n	80029a0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0e5      	beq.n	800283a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7e1b      	ldrb	r3, [r3, #24]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d108      	bne.n	8002888 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	e007      	b.n	8002898 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002896:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7e5b      	ldrb	r3, [r3, #25]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d108      	bne.n	80028b2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	e007      	b.n	80028c2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7e9b      	ldrb	r3, [r3, #26]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d108      	bne.n	80028dc <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0220 	orr.w	r2, r2, #32
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e007      	b.n	80028ec <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0220 	bic.w	r2, r2, #32
 80028ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7edb      	ldrb	r3, [r3, #27]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d108      	bne.n	8002906 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0210 	bic.w	r2, r2, #16
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e007      	b.n	8002916 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0210 	orr.w	r2, r2, #16
 8002914:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	7f1b      	ldrb	r3, [r3, #28]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d108      	bne.n	8002930 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0208 	orr.w	r2, r2, #8
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e007      	b.n	8002940 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0208 	bic.w	r2, r2, #8
 800293e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7f5b      	ldrb	r3, [r3, #29]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d108      	bne.n	800295a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0204 	orr.w	r2, r2, #4
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e007      	b.n	800296a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0204 	bic.w	r2, r2, #4
 8002968:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	ea42 0103 	orr.w	r1, r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	1e5a      	subs	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d07c      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d023      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2201      	movs	r2, #1
 80029fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f97d 	bl	8002d0a <HAL_CAN_TxMailbox0CompleteCallback>
 8002a10:	e016      	b.n	8002a40 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
 8002a24:	e00c      	b.n	8002a40 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d004      	beq.n	8002a3a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
 8002a38:	e002      	b.n	8002a40 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f983 	bl	8002d46 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d024      	beq.n	8002a94 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f95d 	bl	8002d1e <HAL_CAN_TxMailbox1CompleteCallback>
 8002a64:	e016      	b.n	8002a94 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d004      	beq.n	8002a7a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
 8002a78:	e00c      	b.n	8002a94 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8c:	e002      	b.n	8002a94 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f963 	bl	8002d5a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d024      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002aa6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f93d 	bl	8002d32 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ab8:	e016      	b.n	8002ae8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d004      	beq.n	8002ace <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
 8002acc:	e00c      	b.n	8002ae8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae0:	e002      	b.n	8002ae8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f943 	bl	8002d6e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00c      	beq.n	8002b0c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2210      	movs	r2, #16
 8002b0a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2208      	movs	r2, #8
 8002b26:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f934 	bl	8002d96 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d009      	beq.n	8002b4c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f91b 	bl	8002d82 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00c      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d006      	beq.n	8002b92 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2208      	movs	r2, #8
 8002b8a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f916 	bl	8002dbe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d009      	beq.n	8002bb0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f8fd 	bl	8002daa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d006      	beq.n	8002bd2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2210      	movs	r2, #16
 8002bca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f900 	bl	8002dd2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00b      	beq.n	8002bf4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d006      	beq.n	8002bf4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2208      	movs	r2, #8
 8002bec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8f9 	bl	8002de6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d075      	beq.n	8002cea <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d06c      	beq.n	8002ce2 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	f043 0302 	orr.w	r3, r3, #2
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	f043 0304 	orr.w	r3, r3, #4
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d03d      	beq.n	8002ce2 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d038      	beq.n	8002ce2 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c76:	2b30      	cmp	r3, #48	; 0x30
 8002c78:	d017      	beq.n	8002caa <HAL_CAN_IRQHandler+0x302>
 8002c7a:	2b30      	cmp	r3, #48	; 0x30
 8002c7c:	d804      	bhi.n	8002c88 <HAL_CAN_IRQHandler+0x2e0>
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d009      	beq.n	8002c96 <HAL_CAN_IRQHandler+0x2ee>
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d00c      	beq.n	8002ca0 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c86:	e024      	b.n	8002cd2 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002c88:	2b50      	cmp	r3, #80	; 0x50
 8002c8a:	d018      	beq.n	8002cbe <HAL_CAN_IRQHandler+0x316>
 8002c8c:	2b60      	cmp	r3, #96	; 0x60
 8002c8e:	d01b      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x320>
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d00f      	beq.n	8002cb4 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002c94:	e01d      	b.n	8002cd2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	f043 0308 	orr.w	r3, r3, #8
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c9e:	e018      	b.n	8002cd2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	f043 0310 	orr.w	r3, r3, #16
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ca8:	e013      	b.n	8002cd2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	f043 0320 	orr.w	r3, r3, #32
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cb2:	e00e      	b.n	8002cd2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cbc:	e009      	b.n	8002cd2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cc6:	e004      	b.n	8002cd2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cd0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699a      	ldr	r2, [r3, #24]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ce0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f87c 	bl	8002dfa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d02:	bf00      	nop
 8002d04:	3728      	adds	r7, #40	; 0x28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e42:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <__NVIC_GetPriorityGrouping+0x18>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	f003 0307 	and.w	r3, r3, #7
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db0b      	blt.n	8002e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	4907      	ldr	r1, [pc, #28]	; (8002eac <__NVIC_EnableIRQ+0x38>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2001      	movs	r0, #1
 8002e96:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db0a      	blt.n	8002eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	490c      	ldr	r1, [pc, #48]	; (8002efc <__NVIC_SetPriority+0x4c>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed8:	e00a      	b.n	8002ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4908      	ldr	r1, [pc, #32]	; (8002f00 <__NVIC_SetPriority+0x50>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	0112      	lsls	r2, r2, #4
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	440b      	add	r3, r1
 8002eee:	761a      	strb	r2, [r3, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000e100 	.word	0xe000e100
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f1c3 0307 	rsb	r3, r3, #7
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	bf28      	it	cs
 8002f22:	2304      	movcs	r3, #4
 8002f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d902      	bls.n	8002f34 <NVIC_EncodePriority+0x30>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3b03      	subs	r3, #3
 8002f32:	e000      	b.n	8002f36 <NVIC_EncodePriority+0x32>
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	401a      	ands	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43d9      	mvns	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	4313      	orrs	r3, r2
         );
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	; 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff4c 	bl	8002e10 <__NVIC_SetPriorityGrouping>
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f92:	f7ff ff61 	bl	8002e58 <__NVIC_GetPriorityGrouping>
 8002f96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	6978      	ldr	r0, [r7, #20]
 8002f9e:	f7ff ffb1 	bl	8002f04 <NVIC_EncodePriority>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ff80 	bl	8002eb0 <__NVIC_SetPriority>
}
 8002fb0:	bf00      	nop
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff54 	bl	8002e74 <__NVIC_EnableIRQ>
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e037      	b.n	800305a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003000:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003004:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800300e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800301a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f8f1 	bl	8003224 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}  
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003074:	2b02      	cmp	r3, #2
 8003076:	d005      	beq.n	8003084 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2204      	movs	r2, #4
 800307c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	73fb      	strb	r3, [r7, #15]
 8003082:	e027      	b.n	80030d4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 020e 	bic.w	r2, r2, #14
 8003092:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	2101      	movs	r1, #1
 80030ae:	fa01 f202 	lsl.w	r2, r1, r2
 80030b2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4798      	blx	r3
    } 
  }
  return status;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	2204      	movs	r2, #4
 80030fc:	409a      	lsls	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d024      	beq.n	8003150 <HAL_DMA_IRQHandler+0x72>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01f      	beq.n	8003150 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	d107      	bne.n	800312e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0204 	bic.w	r2, r2, #4
 800312c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	2104      	movs	r1, #4
 8003138:	fa01 f202 	lsl.w	r2, r1, r2
 800313c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d06a      	beq.n	800321c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800314e:	e065      	b.n	800321c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	2202      	movs	r2, #2
 8003156:	409a      	lsls	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d02c      	beq.n	80031ba <HAL_DMA_IRQHandler+0xdc>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d027      	beq.n	80031ba <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 020a 	bic.w	r2, r2, #10
 8003186:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003198:	2102      	movs	r1, #2
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d035      	beq.n	800321c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80031b8:	e030      	b.n	800321c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	2208      	movs	r2, #8
 80031c0:	409a      	lsls	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d028      	beq.n	800321c <HAL_DMA_IRQHandler+0x13e>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d023      	beq.n	800321c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 020e 	bic.w	r2, r2, #14
 80031e2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ec:	2101      	movs	r1, #1
 80031ee:	fa01 f202 	lsl.w	r2, r1, r2
 80031f2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	2b00      	cmp	r3, #0
 8003210:	d004      	beq.n	800321c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	4798      	blx	r3
    }
  }
}  
 800321a:	e7ff      	b.n	800321c <HAL_DMA_IRQHandler+0x13e>
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <DMA_CalcBaseAndBitshift+0x34>)
 8003234:	4413      	add	r3, r2
 8003236:	4a09      	ldr	r2, [pc, #36]	; (800325c <DMA_CalcBaseAndBitshift+0x38>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	009a      	lsls	r2, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a06      	ldr	r2, [pc, #24]	; (8003260 <DMA_CalcBaseAndBitshift+0x3c>)
 8003248:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	bffdfff8 	.word	0xbffdfff8
 800325c:	cccccccd 	.word	0xcccccccd
 8003260:	40020000 	.word	0x40020000

08003264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003272:	e14e      	b.n	8003512 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	2101      	movs	r1, #1
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	4013      	ands	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 8140 	beq.w	800350c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x38>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b12      	cmp	r3, #18
 800329a:	d123      	bne.n	80032e4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	08da      	lsrs	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3208      	adds	r2, #8
 80032a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	220f      	movs	r2, #15
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	08da      	lsrs	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3208      	adds	r2, #8
 80032de:	6939      	ldr	r1, [r7, #16]
 80032e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d00b      	beq.n	8003338 <HAL_GPIO_Init+0xd4>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d007      	beq.n	8003338 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800332c:	2b11      	cmp	r3, #17
 800332e:	d003      	beq.n	8003338 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b12      	cmp	r3, #18
 8003336:	d130      	bne.n	800339a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	2203      	movs	r2, #3
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800336e:	2201      	movs	r2, #1
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	091b      	lsrs	r3, r3, #4
 8003384:	f003 0201 	and.w	r2, r3, #1
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	2203      	movs	r2, #3
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 809a 	beq.w	800350c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d8:	4b55      	ldr	r3, [pc, #340]	; (8003530 <HAL_GPIO_Init+0x2cc>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	4a54      	ldr	r2, [pc, #336]	; (8003530 <HAL_GPIO_Init+0x2cc>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6193      	str	r3, [r2, #24]
 80033e4:	4b52      	ldr	r3, [pc, #328]	; (8003530 <HAL_GPIO_Init+0x2cc>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033f0:	4a50      	ldr	r2, [pc, #320]	; (8003534 <HAL_GPIO_Init+0x2d0>)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	220f      	movs	r2, #15
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800341a:	d013      	beq.n	8003444 <HAL_GPIO_Init+0x1e0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a46      	ldr	r2, [pc, #280]	; (8003538 <HAL_GPIO_Init+0x2d4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00d      	beq.n	8003440 <HAL_GPIO_Init+0x1dc>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a45      	ldr	r2, [pc, #276]	; (800353c <HAL_GPIO_Init+0x2d8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d007      	beq.n	800343c <HAL_GPIO_Init+0x1d8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a44      	ldr	r2, [pc, #272]	; (8003540 <HAL_GPIO_Init+0x2dc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d101      	bne.n	8003438 <HAL_GPIO_Init+0x1d4>
 8003434:	2303      	movs	r3, #3
 8003436:	e006      	b.n	8003446 <HAL_GPIO_Init+0x1e2>
 8003438:	2305      	movs	r3, #5
 800343a:	e004      	b.n	8003446 <HAL_GPIO_Init+0x1e2>
 800343c:	2302      	movs	r3, #2
 800343e:	e002      	b.n	8003446 <HAL_GPIO_Init+0x1e2>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_GPIO_Init+0x1e2>
 8003444:	2300      	movs	r3, #0
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	f002 0203 	and.w	r2, r2, #3
 800344c:	0092      	lsls	r2, r2, #2
 800344e:	4093      	lsls	r3, r2
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003456:	4937      	ldr	r1, [pc, #220]	; (8003534 <HAL_GPIO_Init+0x2d0>)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	3302      	adds	r3, #2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003464:	4b37      	ldr	r3, [pc, #220]	; (8003544 <HAL_GPIO_Init+0x2e0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	43db      	mvns	r3, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4013      	ands	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003488:	4a2e      	ldr	r2, [pc, #184]	; (8003544 <HAL_GPIO_Init+0x2e0>)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800348e:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_GPIO_Init+0x2e0>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034b2:	4a24      	ldr	r2, [pc, #144]	; (8003544 <HAL_GPIO_Init+0x2e0>)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034b8:	4b22      	ldr	r3, [pc, #136]	; (8003544 <HAL_GPIO_Init+0x2e0>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4013      	ands	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034dc:	4a19      	ldr	r2, [pc, #100]	; (8003544 <HAL_GPIO_Init+0x2e0>)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034e2:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_GPIO_Init+0x2e0>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4013      	ands	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003506:	4a0f      	ldr	r2, [pc, #60]	; (8003544 <HAL_GPIO_Init+0x2e0>)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	3301      	adds	r3, #1
 8003510:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	f47f aea9 	bne.w	8003274 <HAL_GPIO_Init+0x10>
  }
}
 8003522:	bf00      	nop
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	40010000 	.word	0x40010000
 8003538:	48000400 	.word	0x48000400
 800353c:	48000800 	.word	0x48000800
 8003540:	48000c00 	.word	0x48000c00
 8003544:	40010400 	.word	0x40010400

08003548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
 8003554:	4613      	mov	r3, r2
 8003556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003558:	787b      	ldrb	r3, [r7, #1]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800355e:	887a      	ldrh	r2, [r7, #2]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003564:	e002      	b.n	800356c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800357e:	af00      	add	r7, sp, #0
 8003580:	1d3b      	adds	r3, r7, #4
 8003582:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003584:	1d3b      	adds	r3, r7, #4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d102      	bne.n	8003592 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	f000 bef4 	b.w	800437a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	1d3b      	adds	r3, r7, #4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 816a 	beq.w	8003876 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80035a2:	4bb3      	ldr	r3, [pc, #716]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d00c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035ae:	4bb0      	ldr	r3, [pc, #704]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d159      	bne.n	800366e <HAL_RCC_OscConfig+0xf6>
 80035ba:	4bad      	ldr	r3, [pc, #692]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c6:	d152      	bne.n	800366e <HAL_RCC_OscConfig+0xf6>
 80035c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035cc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	fab3 f383 	clz	r3, r3
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d102      	bne.n	80035fa <HAL_RCC_OscConfig+0x82>
 80035f4:	4b9e      	ldr	r3, [pc, #632]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	e015      	b.n	8003626 <HAL_RCC_OscConfig+0xae>
 80035fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035fe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800360e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003612:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003616:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003622:	4b93      	ldr	r3, [pc, #588]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800362a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800362e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003632:	fa92 f2a2 	rbit	r2, r2
 8003636:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800363a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800363e:	fab2 f282 	clz	r2, r2
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	f042 0220 	orr.w	r2, r2, #32
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	f002 021f 	and.w	r2, r2, #31
 800364e:	2101      	movs	r1, #1
 8003650:	fa01 f202 	lsl.w	r2, r1, r2
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 810c 	beq.w	8003874 <HAL_RCC_OscConfig+0x2fc>
 800365c:	1d3b      	adds	r3, r7, #4
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 8106 	bne.w	8003874 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	f000 be86 	b.w	800437a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003678:	d106      	bne.n	8003688 <HAL_RCC_OscConfig+0x110>
 800367a:	4b7d      	ldr	r3, [pc, #500]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a7c      	ldr	r2, [pc, #496]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	e030      	b.n	80036ea <HAL_RCC_OscConfig+0x172>
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x134>
 8003692:	4b77      	ldr	r3, [pc, #476]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a76      	ldr	r2, [pc, #472]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 8003698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b74      	ldr	r3, [pc, #464]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a73      	ldr	r2, [pc, #460]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80036a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e01e      	b.n	80036ea <HAL_RCC_OscConfig+0x172>
 80036ac:	1d3b      	adds	r3, r7, #4
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b6:	d10c      	bne.n	80036d2 <HAL_RCC_OscConfig+0x15a>
 80036b8:	4b6d      	ldr	r3, [pc, #436]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a6c      	ldr	r2, [pc, #432]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80036be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b6a      	ldr	r3, [pc, #424]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a69      	ldr	r2, [pc, #420]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80036ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	e00b      	b.n	80036ea <HAL_RCC_OscConfig+0x172>
 80036d2:	4b67      	ldr	r3, [pc, #412]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a66      	ldr	r2, [pc, #408]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80036d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	4b64      	ldr	r3, [pc, #400]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a63      	ldr	r2, [pc, #396]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80036e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036ea:	4b61      	ldr	r3, [pc, #388]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	f023 020f 	bic.w	r2, r3, #15
 80036f2:	1d3b      	adds	r3, r7, #4
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	495d      	ldr	r1, [pc, #372]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036fe:	1d3b      	adds	r3, r7, #4
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d059      	beq.n	80037bc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fd fd4a 	bl	80011a0 <HAL_GetTick>
 800370c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003710:	e00a      	b.n	8003728 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003712:	f7fd fd45 	bl	80011a0 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d902      	bls.n	8003728 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	f000 be29 	b.w	800437a <HAL_RCC_OscConfig+0xe02>
 8003728:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800372c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800373c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d102      	bne.n	800375a <HAL_RCC_OscConfig+0x1e2>
 8003754:	4b46      	ldr	r3, [pc, #280]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	e015      	b.n	8003786 <HAL_RCC_OscConfig+0x20e>
 800375a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800375e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800376e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003772:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003776:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003782:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800378a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800378e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003792:	fa92 f2a2 	rbit	r2, r2
 8003796:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800379a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800379e:	fab2 f282 	clz	r2, r2
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	f042 0220 	orr.w	r2, r2, #32
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	f002 021f 	and.w	r2, r2, #31
 80037ae:	2101      	movs	r1, #1
 80037b0:	fa01 f202 	lsl.w	r2, r1, r2
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0ab      	beq.n	8003712 <HAL_RCC_OscConfig+0x19a>
 80037ba:	e05c      	b.n	8003876 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fd fcf0 	bl	80011a0 <HAL_GetTick>
 80037c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c4:	e00a      	b.n	80037dc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c6:	f7fd fceb 	bl	80011a0 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	; 0x64
 80037d4:	d902      	bls.n	80037dc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	f000 bdcf 	b.w	800437a <HAL_RCC_OscConfig+0xe02>
 80037dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80037f0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d102      	bne.n	800380e <HAL_RCC_OscConfig+0x296>
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	e015      	b.n	800383a <HAL_RCC_OscConfig+0x2c2>
 800380e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003812:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800381a:	fa93 f3a3 	rbit	r3, r3
 800381e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003826:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800382a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800382e:	fa93 f3a3 	rbit	r3, r3
 8003832:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003836:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <HAL_RCC_OscConfig+0x2f8>)
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800383e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003842:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003846:	fa92 f2a2 	rbit	r2, r2
 800384a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800384e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003852:	fab2 f282 	clz	r2, r2
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f042 0220 	orr.w	r2, r2, #32
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	f002 021f 	and.w	r2, r2, #31
 8003862:	2101      	movs	r1, #1
 8003864:	fa01 f202 	lsl.w	r2, r1, r2
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1ab      	bne.n	80037c6 <HAL_RCC_OscConfig+0x24e>
 800386e:	e002      	b.n	8003876 <HAL_RCC_OscConfig+0x2fe>
 8003870:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003876:	1d3b      	adds	r3, r7, #4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 816f 	beq.w	8003b64 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003886:	4bd0      	ldr	r3, [pc, #832]	; (8003bc8 <HAL_RCC_OscConfig+0x650>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00b      	beq.n	80038aa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003892:	4bcd      	ldr	r3, [pc, #820]	; (8003bc8 <HAL_RCC_OscConfig+0x650>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b08      	cmp	r3, #8
 800389c:	d16c      	bne.n	8003978 <HAL_RCC_OscConfig+0x400>
 800389e:	4bca      	ldr	r3, [pc, #808]	; (8003bc8 <HAL_RCC_OscConfig+0x650>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d166      	bne.n	8003978 <HAL_RCC_OscConfig+0x400>
 80038aa:	2302      	movs	r3, #2
 80038ac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80038bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c0:	fab3 f383 	clz	r3, r3
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d102      	bne.n	80038da <HAL_RCC_OscConfig+0x362>
 80038d4:	4bbc      	ldr	r3, [pc, #752]	; (8003bc8 <HAL_RCC_OscConfig+0x650>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	e013      	b.n	8003902 <HAL_RCC_OscConfig+0x38a>
 80038da:	2302      	movs	r3, #2
 80038dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80038e4:	fa93 f3a3 	rbit	r3, r3
 80038e8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80038ec:	2302      	movs	r3, #2
 80038ee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80038f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80038fe:	4bb2      	ldr	r3, [pc, #712]	; (8003bc8 <HAL_RCC_OscConfig+0x650>)
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	2202      	movs	r2, #2
 8003904:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003908:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800390c:	fa92 f2a2 	rbit	r2, r2
 8003910:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003914:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003918:	fab2 f282 	clz	r2, r2
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	f042 0220 	orr.w	r2, r2, #32
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	f002 021f 	and.w	r2, r2, #31
 8003928:	2101      	movs	r1, #1
 800392a:	fa01 f202 	lsl.w	r2, r1, r2
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <HAL_RCC_OscConfig+0x3cc>
 8003934:	1d3b      	adds	r3, r7, #4
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d002      	beq.n	8003944 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f000 bd1b 	b.w	800437a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003944:	4ba0      	ldr	r3, [pc, #640]	; (8003bc8 <HAL_RCC_OscConfig+0x650>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	21f8      	movs	r1, #248	; 0xf8
 8003954:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003958:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800395c:	fa91 f1a1 	rbit	r1, r1
 8003960:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003964:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003968:	fab1 f181 	clz	r1, r1
 800396c:	b2c9      	uxtb	r1, r1
 800396e:	408b      	lsls	r3, r1
 8003970:	4995      	ldr	r1, [pc, #596]	; (8003bc8 <HAL_RCC_OscConfig+0x650>)
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003976:	e0f5      	b.n	8003b64 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003978:	1d3b      	adds	r3, r7, #4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8085 	beq.w	8003a8e <HAL_RCC_OscConfig+0x516>
 8003984:	2301      	movs	r3, #1
 8003986:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003996:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	461a      	mov	r2, r3
 80039ac:	2301      	movs	r3, #1
 80039ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7fd fbf6 	bl	80011a0 <HAL_GetTick>
 80039b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ba:	f7fd fbf1 	bl	80011a0 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d902      	bls.n	80039d0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	f000 bcd5 	b.w	800437a <HAL_RCC_OscConfig+0xe02>
 80039d0:	2302      	movs	r3, #2
 80039d2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80039e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e6:	fab3 f383 	clz	r3, r3
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d102      	bne.n	8003a00 <HAL_RCC_OscConfig+0x488>
 80039fa:	4b73      	ldr	r3, [pc, #460]	; (8003bc8 <HAL_RCC_OscConfig+0x650>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	e013      	b.n	8003a28 <HAL_RCC_OscConfig+0x4b0>
 8003a00:	2302      	movs	r3, #2
 8003a02:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003a12:	2302      	movs	r3, #2
 8003a14:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003a18:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003a24:	4b68      	ldr	r3, [pc, #416]	; (8003bc8 <HAL_RCC_OscConfig+0x650>)
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003a2e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003a32:	fa92 f2a2 	rbit	r2, r2
 8003a36:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003a3a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003a3e:	fab2 f282 	clz	r2, r2
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	f042 0220 	orr.w	r2, r2, #32
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	f002 021f 	and.w	r2, r2, #31
 8003a4e:	2101      	movs	r1, #1
 8003a50:	fa01 f202 	lsl.w	r2, r1, r2
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0af      	beq.n	80039ba <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5a:	4b5b      	ldr	r3, [pc, #364]	; (8003bc8 <HAL_RCC_OscConfig+0x650>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	21f8      	movs	r1, #248	; 0xf8
 8003a6a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003a72:	fa91 f1a1 	rbit	r1, r1
 8003a76:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003a7a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003a7e:	fab1 f181 	clz	r1, r1
 8003a82:	b2c9      	uxtb	r1, r1
 8003a84:	408b      	lsls	r3, r1
 8003a86:	4950      	ldr	r1, [pc, #320]	; (8003bc8 <HAL_RCC_OscConfig+0x650>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]
 8003a8c:	e06a      	b.n	8003b64 <HAL_RCC_OscConfig+0x5ec>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003aa0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa4:	fab3 f383 	clz	r3, r3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003aae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fd fb71 	bl	80011a0 <HAL_GetTick>
 8003abe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac4:	f7fd fb6c 	bl	80011a0 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d902      	bls.n	8003ada <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	f000 bc50 	b.w	800437a <HAL_RCC_OscConfig+0xe02>
 8003ada:	2302      	movs	r3, #2
 8003adc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af0:	fab3 f383 	clz	r3, r3
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d102      	bne.n	8003b0a <HAL_RCC_OscConfig+0x592>
 8003b04:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <HAL_RCC_OscConfig+0x650>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	e013      	b.n	8003b32 <HAL_RCC_OscConfig+0x5ba>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b14:	fa93 f3a3 	rbit	r3, r3
 8003b18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003b22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b2e:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <HAL_RCC_OscConfig+0x650>)
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	2202      	movs	r2, #2
 8003b34:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003b38:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003b3c:	fa92 f2a2 	rbit	r2, r2
 8003b40:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003b44:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003b48:	fab2 f282 	clz	r2, r2
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	f042 0220 	orr.w	r2, r2, #32
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	f002 021f 	and.w	r2, r2, #31
 8003b58:	2101      	movs	r1, #1
 8003b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1af      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b64:	1d3b      	adds	r3, r7, #4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80da 	beq.w	8003d28 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b74:	1d3b      	adds	r3, r7, #4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d069      	beq.n	8003c52 <HAL_RCC_OscConfig+0x6da>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b88:	fa93 f3a3 	rbit	r3, r3
 8003b8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b94:	fab3 f383 	clz	r3, r3
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCC_OscConfig+0x654>)
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba8:	f7fd fafa 	bl	80011a0 <HAL_GetTick>
 8003bac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb0:	e00e      	b.n	8003bd0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb2:	f7fd faf5 	bl	80011a0 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d906      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e3d9      	b.n	800437a <HAL_RCC_OscConfig+0xe02>
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	10908120 	.word	0x10908120
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003be2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003be6:	2202      	movs	r2, #2
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	fa93 f2a3 	rbit	r2, r3
 8003bf4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003bfe:	2202      	movs	r2, #2
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	fa93 f2a3 	rbit	r2, r3
 8003c0c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003c10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c12:	4ba5      	ldr	r3, [pc, #660]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c16:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	6019      	str	r1, [r3, #0]
 8003c1e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	fa93 f1a3 	rbit	r1, r3
 8003c28:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003c2c:	6019      	str	r1, [r3, #0]
  return result;
 8003c2e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	fab3 f383 	clz	r3, r3
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	2101      	movs	r1, #1
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0b0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x63a>
 8003c50:	e06a      	b.n	8003d28 <HAL_RCC_OscConfig+0x7b0>
 8003c52:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003c56:	2201      	movs	r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	fa93 f2a3 	rbit	r2, r3
 8003c64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c68:	601a      	str	r2, [r3, #0]
  return result;
 8003c6a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c6e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c70:	fab3 f383 	clz	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b8c      	ldr	r3, [pc, #560]	; (8003eac <HAL_RCC_OscConfig+0x934>)
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2300      	movs	r3, #0
 8003c82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c84:	f7fd fa8c 	bl	80011a0 <HAL_GetTick>
 8003c88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c8c:	e009      	b.n	8003ca2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c8e:	f7fd fa87 	bl	80011a0 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e36b      	b.n	800437a <HAL_RCC_OscConfig+0xe02>
 8003ca2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	fa93 f2a3 	rbit	r2, r3
 8003cb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	fa93 f2a3 	rbit	r2, r3
 8003ccc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	fa93 f2a3 	rbit	r2, r3
 8003ce4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ce8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cea:	4b6f      	ldr	r3, [pc, #444]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	6019      	str	r1, [r3, #0]
 8003cf6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	fa93 f1a3 	rbit	r1, r3
 8003d00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d04:	6019      	str	r1, [r3, #0]
  return result;
 8003d06:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	fab3 f383 	clz	r3, r3
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1b2      	bne.n	8003c8e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d28:	1d3b      	adds	r3, r7, #4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8158 	beq.w	8003fe8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3e:	4b5a      	ldr	r3, [pc, #360]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d112      	bne.n	8003d70 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d4a:	4b57      	ldr	r3, [pc, #348]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4a56      	ldr	r2, [pc, #344]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d54:	61d3      	str	r3, [r2, #28]
 8003d56:	4b54      	ldr	r3, [pc, #336]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003d5e:	f107 0308 	add.w	r3, r7, #8
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f107 0308 	add.w	r3, r7, #8
 8003d68:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	4b4f      	ldr	r3, [pc, #316]	; (8003eb0 <HAL_RCC_OscConfig+0x938>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d11a      	bne.n	8003db2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7c:	4b4c      	ldr	r3, [pc, #304]	; (8003eb0 <HAL_RCC_OscConfig+0x938>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a4b      	ldr	r2, [pc, #300]	; (8003eb0 <HAL_RCC_OscConfig+0x938>)
 8003d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d86:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d88:	f7fd fa0a 	bl	80011a0 <HAL_GetTick>
 8003d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d90:	e009      	b.n	8003da6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d92:	f7fd fa05 	bl	80011a0 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b64      	cmp	r3, #100	; 0x64
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e2e9      	b.n	800437a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da6:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <HAL_RCC_OscConfig+0x938>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0ef      	beq.n	8003d92 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db2:	1d3b      	adds	r3, r7, #4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d106      	bne.n	8003dca <HAL_RCC_OscConfig+0x852>
 8003dbc:	4b3a      	ldr	r3, [pc, #232]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	4a39      	ldr	r2, [pc, #228]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6213      	str	r3, [r2, #32]
 8003dc8:	e02f      	b.n	8003e2a <HAL_RCC_OscConfig+0x8b2>
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10c      	bne.n	8003dee <HAL_RCC_OscConfig+0x876>
 8003dd4:	4b34      	ldr	r3, [pc, #208]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4a33      	ldr	r2, [pc, #204]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003dda:	f023 0301 	bic.w	r3, r3, #1
 8003dde:	6213      	str	r3, [r2, #32]
 8003de0:	4b31      	ldr	r3, [pc, #196]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	4a30      	ldr	r2, [pc, #192]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003de6:	f023 0304 	bic.w	r3, r3, #4
 8003dea:	6213      	str	r3, [r2, #32]
 8003dec:	e01d      	b.n	8003e2a <HAL_RCC_OscConfig+0x8b2>
 8003dee:	1d3b      	adds	r3, r7, #4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b05      	cmp	r3, #5
 8003df6:	d10c      	bne.n	8003e12 <HAL_RCC_OscConfig+0x89a>
 8003df8:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4a2a      	ldr	r2, [pc, #168]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003dfe:	f043 0304 	orr.w	r3, r3, #4
 8003e02:	6213      	str	r3, [r2, #32]
 8003e04:	4b28      	ldr	r3, [pc, #160]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	4a27      	ldr	r2, [pc, #156]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6213      	str	r3, [r2, #32]
 8003e10:	e00b      	b.n	8003e2a <HAL_RCC_OscConfig+0x8b2>
 8003e12:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6213      	str	r3, [r2, #32]
 8003e1e:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003e24:	f023 0304 	bic.w	r3, r3, #4
 8003e28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d06b      	beq.n	8003f0c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e34:	f7fd f9b4 	bl	80011a0 <HAL_GetTick>
 8003e38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3c:	e00b      	b.n	8003e56 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7fd f9af 	bl	80011a0 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e291      	b.n	800437a <HAL_RCC_OscConfig+0xe02>
 8003e56:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	fa93 f2a3 	rbit	r2, r3
 8003e68:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003e72:	2202      	movs	r2, #2
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	fa93 f2a3 	rbit	r2, r3
 8003e80:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e84:	601a      	str	r2, [r3, #0]
  return result;
 8003e86:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e8a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8c:	fab3 f383 	clz	r3, r3
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f043 0302 	orr.w	r3, r3, #2
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d109      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x93c>
 8003ea0:	4b01      	ldr	r3, [pc, #4]	; (8003ea8 <HAL_RCC_OscConfig+0x930>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	e014      	b.n	8003ed0 <HAL_RCC_OscConfig+0x958>
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	10908120 	.word	0x10908120
 8003eb0:	40007000 	.word	0x40007000
 8003eb4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003eb8:	2202      	movs	r2, #2
 8003eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	fa93 f2a3 	rbit	r2, r3
 8003ec6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	4bbb      	ldr	r3, [pc, #748]	; (80041bc <HAL_RCC_OscConfig+0xc44>)
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	6011      	str	r1, [r2, #0]
 8003ed8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	fa92 f1a2 	rbit	r1, r2
 8003ee2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003ee6:	6011      	str	r1, [r2, #0]
  return result;
 8003ee8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	fab2 f282 	clz	r2, r2
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	f002 021f 	and.w	r2, r2, #31
 8003efe:	2101      	movs	r1, #1
 8003f00:	fa01 f202 	lsl.w	r2, r1, r2
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d099      	beq.n	8003e3e <HAL_RCC_OscConfig+0x8c6>
 8003f0a:	e063      	b.n	8003fd4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0c:	f7fd f948 	bl	80011a0 <HAL_GetTick>
 8003f10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f14:	e00b      	b.n	8003f2e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fd f943 	bl	80011a0 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e225      	b.n	800437a <HAL_RCC_OscConfig+0xe02>
 8003f2e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f32:	2202      	movs	r2, #2
 8003f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	fa93 f2a3 	rbit	r2, r3
 8003f40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	fa93 f2a3 	rbit	r2, r3
 8003f58:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f5c:	601a      	str	r2, [r3, #0]
  return result;
 8003f5e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f043 0302 	orr.w	r3, r3, #2
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d102      	bne.n	8003f7e <HAL_RCC_OscConfig+0xa06>
 8003f78:	4b90      	ldr	r3, [pc, #576]	; (80041bc <HAL_RCC_OscConfig+0xc44>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	e00d      	b.n	8003f9a <HAL_RCC_OscConfig+0xa22>
 8003f7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003f82:	2202      	movs	r2, #2
 8003f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	fa93 f2a3 	rbit	r2, r3
 8003f90:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	4b89      	ldr	r3, [pc, #548]	; (80041bc <HAL_RCC_OscConfig+0xc44>)
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	6011      	str	r1, [r2, #0]
 8003fa2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	fa92 f1a2 	rbit	r1, r2
 8003fac:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003fb0:	6011      	str	r1, [r2, #0]
  return result;
 8003fb2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	fab2 f282 	clz	r2, r2
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	f002 021f 	and.w	r2, r2, #31
 8003fc8:	2101      	movs	r1, #1
 8003fca:	fa01 f202 	lsl.w	r2, r1, r2
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1a0      	bne.n	8003f16 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fd4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d105      	bne.n	8003fe8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fdc:	4b77      	ldr	r3, [pc, #476]	; (80041bc <HAL_RCC_OscConfig+0xc44>)
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	4a76      	ldr	r2, [pc, #472]	; (80041bc <HAL_RCC_OscConfig+0xc44>)
 8003fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe8:	1d3b      	adds	r3, r7, #4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 81c2 	beq.w	8004378 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ff4:	4b71      	ldr	r3, [pc, #452]	; (80041bc <HAL_RCC_OscConfig+0xc44>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 030c 	and.w	r3, r3, #12
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	f000 819c 	beq.w	800433a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004002:	1d3b      	adds	r3, r7, #4
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	2b02      	cmp	r3, #2
 800400a:	f040 8114 	bne.w	8004236 <HAL_RCC_OscConfig+0xcbe>
 800400e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004012:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	fa93 f2a3 	rbit	r2, r3
 8004022:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004026:	601a      	str	r2, [r3, #0]
  return result;
 8004028:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800402c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004038:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	461a      	mov	r2, r3
 8004040:	2300      	movs	r3, #0
 8004042:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004044:	f7fd f8ac 	bl	80011a0 <HAL_GetTick>
 8004048:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404c:	e009      	b.n	8004062 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404e:	f7fd f8a7 	bl	80011a0 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e18b      	b.n	800437a <HAL_RCC_OscConfig+0xe02>
 8004062:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800406a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	fa93 f2a3 	rbit	r2, r3
 8004076:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800407a:	601a      	str	r2, [r3, #0]
  return result;
 800407c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004080:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004082:	fab3 f383 	clz	r3, r3
 8004086:	b2db      	uxtb	r3, r3
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b01      	cmp	r3, #1
 8004094:	d102      	bne.n	800409c <HAL_RCC_OscConfig+0xb24>
 8004096:	4b49      	ldr	r3, [pc, #292]	; (80041bc <HAL_RCC_OscConfig+0xc44>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	e01b      	b.n	80040d4 <HAL_RCC_OscConfig+0xb5c>
 800409c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80040a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	fa93 f2a3 	rbit	r2, r3
 80040b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80040ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	fa93 f2a3 	rbit	r2, r3
 80040ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	4b3a      	ldr	r3, [pc, #232]	; (80041bc <HAL_RCC_OscConfig+0xc44>)
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80040d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040dc:	6011      	str	r1, [r2, #0]
 80040de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	fa92 f1a2 	rbit	r1, r2
 80040e8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80040ec:	6011      	str	r1, [r2, #0]
  return result;
 80040ee:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	fab2 f282 	clz	r2, r2
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	f042 0220 	orr.w	r2, r2, #32
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	f002 021f 	and.w	r2, r2, #31
 8004104:	2101      	movs	r1, #1
 8004106:	fa01 f202 	lsl.w	r2, r1, r2
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d19e      	bne.n	800404e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004110:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <HAL_RCC_OscConfig+0xc44>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004118:	1d3b      	adds	r3, r7, #4
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	430b      	orrs	r3, r1
 8004126:	4925      	ldr	r1, [pc, #148]	; (80041bc <HAL_RCC_OscConfig+0xc44>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
 800412c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	fa93 f2a3 	rbit	r2, r3
 8004140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004144:	601a      	str	r2, [r3, #0]
  return result;
 8004146:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800414a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414c:	fab3 f383 	clz	r3, r3
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004156:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	461a      	mov	r2, r3
 800415e:	2301      	movs	r3, #1
 8004160:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004162:	f7fd f81d 	bl	80011a0 <HAL_GetTick>
 8004166:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800416a:	e009      	b.n	8004180 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800416c:	f7fd f818 	bl	80011a0 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e0fc      	b.n	800437a <HAL_RCC_OscConfig+0xe02>
 8004180:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004184:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	fa93 f2a3 	rbit	r2, r3
 8004194:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004198:	601a      	str	r2, [r3, #0]
  return result;
 800419a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800419e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041a0:	fab3 f383 	clz	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d105      	bne.n	80041c0 <HAL_RCC_OscConfig+0xc48>
 80041b4:	4b01      	ldr	r3, [pc, #4]	; (80041bc <HAL_RCC_OscConfig+0xc44>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	e01e      	b.n	80041f8 <HAL_RCC_OscConfig+0xc80>
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000
 80041c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80041c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	fa93 f2a3 	rbit	r2, r3
 80041d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	fa93 f2a3 	rbit	r2, r3
 80041ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	4b63      	ldr	r3, [pc, #396]	; (8004384 <HAL_RCC_OscConfig+0xe0c>)
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004200:	6011      	str	r1, [r2, #0]
 8004202:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	fa92 f1a2 	rbit	r1, r2
 800420c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004210:	6011      	str	r1, [r2, #0]
  return result;
 8004212:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	fab2 f282 	clz	r2, r2
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	f042 0220 	orr.w	r2, r2, #32
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	f002 021f 	and.w	r2, r2, #31
 8004228:	2101      	movs	r1, #1
 800422a:	fa01 f202 	lsl.w	r2, r1, r2
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d09b      	beq.n	800416c <HAL_RCC_OscConfig+0xbf4>
 8004234:	e0a0      	b.n	8004378 <HAL_RCC_OscConfig+0xe00>
 8004236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800423a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800423e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	fa93 f2a3 	rbit	r2, r3
 800424a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800424e:	601a      	str	r2, [r3, #0]
  return result;
 8004250:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004254:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004260:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	461a      	mov	r2, r3
 8004268:	2300      	movs	r3, #0
 800426a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426c:	f7fc ff98 	bl	80011a0 <HAL_GetTick>
 8004270:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004274:	e009      	b.n	800428a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004276:	f7fc ff93 	bl	80011a0 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e077      	b.n	800437a <HAL_RCC_OscConfig+0xe02>
 800428a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800428e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004294:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	fa93 f2a3 	rbit	r2, r3
 800429e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042a2:	601a      	str	r2, [r3, #0]
  return result;
 80042a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042aa:	fab3 f383 	clz	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d102      	bne.n	80042c4 <HAL_RCC_OscConfig+0xd4c>
 80042be:	4b31      	ldr	r3, [pc, #196]	; (8004384 <HAL_RCC_OscConfig+0xe0c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	e01b      	b.n	80042fc <HAL_RCC_OscConfig+0xd84>
 80042c4:	f107 0320 	add.w	r3, r7, #32
 80042c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	f107 0320 	add.w	r3, r7, #32
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	fa93 f2a3 	rbit	r2, r3
 80042d8:	f107 031c 	add.w	r3, r7, #28
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	f107 0318 	add.w	r3, r7, #24
 80042e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	f107 0318 	add.w	r3, r7, #24
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	fa93 f2a3 	rbit	r2, r3
 80042f2:	f107 0314 	add.w	r3, r7, #20
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	4b22      	ldr	r3, [pc, #136]	; (8004384 <HAL_RCC_OscConfig+0xe0c>)
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	f107 0210 	add.w	r2, r7, #16
 8004300:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004304:	6011      	str	r1, [r2, #0]
 8004306:	f107 0210 	add.w	r2, r7, #16
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	fa92 f1a2 	rbit	r1, r2
 8004310:	f107 020c 	add.w	r2, r7, #12
 8004314:	6011      	str	r1, [r2, #0]
  return result;
 8004316:	f107 020c 	add.w	r2, r7, #12
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	fab2 f282 	clz	r2, r2
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	f042 0220 	orr.w	r2, r2, #32
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	f002 021f 	and.w	r2, r2, #31
 800432c:	2101      	movs	r1, #1
 800432e:	fa01 f202 	lsl.w	r2, r1, r2
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d19e      	bne.n	8004276 <HAL_RCC_OscConfig+0xcfe>
 8004338:	e01e      	b.n	8004378 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800433a:	1d3b      	adds	r3, r7, #4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e018      	b.n	800437a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004348:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <HAL_RCC_OscConfig+0xe0c>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004350:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004354:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004358:	1d3b      	adds	r3, r7, #4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	429a      	cmp	r2, r3
 8004360:	d108      	bne.n	8004374 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004362:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004366:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40021000 	.word	0x40021000

08004388 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b09e      	sub	sp, #120	; 0x78
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e162      	b.n	8004666 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043a0:	4b90      	ldr	r3, [pc, #576]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d910      	bls.n	80043d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ae:	4b8d      	ldr	r3, [pc, #564]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 0207 	bic.w	r2, r3, #7
 80043b6:	498b      	ldr	r1, [pc, #556]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043be:	4b89      	ldr	r3, [pc, #548]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e14a      	b.n	8004666 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043dc:	4b82      	ldr	r3, [pc, #520]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	497f      	ldr	r1, [pc, #508]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 80dc 	beq.w	80045b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d13c      	bne.n	800447e <HAL_RCC_ClockConfig+0xf6>
 8004404:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004408:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800440c:	fa93 f3a3 	rbit	r3, r3
 8004410:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004414:	fab3 f383 	clz	r3, r3
 8004418:	b2db      	uxtb	r3, r3
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	d102      	bne.n	800442e <HAL_RCC_ClockConfig+0xa6>
 8004428:	4b6f      	ldr	r3, [pc, #444]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	e00f      	b.n	800444e <HAL_RCC_ClockConfig+0xc6>
 800442e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004432:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004434:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004436:	fa93 f3a3 	rbit	r3, r3
 800443a:	667b      	str	r3, [r7, #100]	; 0x64
 800443c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004440:	663b      	str	r3, [r7, #96]	; 0x60
 8004442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	65fb      	str	r3, [r7, #92]	; 0x5c
 800444a:	4b67      	ldr	r3, [pc, #412]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004452:	65ba      	str	r2, [r7, #88]	; 0x58
 8004454:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004456:	fa92 f2a2 	rbit	r2, r2
 800445a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800445c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800445e:	fab2 f282 	clz	r2, r2
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	f042 0220 	orr.w	r2, r2, #32
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	f002 021f 	and.w	r2, r2, #31
 800446e:	2101      	movs	r1, #1
 8004470:	fa01 f202 	lsl.w	r2, r1, r2
 8004474:	4013      	ands	r3, r2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d17b      	bne.n	8004572 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e0f3      	b.n	8004666 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d13c      	bne.n	8004500 <HAL_RCC_ClockConfig+0x178>
 8004486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800448a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800448e:	fa93 f3a3 	rbit	r3, r3
 8004492:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004496:	fab3 f383 	clz	r3, r3
 800449a:	b2db      	uxtb	r3, r3
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d102      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x128>
 80044aa:	4b4f      	ldr	r3, [pc, #316]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	e00f      	b.n	80044d0 <HAL_RCC_ClockConfig+0x148>
 80044b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b8:	fa93 f3a3 	rbit	r3, r3
 80044bc:	647b      	str	r3, [r7, #68]	; 0x44
 80044be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044c2:	643b      	str	r3, [r7, #64]	; 0x40
 80044c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c6:	fa93 f3a3 	rbit	r3, r3
 80044ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044cc:	4b46      	ldr	r3, [pc, #280]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80044d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044d8:	fa92 f2a2 	rbit	r2, r2
 80044dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80044de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044e0:	fab2 f282 	clz	r2, r2
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	f042 0220 	orr.w	r2, r2, #32
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	f002 021f 	and.w	r2, r2, #31
 80044f0:	2101      	movs	r1, #1
 80044f2:	fa01 f202 	lsl.w	r2, r1, r2
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d13a      	bne.n	8004572 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0b2      	b.n	8004666 <HAL_RCC_ClockConfig+0x2de>
 8004500:	2302      	movs	r3, #2
 8004502:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	fa93 f3a3 	rbit	r3, r3
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450e:	fab3 f383 	clz	r3, r3
 8004512:	b2db      	uxtb	r3, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	d102      	bne.n	8004528 <HAL_RCC_ClockConfig+0x1a0>
 8004522:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	e00d      	b.n	8004544 <HAL_RCC_ClockConfig+0x1bc>
 8004528:	2302      	movs	r3, #2
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	fa93 f3a3 	rbit	r3, r3
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
 8004534:	2302      	movs	r3, #2
 8004536:	623b      	str	r3, [r7, #32]
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	fa93 f3a3 	rbit	r3, r3
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	4b29      	ldr	r3, [pc, #164]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	2202      	movs	r2, #2
 8004546:	61ba      	str	r2, [r7, #24]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	fa92 f2a2 	rbit	r2, r2
 800454e:	617a      	str	r2, [r7, #20]
  return result;
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	fab2 f282 	clz	r2, r2
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	f042 0220 	orr.w	r2, r2, #32
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	f002 021f 	and.w	r2, r2, #31
 8004562:	2101      	movs	r1, #1
 8004564:	fa01 f202 	lsl.w	r2, r1, r2
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e079      	b.n	8004666 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004572:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f023 0203 	bic.w	r2, r3, #3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	491a      	ldr	r1, [pc, #104]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 8004580:	4313      	orrs	r3, r2
 8004582:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004584:	f7fc fe0c 	bl	80011a0 <HAL_GetTick>
 8004588:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458a:	e00a      	b.n	80045a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800458c:	f7fc fe08 	bl	80011a0 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	; 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e061      	b.n	8004666 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a2:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <HAL_RCC_ClockConfig+0x260>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 020c 	and.w	r2, r3, #12
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d1eb      	bne.n	800458c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d214      	bcs.n	80045ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 0207 	bic.w	r2, r3, #7
 80045ca:	4906      	ldr	r1, [pc, #24]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d2:	4b04      	ldr	r3, [pc, #16]	; (80045e4 <HAL_RCC_ClockConfig+0x25c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d005      	beq.n	80045ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e040      	b.n	8004666 <HAL_RCC_ClockConfig+0x2de>
 80045e4:	40022000 	.word	0x40022000
 80045e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f8:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <HAL_RCC_ClockConfig+0x2e8>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	491a      	ldr	r1, [pc, #104]	; (8004670 <HAL_RCC_ClockConfig+0x2e8>)
 8004606:	4313      	orrs	r3, r2
 8004608:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004616:	4b16      	ldr	r3, [pc, #88]	; (8004670 <HAL_RCC_ClockConfig+0x2e8>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4912      	ldr	r1, [pc, #72]	; (8004670 <HAL_RCC_ClockConfig+0x2e8>)
 8004626:	4313      	orrs	r3, r2
 8004628:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800462a:	f000 f829 	bl	8004680 <HAL_RCC_GetSysClockFreq>
 800462e:	4601      	mov	r1, r0
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <HAL_RCC_ClockConfig+0x2e8>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004638:	22f0      	movs	r2, #240	; 0xf0
 800463a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	fa92 f2a2 	rbit	r2, r2
 8004642:	60fa      	str	r2, [r7, #12]
  return result;
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	fab2 f282 	clz	r2, r2
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	40d3      	lsrs	r3, r2
 800464e:	4a09      	ldr	r2, [pc, #36]	; (8004674 <HAL_RCC_ClockConfig+0x2ec>)
 8004650:	5cd3      	ldrb	r3, [r2, r3]
 8004652:	fa21 f303 	lsr.w	r3, r1, r3
 8004656:	4a08      	ldr	r2, [pc, #32]	; (8004678 <HAL_RCC_ClockConfig+0x2f0>)
 8004658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <HAL_RCC_ClockConfig+0x2f4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f7fc f9e8 	bl	8000a34 <HAL_InitTick>
  
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3778      	adds	r7, #120	; 0x78
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
 8004674:	08007854 	.word	0x08007854
 8004678:	20000000 	.word	0x20000000
 800467c:	20000004 	.word	0x20000004

08004680 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004680:	b480      	push	{r7}
 8004682:	b08b      	sub	sp, #44	; 0x2c
 8004684:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	2300      	movs	r3, #0
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800469a:	4b29      	ldr	r3, [pc, #164]	; (8004740 <HAL_RCC_GetSysClockFreq+0xc0>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d002      	beq.n	80046b0 <HAL_RCC_GetSysClockFreq+0x30>
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d003      	beq.n	80046b6 <HAL_RCC_GetSysClockFreq+0x36>
 80046ae:	e03c      	b.n	800472a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046b0:	4b24      	ldr	r3, [pc, #144]	; (8004744 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046b2:	623b      	str	r3, [r7, #32]
      break;
 80046b4:	e03c      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80046bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80046c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	fa92 f2a2 	rbit	r2, r2
 80046c8:	607a      	str	r2, [r7, #4]
  return result;
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	fab2 f282 	clz	r2, r2
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	40d3      	lsrs	r3, r2
 80046d4:	4a1c      	ldr	r2, [pc, #112]	; (8004748 <HAL_RCC_GetSysClockFreq+0xc8>)
 80046d6:	5cd3      	ldrb	r3, [r2, r3]
 80046d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80046da:	4b19      	ldr	r3, [pc, #100]	; (8004740 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	220f      	movs	r2, #15
 80046e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	fa92 f2a2 	rbit	r2, r2
 80046ec:	60fa      	str	r2, [r7, #12]
  return result;
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	fab2 f282 	clz	r2, r2
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	40d3      	lsrs	r3, r2
 80046f8:	4a14      	ldr	r2, [pc, #80]	; (800474c <HAL_RCC_GetSysClockFreq+0xcc>)
 80046fa:	5cd3      	ldrb	r3, [r2, r3]
 80046fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004708:	4a0e      	ldr	r2, [pc, #56]	; (8004744 <HAL_RCC_GetSysClockFreq+0xc4>)
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	fb02 f303 	mul.w	r3, r2, r3
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
 8004718:	e004      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	4a0c      	ldr	r2, [pc, #48]	; (8004750 <HAL_RCC_GetSysClockFreq+0xd0>)
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	623b      	str	r3, [r7, #32]
      break;
 8004728:	e002      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800472a:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <HAL_RCC_GetSysClockFreq+0xd4>)
 800472c:	623b      	str	r3, [r7, #32]
      break;
 800472e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004730:	6a3b      	ldr	r3, [r7, #32]
}
 8004732:	4618      	mov	r0, r3
 8004734:	372c      	adds	r7, #44	; 0x2c
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40021000 	.word	0x40021000
 8004744:	00f42400 	.word	0x00f42400
 8004748:	0800786c 	.word	0x0800786c
 800474c:	0800787c 	.word	0x0800787c
 8004750:	003d0900 	.word	0x003d0900
 8004754:	007a1200 	.word	0x007a1200

08004758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800475c:	4b03      	ldr	r3, [pc, #12]	; (800476c <HAL_RCC_GetHCLKFreq+0x14>)
 800475e:	681b      	ldr	r3, [r3, #0]
}
 8004760:	4618      	mov	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	20000000 	.word	0x20000000

08004770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004776:	f7ff ffef 	bl	8004758 <HAL_RCC_GetHCLKFreq>
 800477a:	4601      	mov	r1, r0
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004784:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004788:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	fa92 f2a2 	rbit	r2, r2
 8004790:	603a      	str	r2, [r7, #0]
  return result;
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	fab2 f282 	clz	r2, r2
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	40d3      	lsrs	r3, r2
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800479e:	5cd3      	ldrb	r3, [r2, r3]
 80047a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40021000 	.word	0x40021000
 80047b0:	08007864 	.word	0x08007864

080047b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80047ba:	f7ff ffcd 	bl	8004758 <HAL_RCC_GetHCLKFreq>
 80047be:	4601      	mov	r1, r0
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80047c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80047cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	fa92 f2a2 	rbit	r2, r2
 80047d4:	603a      	str	r2, [r7, #0]
  return result;
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	fab2 f282 	clz	r2, r2
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	40d3      	lsrs	r3, r2
 80047e0:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80047e2:	5cd3      	ldrb	r3, [r2, r3]
 80047e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40021000 	.word	0x40021000
 80047f4:	08007864 	.word	0x08007864

080047f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	220f      	movs	r2, #15
 8004806:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004808:	4b12      	ldr	r3, [pc, #72]	; (8004854 <HAL_RCC_GetClockConfig+0x5c>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 0203 	and.w	r2, r3, #3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004814:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <HAL_RCC_GetClockConfig+0x5c>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004820:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <HAL_RCC_GetClockConfig+0x5c>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800482c:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_RCC_GetClockConfig+0x5c>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	08db      	lsrs	r3, r3, #3
 8004832:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <HAL_RCC_GetClockConfig+0x60>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0207 	and.w	r2, r3, #7
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	601a      	str	r2, [r3, #0]
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40021000 	.word	0x40021000
 8004858:	40022000 	.word	0x40022000

0800485c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e01d      	b.n	80048aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f815 	bl	80048b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3304      	adds	r3, #4
 8004898:	4619      	mov	r1, r3
 800489a:	4610      	mov	r0, r2
 800489c:	f000 fbe4 	bl	8005068 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <HAL_TIM_Base_Start_IT+0x50>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b06      	cmp	r3, #6
 80048f0:	d00b      	beq.n	800490a <HAL_TIM_Base_Start_IT+0x42>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f8:	d007      	beq.n	800490a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0201 	orr.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	00010007 	.word	0x00010007

0800491c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e01d      	b.n	800496a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fc fa50 	bl	8000de8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3304      	adds	r3, #4
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f000 fb84 	bl	8005068 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2201      	movs	r2, #1
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fe8c 	bl	80056a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1c      	ldr	r2, [pc, #112]	; (8004a04 <HAL_TIM_PWM_Start+0x90>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00e      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x40>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1b      	ldr	r2, [pc, #108]	; (8004a08 <HAL_TIM_PWM_Start+0x94>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d009      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a19      	ldr	r2, [pc, #100]	; (8004a0c <HAL_TIM_PWM_Start+0x98>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d004      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x40>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a18      	ldr	r2, [pc, #96]	; (8004a10 <HAL_TIM_PWM_Start+0x9c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d101      	bne.n	80049b8 <HAL_TIM_PWM_Start+0x44>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <HAL_TIM_PWM_Start+0x46>
 80049b8:	2300      	movs	r3, #0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <HAL_TIM_PWM_Start+0xa0>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b06      	cmp	r3, #6
 80049de:	d00b      	beq.n	80049f8 <HAL_TIM_PWM_Start+0x84>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e6:	d007      	beq.n	80049f8 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	40014000 	.word	0x40014000
 8004a0c:	40014400 	.word	0x40014400
 8004a10:	40014800 	.word	0x40014800
 8004a14:	00010007 	.word	0x00010007

08004a18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e083      	b.n	8004b34 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d106      	bne.n	8004a46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7fc f991 	bl	8000d68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2202      	movs	r2, #2
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004a5c:	f023 0307 	bic.w	r3, r3, #7
 8004a60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	f000 fafb 	bl	8005068 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a9a:	f023 0303 	bic.w	r3, r3, #3
 8004a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ab8:	f023 030c 	bic.w	r3, r3, #12
 8004abc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ac4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	021b      	lsls	r3, r3, #8
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	011a      	lsls	r2, r3, #4
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	031b      	lsls	r3, r3, #12
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004af6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_TIM_Encoder_Start+0x16>
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d008      	beq.n	8004b62 <HAL_TIM_Encoder_Start+0x26>
 8004b50:	e00f      	b.n	8004b72 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2201      	movs	r2, #1
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fda2 	bl	80056a4 <TIM_CCxChannelCmd>
      break;
 8004b60:	e016      	b.n	8004b90 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2201      	movs	r2, #1
 8004b68:	2104      	movs	r1, #4
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fd9a 	bl	80056a4 <TIM_CCxChannelCmd>
      break;
 8004b70:	e00e      	b.n	8004b90 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2201      	movs	r2, #1
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fd92 	bl	80056a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2201      	movs	r2, #1
 8004b86:	2104      	movs	r1, #4
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fd8b 	bl	80056a4 <TIM_CCxChannelCmd>
      break;
 8004b8e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d122      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d11b      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f06f 0202 	mvn.w	r2, #2
 8004bd6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fa1d 	bl	800502c <HAL_TIM_IC_CaptureCallback>
 8004bf2:	e005      	b.n	8004c00 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fa0f 	bl	8005018 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fa20 	bl	8005040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d122      	bne.n	8004c5a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d11b      	bne.n	8004c5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f06f 0204 	mvn.w	r2, #4
 8004c2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f9f3 	bl	800502c <HAL_TIM_IC_CaptureCallback>
 8004c46:	e005      	b.n	8004c54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f9e5 	bl	8005018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f9f6 	bl	8005040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d122      	bne.n	8004cae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d11b      	bne.n	8004cae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f06f 0208 	mvn.w	r2, #8
 8004c7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2204      	movs	r2, #4
 8004c84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f9c9 	bl	800502c <HAL_TIM_IC_CaptureCallback>
 8004c9a:	e005      	b.n	8004ca8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f9bb 	bl	8005018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f9cc 	bl	8005040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d122      	bne.n	8004d02 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b10      	cmp	r3, #16
 8004cc8:	d11b      	bne.n	8004d02 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f06f 0210 	mvn.w	r2, #16
 8004cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2208      	movs	r2, #8
 8004cd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f99f 	bl	800502c <HAL_TIM_IC_CaptureCallback>
 8004cee:	e005      	b.n	8004cfc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f991 	bl	8005018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f9a2 	bl	8005040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d10e      	bne.n	8004d2e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d107      	bne.n	8004d2e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f06f 0201 	mvn.w	r2, #1
 8004d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7fb fe41 	bl	80009b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	d10e      	bne.n	8004d5a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d46:	2b80      	cmp	r3, #128	; 0x80
 8004d48:	d107      	bne.n	8004d5a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fd43 	bl	80057e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d68:	d10e      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d74:	2b80      	cmp	r3, #128	; 0x80
 8004d76:	d107      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fd36 	bl	80057f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d10e      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da0:	2b40      	cmp	r3, #64	; 0x40
 8004da2:	d107      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f950 	bl	8005054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d10e      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0320 	and.w	r3, r3, #32
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d107      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0220 	mvn.w	r2, #32
 8004dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fcf6 	bl	80057cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e105      	b.n	800500e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b14      	cmp	r3, #20
 8004e16:	f200 80f0 	bhi.w	8004ffa <HAL_TIM_PWM_ConfigChannel+0x212>
 8004e1a:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004e75 	.word	0x08004e75
 8004e24:	08004ffb 	.word	0x08004ffb
 8004e28:	08004ffb 	.word	0x08004ffb
 8004e2c:	08004ffb 	.word	0x08004ffb
 8004e30:	08004eb5 	.word	0x08004eb5
 8004e34:	08004ffb 	.word	0x08004ffb
 8004e38:	08004ffb 	.word	0x08004ffb
 8004e3c:	08004ffb 	.word	0x08004ffb
 8004e40:	08004ef7 	.word	0x08004ef7
 8004e44:	08004ffb 	.word	0x08004ffb
 8004e48:	08004ffb 	.word	0x08004ffb
 8004e4c:	08004ffb 	.word	0x08004ffb
 8004e50:	08004f37 	.word	0x08004f37
 8004e54:	08004ffb 	.word	0x08004ffb
 8004e58:	08004ffb 	.word	0x08004ffb
 8004e5c:	08004ffb 	.word	0x08004ffb
 8004e60:	08004f79 	.word	0x08004f79
 8004e64:	08004ffb 	.word	0x08004ffb
 8004e68:	08004ffb 	.word	0x08004ffb
 8004e6c:	08004ffb 	.word	0x08004ffb
 8004e70:	08004fb9 	.word	0x08004fb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 f96c 	bl	8005158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0208 	orr.w	r2, r2, #8
 8004e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0204 	bic.w	r2, r2, #4
 8004e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6999      	ldr	r1, [r3, #24]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	619a      	str	r2, [r3, #24]
      break;
 8004eb2:	e0a3      	b.n	8004ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 f9d2 	bl	8005264 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6999      	ldr	r1, [r3, #24]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	021a      	lsls	r2, r3, #8
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	619a      	str	r2, [r3, #24]
      break;
 8004ef4:	e082      	b.n	8004ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fa31 	bl	8005364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0208 	orr.w	r2, r2, #8
 8004f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0204 	bic.w	r2, r2, #4
 8004f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69d9      	ldr	r1, [r3, #28]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	61da      	str	r2, [r3, #28]
      break;
 8004f34:	e062      	b.n	8004ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fa8f 	bl	8005460 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69d9      	ldr	r1, [r3, #28]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	021a      	lsls	r2, r3, #8
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	61da      	str	r2, [r3, #28]
      break;
 8004f76:	e041      	b.n	8004ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68b9      	ldr	r1, [r7, #8]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fad2 	bl	8005528 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0208 	orr.w	r2, r2, #8
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0204 	bic.w	r2, r2, #4
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fb6:	e021      	b.n	8004ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68b9      	ldr	r1, [r7, #8]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fb10 	bl	80055e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	021a      	lsls	r2, r3, #8
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ff8:	e000      	b.n	8004ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004ffa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop

08005018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a32      	ldr	r2, [pc, #200]	; (8005144 <TIM_Base_SetConfig+0xdc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d007      	beq.n	8005090 <TIM_Base_SetConfig+0x28>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005086:	d003      	beq.n	8005090 <TIM_Base_SetConfig+0x28>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a2f      	ldr	r2, [pc, #188]	; (8005148 <TIM_Base_SetConfig+0xe0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d108      	bne.n	80050a2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a27      	ldr	r2, [pc, #156]	; (8005144 <TIM_Base_SetConfig+0xdc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <TIM_Base_SetConfig+0x6a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b0:	d00f      	beq.n	80050d2 <TIM_Base_SetConfig+0x6a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a24      	ldr	r2, [pc, #144]	; (8005148 <TIM_Base_SetConfig+0xe0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00b      	beq.n	80050d2 <TIM_Base_SetConfig+0x6a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a23      	ldr	r2, [pc, #140]	; (800514c <TIM_Base_SetConfig+0xe4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d007      	beq.n	80050d2 <TIM_Base_SetConfig+0x6a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a22      	ldr	r2, [pc, #136]	; (8005150 <TIM_Base_SetConfig+0xe8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d003      	beq.n	80050d2 <TIM_Base_SetConfig+0x6a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a21      	ldr	r2, [pc, #132]	; (8005154 <TIM_Base_SetConfig+0xec>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d108      	bne.n	80050e4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a0e      	ldr	r2, [pc, #56]	; (8005144 <TIM_Base_SetConfig+0xdc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00b      	beq.n	8005128 <TIM_Base_SetConfig+0xc0>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a0e      	ldr	r2, [pc, #56]	; (800514c <TIM_Base_SetConfig+0xe4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d007      	beq.n	8005128 <TIM_Base_SetConfig+0xc0>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a0d      	ldr	r2, [pc, #52]	; (8005150 <TIM_Base_SetConfig+0xe8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_Base_SetConfig+0xc0>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a0c      	ldr	r2, [pc, #48]	; (8005154 <TIM_Base_SetConfig+0xec>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d103      	bne.n	8005130 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	615a      	str	r2, [r3, #20]
}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40012c00 	.word	0x40012c00
 8005148:	40000400 	.word	0x40000400
 800514c:	40014000 	.word	0x40014000
 8005150:	40014400 	.word	0x40014400
 8005154:	40014800 	.word	0x40014800

08005158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f023 0201 	bic.w	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f023 0302 	bic.w	r3, r3, #2
 80051a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a28      	ldr	r2, [pc, #160]	; (8005254 <TIM_OC1_SetConfig+0xfc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <TIM_OC1_SetConfig+0x78>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a27      	ldr	r2, [pc, #156]	; (8005258 <TIM_OC1_SetConfig+0x100>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d007      	beq.n	80051d0 <TIM_OC1_SetConfig+0x78>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a26      	ldr	r2, [pc, #152]	; (800525c <TIM_OC1_SetConfig+0x104>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_OC1_SetConfig+0x78>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a25      	ldr	r2, [pc, #148]	; (8005260 <TIM_OC1_SetConfig+0x108>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d10c      	bne.n	80051ea <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 0308 	bic.w	r3, r3, #8
 80051d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 0304 	bic.w	r3, r3, #4
 80051e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a19      	ldr	r2, [pc, #100]	; (8005254 <TIM_OC1_SetConfig+0xfc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00b      	beq.n	800520a <TIM_OC1_SetConfig+0xb2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a18      	ldr	r2, [pc, #96]	; (8005258 <TIM_OC1_SetConfig+0x100>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d007      	beq.n	800520a <TIM_OC1_SetConfig+0xb2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a17      	ldr	r2, [pc, #92]	; (800525c <TIM_OC1_SetConfig+0x104>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d003      	beq.n	800520a <TIM_OC1_SetConfig+0xb2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a16      	ldr	r2, [pc, #88]	; (8005260 <TIM_OC1_SetConfig+0x108>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d111      	bne.n	800522e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	621a      	str	r2, [r3, #32]
}
 8005248:	bf00      	nop
 800524a:	371c      	adds	r7, #28
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	40012c00 	.word	0x40012c00
 8005258:	40014000 	.word	0x40014000
 800525c:	40014400 	.word	0x40014400
 8005260:	40014800 	.word	0x40014800

08005264 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f023 0210 	bic.w	r2, r3, #16
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f023 0320 	bic.w	r3, r3, #32
 80052b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a24      	ldr	r2, [pc, #144]	; (8005354 <TIM_OC2_SetConfig+0xf0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d10d      	bne.n	80052e4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a1b      	ldr	r2, [pc, #108]	; (8005354 <TIM_OC2_SetConfig+0xf0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00b      	beq.n	8005304 <TIM_OC2_SetConfig+0xa0>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a1a      	ldr	r2, [pc, #104]	; (8005358 <TIM_OC2_SetConfig+0xf4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d007      	beq.n	8005304 <TIM_OC2_SetConfig+0xa0>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a19      	ldr	r2, [pc, #100]	; (800535c <TIM_OC2_SetConfig+0xf8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_OC2_SetConfig+0xa0>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a18      	ldr	r2, [pc, #96]	; (8005360 <TIM_OC2_SetConfig+0xfc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d113      	bne.n	800532c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800530a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005312:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	621a      	str	r2, [r3, #32]
}
 8005346:	bf00      	nop
 8005348:	371c      	adds	r7, #28
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40012c00 	.word	0x40012c00
 8005358:	40014000 	.word	0x40014000
 800535c:	40014400 	.word	0x40014400
 8005360:	40014800 	.word	0x40014800

08005364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0303 	bic.w	r3, r3, #3
 800539e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a23      	ldr	r2, [pc, #140]	; (8005450 <TIM_OC3_SetConfig+0xec>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d10d      	bne.n	80053e2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053e0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <TIM_OC3_SetConfig+0xec>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_OC3_SetConfig+0x9e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a19      	ldr	r2, [pc, #100]	; (8005454 <TIM_OC3_SetConfig+0xf0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <TIM_OC3_SetConfig+0x9e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a18      	ldr	r2, [pc, #96]	; (8005458 <TIM_OC3_SetConfig+0xf4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_OC3_SetConfig+0x9e>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a17      	ldr	r2, [pc, #92]	; (800545c <TIM_OC3_SetConfig+0xf8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d113      	bne.n	800542a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	621a      	str	r2, [r3, #32]
}
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	40012c00 	.word	0x40012c00
 8005454:	40014000 	.word	0x40014000
 8005458:	40014400 	.word	0x40014400
 800545c:	40014800 	.word	0x40014800

08005460 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800548e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	021b      	lsls	r3, r3, #8
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	031b      	lsls	r3, r3, #12
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a16      	ldr	r2, [pc, #88]	; (8005518 <TIM_OC4_SetConfig+0xb8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_OC4_SetConfig+0x7c>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a15      	ldr	r2, [pc, #84]	; (800551c <TIM_OC4_SetConfig+0xbc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_OC4_SetConfig+0x7c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a14      	ldr	r2, [pc, #80]	; (8005520 <TIM_OC4_SetConfig+0xc0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_OC4_SetConfig+0x7c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a13      	ldr	r2, [pc, #76]	; (8005524 <TIM_OC4_SetConfig+0xc4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d109      	bne.n	80054f0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	019b      	lsls	r3, r3, #6
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40012c00 	.word	0x40012c00
 800551c:	40014000 	.word	0x40014000
 8005520:	40014400 	.word	0x40014400
 8005524:	40014800 	.word	0x40014800

08005528 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800556c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	041b      	lsls	r3, r3, #16
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <TIM_OC5_SetConfig+0xac>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00b      	beq.n	800559a <TIM_OC5_SetConfig+0x72>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a14      	ldr	r2, [pc, #80]	; (80055d8 <TIM_OC5_SetConfig+0xb0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d007      	beq.n	800559a <TIM_OC5_SetConfig+0x72>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a13      	ldr	r2, [pc, #76]	; (80055dc <TIM_OC5_SetConfig+0xb4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d003      	beq.n	800559a <TIM_OC5_SetConfig+0x72>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a12      	ldr	r2, [pc, #72]	; (80055e0 <TIM_OC5_SetConfig+0xb8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d109      	bne.n	80055ae <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	621a      	str	r2, [r3, #32]
}
 80055c8:	bf00      	nop
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40014000 	.word	0x40014000
 80055dc:	40014400 	.word	0x40014400
 80055e0:	40014800 	.word	0x40014800

080055e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800562a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	051b      	lsls	r3, r3, #20
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a16      	ldr	r2, [pc, #88]	; (8005694 <TIM_OC6_SetConfig+0xb0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00b      	beq.n	8005658 <TIM_OC6_SetConfig+0x74>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <TIM_OC6_SetConfig+0xb4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_OC6_SetConfig+0x74>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a14      	ldr	r2, [pc, #80]	; (800569c <TIM_OC6_SetConfig+0xb8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_OC6_SetConfig+0x74>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <TIM_OC6_SetConfig+0xbc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d109      	bne.n	800566c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800565e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	029b      	lsls	r3, r3, #10
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4313      	orrs	r3, r2
 800566a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40014000 	.word	0x40014000
 800569c:	40014400 	.word	0x40014400
 80056a0:	40014800 	.word	0x40014800

080056a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	2201      	movs	r2, #1
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a1a      	ldr	r2, [r3, #32]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	43db      	mvns	r3, r3
 80056c6:	401a      	ands	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a1a      	ldr	r2, [r3, #32]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	fa01 f303 	lsl.w	r3, r1, r3
 80056dc:	431a      	orrs	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
	...

080056f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005704:	2302      	movs	r3, #2
 8005706:	e054      	b.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a24      	ldr	r2, [pc, #144]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d108      	bne.n	8005744 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005738:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a17      	ldr	r2, [pc, #92]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005770:	d009      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a11      	ldr	r2, [pc, #68]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d10c      	bne.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800578c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	4313      	orrs	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40012c00 	.word	0x40012c00
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40014000 	.word	0x40014000

080057cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e040      	b.n	800589c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fb fc18 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2224      	movs	r2, #36	; 0x24
 8005834:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f986 	bl	8005b58 <UART_SetConfig>
 800584c:	4603      	mov	r3, r0
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e022      	b.n	800589c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fafc 	bl	8005e5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fb83 	bl	8005fa0 <UART_CheckIdleState>
 800589a:	4603      	mov	r3, r0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80058ca:	4013      	ands	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d113      	bne.n	80058fc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00e      	beq.n	80058fc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d009      	beq.n	80058fc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8114 	beq.w	8005b1a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
      }
      return;
 80058fa:	e10e      	b.n	8005b1a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 80d6 	beq.w	8005ab0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d105      	bne.n	800591a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80cb 	beq.w	8005ab0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00e      	beq.n	8005942 <HAL_UART_IRQHandler+0x9e>
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2201      	movs	r2, #1
 8005934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800593a:	f043 0201 	orr.w	r2, r3, #1
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00e      	beq.n	800596a <HAL_UART_IRQHandler+0xc6>
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2202      	movs	r2, #2
 800595c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005962:	f043 0204 	orr.w	r2, r3, #4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00e      	beq.n	8005992 <HAL_UART_IRQHandler+0xee>
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2204      	movs	r2, #4
 8005984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800598a:	f043 0202 	orr.w	r2, r3, #2
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b00      	cmp	r3, #0
 800599a:	d013      	beq.n	80059c4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d104      	bne.n	80059b0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d009      	beq.n	80059c4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2208      	movs	r2, #8
 80059b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059bc:	f043 0208 	orr.w	r2, r3, #8
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00f      	beq.n	80059ee <HAL_UART_IRQHandler+0x14a>
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059e6:	f043 0220 	orr.w	r2, r3, #32
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 8093 	beq.w	8005b1e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a20:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2c:	2b40      	cmp	r3, #64	; 0x40
 8005a2e:	d004      	beq.n	8005a3a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d031      	beq.n	8005a9e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fb70 	bl	8006120 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4a:	2b40      	cmp	r3, #64	; 0x40
 8005a4c:	d123      	bne.n	8005a96 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a5c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d013      	beq.n	8005a8e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a6a:	4a30      	ldr	r2, [pc, #192]	; (8005b2c <HAL_UART_IRQHandler+0x288>)
 8005a6c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fd faf5 	bl	8003062 <HAL_DMA_Abort_IT>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d016      	beq.n	8005aac <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8c:	e00e      	b.n	8005aac <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f858 	bl	8005b44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a94:	e00a      	b.n	8005aac <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f854 	bl	8005b44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	e006      	b.n	8005aac <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f850 	bl	8005b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005aaa:	e038      	b.n	8005b1e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aac:	bf00      	nop
    return;
 8005aae:	e036      	b.n	8005b1e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00d      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x232>
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005acc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fb75 	bl	80061be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ad4:	e026      	b.n	8005b24 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00d      	beq.n	8005afc <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d008      	beq.n	8005afc <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d017      	beq.n	8005b22 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	4798      	blx	r3
    }
    return;
 8005afa:	e012      	b.n	8005b22 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00e      	beq.n	8005b24 <HAL_UART_IRQHandler+0x280>
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d009      	beq.n	8005b24 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fb3b 	bl	800618c <UART_EndTransmit_IT>
    return;
 8005b16:	bf00      	nop
 8005b18:	e004      	b.n	8005b24 <HAL_UART_IRQHandler+0x280>
      return;
 8005b1a:	bf00      	nop
 8005b1c:	e002      	b.n	8005b24 <HAL_UART_IRQHandler+0x280>
    return;
 8005b1e:	bf00      	nop
 8005b20:	e000      	b.n	8005b24 <HAL_UART_IRQHandler+0x280>
    return;
 8005b22:	bf00      	nop
  }

}
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	08006161 	.word	0x08006161

08005b30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4ba2      	ldr	r3, [pc, #648]	; (8005e10 <UART_SetConfig+0x2b8>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	6939      	ldr	r1, [r7, #16]
 8005b90:	430b      	orrs	r3, r1
 8005b92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a90      	ldr	r2, [pc, #576]	; (8005e14 <UART_SetConfig+0x2bc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d121      	bne.n	8005c1c <UART_SetConfig+0xc4>
 8005bd8:	4b8f      	ldr	r3, [pc, #572]	; (8005e18 <UART_SetConfig+0x2c0>)
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	f003 0303 	and.w	r3, r3, #3
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d817      	bhi.n	8005c14 <UART_SetConfig+0xbc>
 8005be4:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <UART_SetConfig+0x94>)
 8005be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bea:	bf00      	nop
 8005bec:	08005bfd 	.word	0x08005bfd
 8005bf0:	08005c09 	.word	0x08005c09
 8005bf4:	08005c0f 	.word	0x08005c0f
 8005bf8:	08005c03 	.word	0x08005c03
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	77fb      	strb	r3, [r7, #31]
 8005c00:	e01e      	b.n	8005c40 <UART_SetConfig+0xe8>
 8005c02:	2302      	movs	r3, #2
 8005c04:	77fb      	strb	r3, [r7, #31]
 8005c06:	e01b      	b.n	8005c40 <UART_SetConfig+0xe8>
 8005c08:	2304      	movs	r3, #4
 8005c0a:	77fb      	strb	r3, [r7, #31]
 8005c0c:	e018      	b.n	8005c40 <UART_SetConfig+0xe8>
 8005c0e:	2308      	movs	r3, #8
 8005c10:	77fb      	strb	r3, [r7, #31]
 8005c12:	e015      	b.n	8005c40 <UART_SetConfig+0xe8>
 8005c14:	2310      	movs	r3, #16
 8005c16:	77fb      	strb	r3, [r7, #31]
 8005c18:	bf00      	nop
 8005c1a:	e011      	b.n	8005c40 <UART_SetConfig+0xe8>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a7e      	ldr	r2, [pc, #504]	; (8005e1c <UART_SetConfig+0x2c4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d102      	bne.n	8005c2c <UART_SetConfig+0xd4>
 8005c26:	2300      	movs	r3, #0
 8005c28:	77fb      	strb	r3, [r7, #31]
 8005c2a:	e009      	b.n	8005c40 <UART_SetConfig+0xe8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a7b      	ldr	r2, [pc, #492]	; (8005e20 <UART_SetConfig+0x2c8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d102      	bne.n	8005c3c <UART_SetConfig+0xe4>
 8005c36:	2300      	movs	r3, #0
 8005c38:	77fb      	strb	r3, [r7, #31]
 8005c3a:	e001      	b.n	8005c40 <UART_SetConfig+0xe8>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c48:	f040 8082 	bne.w	8005d50 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005c4c:	7ffb      	ldrb	r3, [r7, #31]
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d85e      	bhi.n	8005d10 <UART_SetConfig+0x1b8>
 8005c52:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <UART_SetConfig+0x100>)
 8005c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c58:	08005c7d 	.word	0x08005c7d
 8005c5c:	08005c9d 	.word	0x08005c9d
 8005c60:	08005cbd 	.word	0x08005cbd
 8005c64:	08005d11 	.word	0x08005d11
 8005c68:	08005cd9 	.word	0x08005cd9
 8005c6c:	08005d11 	.word	0x08005d11
 8005c70:	08005d11 	.word	0x08005d11
 8005c74:	08005d11 	.word	0x08005d11
 8005c78:	08005cf9 	.word	0x08005cf9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c7c:	f7fe fd78 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8005c80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	005a      	lsls	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	085b      	lsrs	r3, r3, #1
 8005c8c:	441a      	add	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	61bb      	str	r3, [r7, #24]
        break;
 8005c9a:	e03c      	b.n	8005d16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c9c:	f7fe fd8a 	bl	80047b4 <HAL_RCC_GetPCLK2Freq>
 8005ca0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	005a      	lsls	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	085b      	lsrs	r3, r3, #1
 8005cac:	441a      	add	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	61bb      	str	r3, [r7, #24]
        break;
 8005cba:	e02c      	b.n	8005d16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	085b      	lsrs	r3, r3, #1
 8005cc2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005cc6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6852      	ldr	r2, [r2, #4]
 8005cce:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	61bb      	str	r3, [r7, #24]
        break;
 8005cd6:	e01e      	b.n	8005d16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd8:	f7fe fcd2 	bl	8004680 <HAL_RCC_GetSysClockFreq>
 8005cdc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	005a      	lsls	r2, r3, #1
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	085b      	lsrs	r3, r3, #1
 8005ce8:	441a      	add	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	61bb      	str	r3, [r7, #24]
        break;
 8005cf6:	e00e      	b.n	8005d16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	085b      	lsrs	r3, r3, #1
 8005cfe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	61bb      	str	r3, [r7, #24]
        break;
 8005d0e:	e002      	b.n	8005d16 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	75fb      	strb	r3, [r7, #23]
        break;
 8005d14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	2b0f      	cmp	r3, #15
 8005d1a:	d916      	bls.n	8005d4a <UART_SetConfig+0x1f2>
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d22:	d212      	bcs.n	8005d4a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f023 030f 	bic.w	r3, r3, #15
 8005d2c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	897b      	ldrh	r3, [r7, #10]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	897a      	ldrh	r2, [r7, #10]
 8005d46:	60da      	str	r2, [r3, #12]
 8005d48:	e07d      	b.n	8005e46 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	75fb      	strb	r3, [r7, #23]
 8005d4e:	e07a      	b.n	8005e46 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8005d50:	7ffb      	ldrb	r3, [r7, #31]
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d866      	bhi.n	8005e24 <UART_SetConfig+0x2cc>
 8005d56:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <UART_SetConfig+0x204>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005d81 	.word	0x08005d81
 8005d60:	08005d9f 	.word	0x08005d9f
 8005d64:	08005dbd 	.word	0x08005dbd
 8005d68:	08005e25 	.word	0x08005e25
 8005d6c:	08005dd9 	.word	0x08005dd9
 8005d70:	08005e25 	.word	0x08005e25
 8005d74:	08005e25 	.word	0x08005e25
 8005d78:	08005e25 	.word	0x08005e25
 8005d7c:	08005df7 	.word	0x08005df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d80:	f7fe fcf6 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8005d84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	085a      	lsrs	r2, r3, #1
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	441a      	add	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	61bb      	str	r3, [r7, #24]
        break;
 8005d9c:	e045      	b.n	8005e2a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d9e:	f7fe fd09 	bl	80047b4 <HAL_RCC_GetPCLK2Freq>
 8005da2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	085a      	lsrs	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	441a      	add	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	61bb      	str	r3, [r7, #24]
        break;
 8005dba:	e036      	b.n	8005e2a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	085b      	lsrs	r3, r3, #1
 8005dc2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005dc6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6852      	ldr	r2, [r2, #4]
 8005dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	61bb      	str	r3, [r7, #24]
        break;
 8005dd6:	e028      	b.n	8005e2a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dd8:	f7fe fc52 	bl	8004680 <HAL_RCC_GetSysClockFreq>
 8005ddc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	085a      	lsrs	r2, r3, #1
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	441a      	add	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	61bb      	str	r3, [r7, #24]
        break;
 8005df4:	e019      	b.n	8005e2a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	085b      	lsrs	r3, r3, #1
 8005dfc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	61bb      	str	r3, [r7, #24]
        break;
 8005e0c:	e00d      	b.n	8005e2a <UART_SetConfig+0x2d2>
 8005e0e:	bf00      	nop
 8005e10:	efff69f3 	.word	0xefff69f3
 8005e14:	40013800 	.word	0x40013800
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	40004400 	.word	0x40004400
 8005e20:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	75fb      	strb	r3, [r7, #23]
        break;
 8005e28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b0f      	cmp	r3, #15
 8005e2e:	d908      	bls.n	8005e42 <UART_SetConfig+0x2ea>
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e36:	d204      	bcs.n	8005e42 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	60da      	str	r2, [r3, #12]
 8005e40:	e001      	b.n	8005e46 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3720      	adds	r7, #32
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00a      	beq.n	8005e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	f003 0310 	and.w	r3, r3, #16
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01a      	beq.n	8005f72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f5a:	d10a      	bne.n	8005f72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	605a      	str	r2, [r3, #4]
  }
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005fae:	f7fb f8f7 	bl	80011a0 <HAL_GetTick>
 8005fb2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d10e      	bne.n	8005fe0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f82a 	bl	800602a <UART_WaitOnFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e020      	b.n	8006022 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	d10e      	bne.n	800600c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f814 	bl	800602a <UART_WaitOnFlagUntilTimeout>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e00a      	b.n	8006022 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	603b      	str	r3, [r7, #0]
 8006036:	4613      	mov	r3, r2
 8006038:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603a:	e05d      	b.n	80060f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d059      	beq.n	80060f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006044:	f7fb f8ac 	bl	80011a0 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	429a      	cmp	r2, r3
 8006052:	d302      	bcc.n	800605a <UART_WaitOnFlagUntilTimeout+0x30>
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d11b      	bne.n	8006092 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006068:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0201 	bic.w	r2, r2, #1
 8006078:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2220      	movs	r2, #32
 8006084:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e042      	b.n	8006118 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d02b      	beq.n	80060f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ae:	d123      	bne.n	80060f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060b8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0201 	bic.w	r2, r2, #1
 80060d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2220      	movs	r2, #32
 80060de:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2220      	movs	r2, #32
 80060ea:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e00f      	b.n	8006118 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	69da      	ldr	r2, [r3, #28]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	4013      	ands	r3, r2
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	429a      	cmp	r2, r3
 8006106:	bf0c      	ite	eq
 8006108:	2301      	moveq	r3, #1
 800610a:	2300      	movne	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	429a      	cmp	r2, r3
 8006114:	d092      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006136:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0201 	bic.w	r2, r2, #1
 8006146:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2220      	movs	r2, #32
 800614c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff fce0 	bl	8005b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006184:	bf00      	nop
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061a2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff fcbd 	bl	8005b30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061b6:	bf00      	nop
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b085      	sub	sp, #20
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	4603      	mov	r3, r0
 80061da:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80061e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061e4:	2b84      	cmp	r3, #132	; 0x84
 80061e6:	d005      	beq.n	80061f4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80061e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	3303      	adds	r3, #3
 80061f2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80061f4:	68fb      	ldr	r3, [r7, #12]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006206:	f000 fb4f 	bl	80068a8 <vTaskStartScheduler>
  
  return osOK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	bd80      	pop	{r7, pc}

08006210 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006212:	b089      	sub	sp, #36	; 0x24
 8006214:	af04      	add	r7, sp, #16
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d020      	beq.n	8006264 <osThreadCreate+0x54>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d01c      	beq.n	8006264 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685c      	ldr	r4, [r3, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681d      	ldr	r5, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691e      	ldr	r6, [r3, #16]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff ffc8 	bl	80061d2 <makeFreeRtosPriority>
 8006242:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800624c:	9202      	str	r2, [sp, #8]
 800624e:	9301      	str	r3, [sp, #4]
 8006250:	9100      	str	r1, [sp, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	4632      	mov	r2, r6
 8006256:	4629      	mov	r1, r5
 8006258:	4620      	mov	r0, r4
 800625a:	f000 f8f0 	bl	800643e <xTaskCreateStatic>
 800625e:	4603      	mov	r3, r0
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e01c      	b.n	800629e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685c      	ldr	r4, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006270:	b29e      	uxth	r6, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff ffaa 	bl	80061d2 <makeFreeRtosPriority>
 800627e:	4602      	mov	r2, r0
 8006280:	f107 030c 	add.w	r3, r7, #12
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	9200      	str	r2, [sp, #0]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	4632      	mov	r2, r6
 800628c:	4629      	mov	r1, r5
 800628e:	4620      	mov	r0, r4
 8006290:	f000 f92e 	bl	80064f0 <xTaskCreate>
 8006294:	4603      	mov	r3, r0
 8006296:	2b01      	cmp	r3, #1
 8006298:	d001      	beq.n	800629e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	e000      	b.n	80062a0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800629e:	68fb      	ldr	r3, [r7, #12]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <osDelay+0x1c>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	e000      	b.n	80062c6 <osDelay+0x1e>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 faba 	bl	8006840 <vTaskDelay>
  
  return osOK;
 80062cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f103 0208 	add.w	r2, r3, #8
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f04f 32ff 	mov.w	r2, #4294967295
 80062ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f103 0208 	add.w	r2, r3, #8
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f103 0208 	add.w	r2, r3, #8
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	601a      	str	r2, [r3, #0]
}
 800636c:	bf00      	nop
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638e:	d103      	bne.n	8006398 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	e00c      	b.n	80063b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3308      	adds	r3, #8
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	e002      	b.n	80063a6 <vListInsert+0x2e>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d2f6      	bcs.n	80063a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	601a      	str	r2, [r3, #0]
}
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6892      	ldr	r2, [r2, #8]
 8006400:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6852      	ldr	r2, [r2, #4]
 800640a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	429a      	cmp	r2, r3
 8006414:	d103      	bne.n	800641e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	1e5a      	subs	r2, r3, #1
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800643e:	b580      	push	{r7, lr}
 8006440:	b08e      	sub	sp, #56	; 0x38
 8006442:	af04      	add	r7, sp, #16
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
 800644a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800644c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644e:	2b00      	cmp	r3, #0
 8006450:	d109      	bne.n	8006466 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	623b      	str	r3, [r7, #32]
 8006464:	e7fe      	b.n	8006464 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	2b00      	cmp	r3, #0
 800646a:	d109      	bne.n	8006480 <xTaskCreateStatic+0x42>
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	e7fe      	b.n	800647e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006480:	2354      	movs	r3, #84	; 0x54
 8006482:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	2b54      	cmp	r3, #84	; 0x54
 8006488:	d009      	beq.n	800649e <xTaskCreateStatic+0x60>
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	61bb      	str	r3, [r7, #24]
 800649c:	e7fe      	b.n	800649c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01e      	beq.n	80064e2 <xTaskCreateStatic+0xa4>
 80064a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01b      	beq.n	80064e2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064bc:	2300      	movs	r3, #0
 80064be:	9303      	str	r3, [sp, #12]
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	9302      	str	r3, [sp, #8]
 80064c4:	f107 0314 	add.w	r3, r7, #20
 80064c8:	9301      	str	r3, [sp, #4]
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 f850 	bl	800657a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064dc:	f000 f8cc 	bl	8006678 <prvAddNewTaskToReadyList>
 80064e0:	e001      	b.n	80064e6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064e6:	697b      	ldr	r3, [r7, #20]
	}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3728      	adds	r7, #40	; 0x28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08c      	sub	sp, #48	; 0x30
 80064f4:	af04      	add	r7, sp, #16
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	4613      	mov	r3, r2
 80064fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006500:	88fb      	ldrh	r3, [r7, #6]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4618      	mov	r0, r3
 8006506:	f000 ff3d 	bl	8007384 <pvPortMalloc>
 800650a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00e      	beq.n	8006530 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006512:	2054      	movs	r0, #84	; 0x54
 8006514:	f000 ff36 	bl	8007384 <pvPortMalloc>
 8006518:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	631a      	str	r2, [r3, #48]	; 0x30
 8006526:	e005      	b.n	8006534 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006528:	6978      	ldr	r0, [r7, #20]
 800652a:	f000 ffed 	bl	8007508 <vPortFree>
 800652e:	e001      	b.n	8006534 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006530:	2300      	movs	r3, #0
 8006532:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d017      	beq.n	800656a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006542:	88fa      	ldrh	r2, [r7, #6]
 8006544:	2300      	movs	r3, #0
 8006546:	9303      	str	r3, [sp, #12]
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	9302      	str	r3, [sp, #8]
 800654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 f80e 	bl	800657a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800655e:	69f8      	ldr	r0, [r7, #28]
 8006560:	f000 f88a 	bl	8006678 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006564:	2301      	movs	r3, #1
 8006566:	61bb      	str	r3, [r7, #24]
 8006568:	e002      	b.n	8006570 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800656a:	f04f 33ff 	mov.w	r3, #4294967295
 800656e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006570:	69bb      	ldr	r3, [r7, #24]
	}
 8006572:	4618      	mov	r0, r3
 8006574:	3720      	adds	r7, #32
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b088      	sub	sp, #32
 800657e:	af00      	add	r7, sp, #0
 8006580:	60f8      	str	r0, [r7, #12]
 8006582:	60b9      	str	r1, [r7, #8]
 8006584:	607a      	str	r2, [r7, #4]
 8006586:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006592:	3b01      	subs	r3, #1
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	f023 0307 	bic.w	r3, r3, #7
 80065a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d009      	beq.n	80065c0 <prvInitialiseNewTask+0x46>
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	e7fe      	b.n	80065be <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065c0:	2300      	movs	r3, #0
 80065c2:	61fb      	str	r3, [r7, #28]
 80065c4:	e012      	b.n	80065ec <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	4413      	add	r3, r2
 80065cc:	7819      	ldrb	r1, [r3, #0]
 80065ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	4413      	add	r3, r2
 80065d4:	3334      	adds	r3, #52	; 0x34
 80065d6:	460a      	mov	r2, r1
 80065d8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	4413      	add	r3, r2
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d006      	beq.n	80065f4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	3301      	adds	r3, #1
 80065ea:	61fb      	str	r3, [r7, #28]
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	2b0f      	cmp	r3, #15
 80065f0:	d9e9      	bls.n	80065c6 <prvInitialiseNewTask+0x4c>
 80065f2:	e000      	b.n	80065f6 <prvInitialiseNewTask+0x7c>
		{
			break;
 80065f4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	2b06      	cmp	r3, #6
 8006602:	d901      	bls.n	8006608 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006604:	2306      	movs	r3, #6
 8006606:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800660c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006612:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	2200      	movs	r2, #0
 8006618:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	3304      	adds	r3, #4
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff fe79 	bl	8006316 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	3318      	adds	r3, #24
 8006628:	4618      	mov	r0, r3
 800662a:	f7ff fe74 	bl	8006316 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006632:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	f1c3 0207 	rsb	r2, r3, #7
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006642:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	2200      	movs	r2, #0
 8006648:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	68f9      	ldr	r1, [r7, #12]
 8006656:	69b8      	ldr	r0, [r7, #24]
 8006658:	f000 fc92 	bl	8006f80 <pxPortInitialiseStack>
 800665c:	4602      	mov	r2, r0
 800665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006660:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800666e:	bf00      	nop
 8006670:	3720      	adds	r7, #32
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006680:	f000 fda4 	bl	80071cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006684:	4b2a      	ldr	r3, [pc, #168]	; (8006730 <prvAddNewTaskToReadyList+0xb8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	4a29      	ldr	r2, [pc, #164]	; (8006730 <prvAddNewTaskToReadyList+0xb8>)
 800668c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800668e:	4b29      	ldr	r3, [pc, #164]	; (8006734 <prvAddNewTaskToReadyList+0xbc>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d109      	bne.n	80066aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006696:	4a27      	ldr	r2, [pc, #156]	; (8006734 <prvAddNewTaskToReadyList+0xbc>)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800669c:	4b24      	ldr	r3, [pc, #144]	; (8006730 <prvAddNewTaskToReadyList+0xb8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d110      	bne.n	80066c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066a4:	f000 fb46 	bl	8006d34 <prvInitialiseTaskLists>
 80066a8:	e00d      	b.n	80066c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066aa:	4b23      	ldr	r3, [pc, #140]	; (8006738 <prvAddNewTaskToReadyList+0xc0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066b2:	4b20      	ldr	r3, [pc, #128]	; (8006734 <prvAddNewTaskToReadyList+0xbc>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	429a      	cmp	r2, r3
 80066be:	d802      	bhi.n	80066c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066c0:	4a1c      	ldr	r2, [pc, #112]	; (8006734 <prvAddNewTaskToReadyList+0xbc>)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066c6:	4b1d      	ldr	r3, [pc, #116]	; (800673c <prvAddNewTaskToReadyList+0xc4>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3301      	adds	r3, #1
 80066cc:	4a1b      	ldr	r2, [pc, #108]	; (800673c <prvAddNewTaskToReadyList+0xc4>)
 80066ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	2201      	movs	r2, #1
 80066d6:	409a      	lsls	r2, r3
 80066d8:	4b19      	ldr	r3, [pc, #100]	; (8006740 <prvAddNewTaskToReadyList+0xc8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4313      	orrs	r3, r2
 80066de:	4a18      	ldr	r2, [pc, #96]	; (8006740 <prvAddNewTaskToReadyList+0xc8>)
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4a15      	ldr	r2, [pc, #84]	; (8006744 <prvAddNewTaskToReadyList+0xcc>)
 80066f0:	441a      	add	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4619      	mov	r1, r3
 80066f8:	4610      	mov	r0, r2
 80066fa:	f7ff fe19 	bl	8006330 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066fe:	f000 fd93 	bl	8007228 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006702:	4b0d      	ldr	r3, [pc, #52]	; (8006738 <prvAddNewTaskToReadyList+0xc0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00e      	beq.n	8006728 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800670a:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <prvAddNewTaskToReadyList+0xbc>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	429a      	cmp	r2, r3
 8006716:	d207      	bcs.n	8006728 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006718:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <prvAddNewTaskToReadyList+0xd0>)
 800671a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006728:	bf00      	nop
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	200003e0 	.word	0x200003e0
 8006734:	200002e0 	.word	0x200002e0
 8006738:	200003ec 	.word	0x200003ec
 800673c:	200003fc 	.word	0x200003fc
 8006740:	200003e8 	.word	0x200003e8
 8006744:	200002e4 	.word	0x200002e4
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08a      	sub	sp, #40	; 0x28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006756:	2300      	movs	r3, #0
 8006758:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d109      	bne.n	8006774 <vTaskDelayUntil+0x28>
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	e7fe      	b.n	8006772 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d109      	bne.n	800678e <vTaskDelayUntil+0x42>
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	613b      	str	r3, [r7, #16]
 800678c:	e7fe      	b.n	800678c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800678e:	4b29      	ldr	r3, [pc, #164]	; (8006834 <vTaskDelayUntil+0xe8>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <vTaskDelayUntil+0x5e>
 8006796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	e7fe      	b.n	80067a8 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80067aa:	f000 f8db 	bl	8006964 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80067ae:	4b22      	ldr	r3, [pc, #136]	; (8006838 <vTaskDelayUntil+0xec>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	4413      	add	r3, r2
 80067bc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6a3a      	ldr	r2, [r7, #32]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d20b      	bcs.n	80067e0 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d211      	bcs.n	80067f6 <vTaskDelayUntil+0xaa>
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d90d      	bls.n	80067f6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80067da:	2301      	movs	r3, #1
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
 80067de:	e00a      	b.n	80067f6 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	69fa      	ldr	r2, [r7, #28]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d303      	bcc.n	80067f2 <vTaskDelayUntil+0xa6>
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d901      	bls.n	80067f6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80067f2:	2301      	movs	r3, #1
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d006      	beq.n	8006810 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006802:	69fa      	ldr	r2, [r7, #28]
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2100      	movs	r1, #0
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fb52 	bl	8006eb4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006810:	f000 f8b6 	bl	8006980 <xTaskResumeAll>
 8006814:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d107      	bne.n	800682c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800681c:	4b07      	ldr	r3, [pc, #28]	; (800683c <vTaskDelayUntil+0xf0>)
 800681e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800682c:	bf00      	nop
 800682e:	3728      	adds	r7, #40	; 0x28
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20000408 	.word	0x20000408
 8006838:	200003e4 	.word	0x200003e4
 800683c:	e000ed04 	.word	0xe000ed04

08006840 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d016      	beq.n	8006880 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006852:	4b13      	ldr	r3, [pc, #76]	; (80068a0 <vTaskDelay+0x60>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <vTaskDelay+0x2e>
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	60bb      	str	r3, [r7, #8]
 800686c:	e7fe      	b.n	800686c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800686e:	f000 f879 	bl	8006964 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006872:	2100      	movs	r1, #0
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fb1d 	bl	8006eb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800687a:	f000 f881 	bl	8006980 <xTaskResumeAll>
 800687e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d107      	bne.n	8006896 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006886:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <vTaskDelay+0x64>)
 8006888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006896:	bf00      	nop
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20000408 	.word	0x20000408
 80068a4:	e000ed04 	.word	0xe000ed04

080068a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08a      	sub	sp, #40	; 0x28
 80068ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068b2:	2300      	movs	r3, #0
 80068b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068b6:	463a      	mov	r2, r7
 80068b8:	1d39      	adds	r1, r7, #4
 80068ba:	f107 0308 	add.w	r3, r7, #8
 80068be:	4618      	mov	r0, r3
 80068c0:	f7f9 ff04 	bl	80006cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	9202      	str	r2, [sp, #8]
 80068cc:	9301      	str	r3, [sp, #4]
 80068ce:	2300      	movs	r3, #0
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	2300      	movs	r3, #0
 80068d4:	460a      	mov	r2, r1
 80068d6:	491d      	ldr	r1, [pc, #116]	; (800694c <vTaskStartScheduler+0xa4>)
 80068d8:	481d      	ldr	r0, [pc, #116]	; (8006950 <vTaskStartScheduler+0xa8>)
 80068da:	f7ff fdb0 	bl	800643e <xTaskCreateStatic>
 80068de:	4602      	mov	r2, r0
 80068e0:	4b1c      	ldr	r3, [pc, #112]	; (8006954 <vTaskStartScheduler+0xac>)
 80068e2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068e4:	4b1b      	ldr	r3, [pc, #108]	; (8006954 <vTaskStartScheduler+0xac>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d002      	beq.n	80068f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068ec:	2301      	movs	r3, #1
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	e001      	b.n	80068f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d115      	bne.n	8006928 <vTaskStartScheduler+0x80>
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800690e:	4b12      	ldr	r3, [pc, #72]	; (8006958 <vTaskStartScheduler+0xb0>)
 8006910:	f04f 32ff 	mov.w	r2, #4294967295
 8006914:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006916:	4b11      	ldr	r3, [pc, #68]	; (800695c <vTaskStartScheduler+0xb4>)
 8006918:	2201      	movs	r2, #1
 800691a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800691c:	4b10      	ldr	r3, [pc, #64]	; (8006960 <vTaskStartScheduler+0xb8>)
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006922:	f000 fbb5 	bl	8007090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006926:	e00d      	b.n	8006944 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692e:	d109      	bne.n	8006944 <vTaskStartScheduler+0x9c>
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	e7fe      	b.n	8006942 <vTaskStartScheduler+0x9a>
}
 8006944:	bf00      	nop
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	0800784c 	.word	0x0800784c
 8006950:	08006d05 	.word	0x08006d05
 8006954:	20000404 	.word	0x20000404
 8006958:	20000400 	.word	0x20000400
 800695c:	200003ec 	.word	0x200003ec
 8006960:	200003e4 	.word	0x200003e4

08006964 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006968:	4b04      	ldr	r3, [pc, #16]	; (800697c <vTaskSuspendAll+0x18>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3301      	adds	r3, #1
 800696e:	4a03      	ldr	r2, [pc, #12]	; (800697c <vTaskSuspendAll+0x18>)
 8006970:	6013      	str	r3, [r2, #0]
}
 8006972:	bf00      	nop
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	20000408 	.word	0x20000408

08006980 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800698a:	2300      	movs	r3, #0
 800698c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800698e:	4b41      	ldr	r3, [pc, #260]	; (8006a94 <xTaskResumeAll+0x114>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d109      	bne.n	80069aa <xTaskResumeAll+0x2a>
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	e7fe      	b.n	80069a8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069aa:	f000 fc0f 	bl	80071cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069ae:	4b39      	ldr	r3, [pc, #228]	; (8006a94 <xTaskResumeAll+0x114>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	4a37      	ldr	r2, [pc, #220]	; (8006a94 <xTaskResumeAll+0x114>)
 80069b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069b8:	4b36      	ldr	r3, [pc, #216]	; (8006a94 <xTaskResumeAll+0x114>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d161      	bne.n	8006a84 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069c0:	4b35      	ldr	r3, [pc, #212]	; (8006a98 <xTaskResumeAll+0x118>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d05d      	beq.n	8006a84 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069c8:	e02e      	b.n	8006a28 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80069ca:	4b34      	ldr	r3, [pc, #208]	; (8006a9c <xTaskResumeAll+0x11c>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3318      	adds	r3, #24
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff fd07 	bl	80063ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3304      	adds	r3, #4
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff fd02 	bl	80063ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	2201      	movs	r2, #1
 80069ec:	409a      	lsls	r2, r3
 80069ee:	4b2c      	ldr	r3, [pc, #176]	; (8006aa0 <xTaskResumeAll+0x120>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	4a2a      	ldr	r2, [pc, #168]	; (8006aa0 <xTaskResumeAll+0x120>)
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fc:	4613      	mov	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4a27      	ldr	r2, [pc, #156]	; (8006aa4 <xTaskResumeAll+0x124>)
 8006a06:	441a      	add	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f7ff fc8e 	bl	8006330 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a18:	4b23      	ldr	r3, [pc, #140]	; (8006aa8 <xTaskResumeAll+0x128>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d302      	bcc.n	8006a28 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006a22:	4b22      	ldr	r3, [pc, #136]	; (8006aac <xTaskResumeAll+0x12c>)
 8006a24:	2201      	movs	r2, #1
 8006a26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a28:	4b1c      	ldr	r3, [pc, #112]	; (8006a9c <xTaskResumeAll+0x11c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1cc      	bne.n	80069ca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a36:	f000 fa17 	bl	8006e68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a3a:	4b1d      	ldr	r3, [pc, #116]	; (8006ab0 <xTaskResumeAll+0x130>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d010      	beq.n	8006a68 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a46:	f000 f847 	bl	8006ad8 <xTaskIncrementTick>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006a50:	4b16      	ldr	r3, [pc, #88]	; (8006aac <xTaskResumeAll+0x12c>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f1      	bne.n	8006a46 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006a62:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <xTaskResumeAll+0x130>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a68:	4b10      	ldr	r3, [pc, #64]	; (8006aac <xTaskResumeAll+0x12c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d009      	beq.n	8006a84 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a70:	2301      	movs	r3, #1
 8006a72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a74:	4b0f      	ldr	r3, [pc, #60]	; (8006ab4 <xTaskResumeAll+0x134>)
 8006a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a84:	f000 fbd0 	bl	8007228 <vPortExitCritical>

	return xAlreadyYielded;
 8006a88:	68bb      	ldr	r3, [r7, #8]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000408 	.word	0x20000408
 8006a98:	200003e0 	.word	0x200003e0
 8006a9c:	200003a0 	.word	0x200003a0
 8006aa0:	200003e8 	.word	0x200003e8
 8006aa4:	200002e4 	.word	0x200002e4
 8006aa8:	200002e0 	.word	0x200002e0
 8006aac:	200003f4 	.word	0x200003f4
 8006ab0:	200003f0 	.word	0x200003f0
 8006ab4:	e000ed04 	.word	0xe000ed04

08006ab8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006abe:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <xTaskGetTickCount+0x1c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ac4:	687b      	ldr	r3, [r7, #4]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	200003e4 	.word	0x200003e4

08006ad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ae2:	4b50      	ldr	r3, [pc, #320]	; (8006c24 <xTaskIncrementTick+0x14c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f040 808c 	bne.w	8006c04 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006aec:	4b4e      	ldr	r3, [pc, #312]	; (8006c28 <xTaskIncrementTick+0x150>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3301      	adds	r3, #1
 8006af2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006af4:	4a4c      	ldr	r2, [pc, #304]	; (8006c28 <xTaskIncrementTick+0x150>)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d11f      	bne.n	8006b40 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b00:	4b4a      	ldr	r3, [pc, #296]	; (8006c2c <xTaskIncrementTick+0x154>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d009      	beq.n	8006b1e <xTaskIncrementTick+0x46>
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	e7fe      	b.n	8006b1c <xTaskIncrementTick+0x44>
 8006b1e:	4b43      	ldr	r3, [pc, #268]	; (8006c2c <xTaskIncrementTick+0x154>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	4b42      	ldr	r3, [pc, #264]	; (8006c30 <xTaskIncrementTick+0x158>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a40      	ldr	r2, [pc, #256]	; (8006c2c <xTaskIncrementTick+0x154>)
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	4a40      	ldr	r2, [pc, #256]	; (8006c30 <xTaskIncrementTick+0x158>)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	4b40      	ldr	r3, [pc, #256]	; (8006c34 <xTaskIncrementTick+0x15c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3301      	adds	r3, #1
 8006b38:	4a3e      	ldr	r2, [pc, #248]	; (8006c34 <xTaskIncrementTick+0x15c>)
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	f000 f994 	bl	8006e68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b40:	4b3d      	ldr	r3, [pc, #244]	; (8006c38 <xTaskIncrementTick+0x160>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d34d      	bcc.n	8006be6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b4a:	4b38      	ldr	r3, [pc, #224]	; (8006c2c <xTaskIncrementTick+0x154>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <xTaskIncrementTick+0x80>
 8006b54:	2301      	movs	r3, #1
 8006b56:	e000      	b.n	8006b5a <xTaskIncrementTick+0x82>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d004      	beq.n	8006b68 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b5e:	4b36      	ldr	r3, [pc, #216]	; (8006c38 <xTaskIncrementTick+0x160>)
 8006b60:	f04f 32ff 	mov.w	r2, #4294967295
 8006b64:	601a      	str	r2, [r3, #0]
					break;
 8006b66:	e03e      	b.n	8006be6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b68:	4b30      	ldr	r3, [pc, #192]	; (8006c2c <xTaskIncrementTick+0x154>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d203      	bcs.n	8006b88 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b80:	4a2d      	ldr	r2, [pc, #180]	; (8006c38 <xTaskIncrementTick+0x160>)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6013      	str	r3, [r2, #0]
						break;
 8006b86:	e02e      	b.n	8006be6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff fc2c 	bl	80063ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d004      	beq.n	8006ba4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	3318      	adds	r3, #24
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fc23 	bl	80063ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	2201      	movs	r2, #1
 8006baa:	409a      	lsls	r2, r3
 8006bac:	4b23      	ldr	r3, [pc, #140]	; (8006c3c <xTaskIncrementTick+0x164>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	4a22      	ldr	r2, [pc, #136]	; (8006c3c <xTaskIncrementTick+0x164>)
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4a1f      	ldr	r2, [pc, #124]	; (8006c40 <xTaskIncrementTick+0x168>)
 8006bc4:	441a      	add	r2, r3
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	3304      	adds	r3, #4
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4610      	mov	r0, r2
 8006bce:	f7ff fbaf 	bl	8006330 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd6:	4b1b      	ldr	r3, [pc, #108]	; (8006c44 <xTaskIncrementTick+0x16c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d3b4      	bcc.n	8006b4a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006be0:	2301      	movs	r3, #1
 8006be2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006be4:	e7b1      	b.n	8006b4a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006be6:	4b17      	ldr	r3, [pc, #92]	; (8006c44 <xTaskIncrementTick+0x16c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bec:	4914      	ldr	r1, [pc, #80]	; (8006c40 <xTaskIncrementTick+0x168>)
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d907      	bls.n	8006c0e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	e004      	b.n	8006c0e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006c04:	4b10      	ldr	r3, [pc, #64]	; (8006c48 <xTaskIncrementTick+0x170>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	4a0f      	ldr	r2, [pc, #60]	; (8006c48 <xTaskIncrementTick+0x170>)
 8006c0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006c0e:	4b0f      	ldr	r3, [pc, #60]	; (8006c4c <xTaskIncrementTick+0x174>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006c16:	2301      	movs	r3, #1
 8006c18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006c1a:	697b      	ldr	r3, [r7, #20]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20000408 	.word	0x20000408
 8006c28:	200003e4 	.word	0x200003e4
 8006c2c:	20000398 	.word	0x20000398
 8006c30:	2000039c 	.word	0x2000039c
 8006c34:	200003f8 	.word	0x200003f8
 8006c38:	20000400 	.word	0x20000400
 8006c3c:	200003e8 	.word	0x200003e8
 8006c40:	200002e4 	.word	0x200002e4
 8006c44:	200002e0 	.word	0x200002e0
 8006c48:	200003f0 	.word	0x200003f0
 8006c4c:	200003f4 	.word	0x200003f4

08006c50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c56:	4b26      	ldr	r3, [pc, #152]	; (8006cf0 <vTaskSwitchContext+0xa0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c5e:	4b25      	ldr	r3, [pc, #148]	; (8006cf4 <vTaskSwitchContext+0xa4>)
 8006c60:	2201      	movs	r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c64:	e03e      	b.n	8006ce4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006c66:	4b23      	ldr	r3, [pc, #140]	; (8006cf4 <vTaskSwitchContext+0xa4>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c6c:	4b22      	ldr	r3, [pc, #136]	; (8006cf8 <vTaskSwitchContext+0xa8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	fab3 f383 	clz	r3, r3
 8006c78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c7a:	7afb      	ldrb	r3, [r7, #11]
 8006c7c:	f1c3 031f 	rsb	r3, r3, #31
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	491e      	ldr	r1, [pc, #120]	; (8006cfc <vTaskSwitchContext+0xac>)
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	440b      	add	r3, r1
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d109      	bne.n	8006caa <vTaskSwitchContext+0x5a>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	607b      	str	r3, [r7, #4]
 8006ca8:	e7fe      	b.n	8006ca8 <vTaskSwitchContext+0x58>
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	4613      	mov	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4a11      	ldr	r2, [pc, #68]	; (8006cfc <vTaskSwitchContext+0xac>)
 8006cb6:	4413      	add	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	605a      	str	r2, [r3, #4]
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	3308      	adds	r3, #8
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d104      	bne.n	8006cda <vTaskSwitchContext+0x8a>
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	605a      	str	r2, [r3, #4]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	4a07      	ldr	r2, [pc, #28]	; (8006d00 <vTaskSwitchContext+0xb0>)
 8006ce2:	6013      	str	r3, [r2, #0]
}
 8006ce4:	bf00      	nop
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	20000408 	.word	0x20000408
 8006cf4:	200003f4 	.word	0x200003f4
 8006cf8:	200003e8 	.word	0x200003e8
 8006cfc:	200002e4 	.word	0x200002e4
 8006d00:	200002e0 	.word	0x200002e0

08006d04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d0c:	f000 f852 	bl	8006db4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d10:	4b06      	ldr	r3, [pc, #24]	; (8006d2c <prvIdleTask+0x28>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d9f9      	bls.n	8006d0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d18:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <prvIdleTask+0x2c>)
 8006d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d28:	e7f0      	b.n	8006d0c <prvIdleTask+0x8>
 8006d2a:	bf00      	nop
 8006d2c:	200002e4 	.word	0x200002e4
 8006d30:	e000ed04 	.word	0xe000ed04

08006d34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	607b      	str	r3, [r7, #4]
 8006d3e:	e00c      	b.n	8006d5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4a12      	ldr	r2, [pc, #72]	; (8006d94 <prvInitialiseTaskLists+0x60>)
 8006d4c:	4413      	add	r3, r2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff fac1 	bl	80062d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3301      	adds	r3, #1
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b06      	cmp	r3, #6
 8006d5e:	d9ef      	bls.n	8006d40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d60:	480d      	ldr	r0, [pc, #52]	; (8006d98 <prvInitialiseTaskLists+0x64>)
 8006d62:	f7ff fab8 	bl	80062d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d66:	480d      	ldr	r0, [pc, #52]	; (8006d9c <prvInitialiseTaskLists+0x68>)
 8006d68:	f7ff fab5 	bl	80062d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d6c:	480c      	ldr	r0, [pc, #48]	; (8006da0 <prvInitialiseTaskLists+0x6c>)
 8006d6e:	f7ff fab2 	bl	80062d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d72:	480c      	ldr	r0, [pc, #48]	; (8006da4 <prvInitialiseTaskLists+0x70>)
 8006d74:	f7ff faaf 	bl	80062d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d78:	480b      	ldr	r0, [pc, #44]	; (8006da8 <prvInitialiseTaskLists+0x74>)
 8006d7a:	f7ff faac 	bl	80062d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d7e:	4b0b      	ldr	r3, [pc, #44]	; (8006dac <prvInitialiseTaskLists+0x78>)
 8006d80:	4a05      	ldr	r2, [pc, #20]	; (8006d98 <prvInitialiseTaskLists+0x64>)
 8006d82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d84:	4b0a      	ldr	r3, [pc, #40]	; (8006db0 <prvInitialiseTaskLists+0x7c>)
 8006d86:	4a05      	ldr	r2, [pc, #20]	; (8006d9c <prvInitialiseTaskLists+0x68>)
 8006d88:	601a      	str	r2, [r3, #0]
}
 8006d8a:	bf00      	nop
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	200002e4 	.word	0x200002e4
 8006d98:	20000370 	.word	0x20000370
 8006d9c:	20000384 	.word	0x20000384
 8006da0:	200003a0 	.word	0x200003a0
 8006da4:	200003b4 	.word	0x200003b4
 8006da8:	200003cc 	.word	0x200003cc
 8006dac:	20000398 	.word	0x20000398
 8006db0:	2000039c 	.word	0x2000039c

08006db4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dba:	e019      	b.n	8006df0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dbc:	f000 fa06 	bl	80071cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006dc0:	4b0f      	ldr	r3, [pc, #60]	; (8006e00 <prvCheckTasksWaitingTermination+0x4c>)
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff fb0c 	bl	80063ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <prvCheckTasksWaitingTermination+0x50>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	4a0a      	ldr	r2, [pc, #40]	; (8006e04 <prvCheckTasksWaitingTermination+0x50>)
 8006dda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <prvCheckTasksWaitingTermination+0x54>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	4a09      	ldr	r2, [pc, #36]	; (8006e08 <prvCheckTasksWaitingTermination+0x54>)
 8006de4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006de6:	f000 fa1f 	bl	8007228 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f80e 	bl	8006e0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <prvCheckTasksWaitingTermination+0x54>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e1      	bne.n	8006dbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	200003b4 	.word	0x200003b4
 8006e04:	200003e0 	.word	0x200003e0
 8006e08:	200003c8 	.word	0x200003c8

08006e0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d108      	bne.n	8006e30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fb70 	bl	8007508 <vPortFree>
				vPortFree( pxTCB );
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fb6d 	bl	8007508 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e2e:	e017      	b.n	8006e60 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d103      	bne.n	8006e42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fb64 	bl	8007508 <vPortFree>
	}
 8006e40:	e00e      	b.n	8006e60 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d009      	beq.n	8006e60 <prvDeleteTCB+0x54>
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	e7fe      	b.n	8006e5e <prvDeleteTCB+0x52>
	}
 8006e60:	bf00      	nop
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e6e:	4b0f      	ldr	r3, [pc, #60]	; (8006eac <prvResetNextTaskUnblockTime+0x44>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <prvResetNextTaskUnblockTime+0x14>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <prvResetNextTaskUnblockTime+0x16>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d004      	beq.n	8006e8c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e82:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <prvResetNextTaskUnblockTime+0x48>)
 8006e84:	f04f 32ff 	mov.w	r2, #4294967295
 8006e88:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e8a:	e008      	b.n	8006e9e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e8c:	4b07      	ldr	r3, [pc, #28]	; (8006eac <prvResetNextTaskUnblockTime+0x44>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	4a05      	ldr	r2, [pc, #20]	; (8006eb0 <prvResetNextTaskUnblockTime+0x48>)
 8006e9c:	6013      	str	r3, [r2, #0]
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	20000398 	.word	0x20000398
 8006eb0:	20000400 	.word	0x20000400

08006eb4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ebe:	4b29      	ldr	r3, [pc, #164]	; (8006f64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ec4:	4b28      	ldr	r3, [pc, #160]	; (8006f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff fa8d 	bl	80063ea <uxListRemove>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10b      	bne.n	8006eee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006ed6:	4b24      	ldr	r3, [pc, #144]	; (8006f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	2201      	movs	r2, #1
 8006ede:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee2:	43da      	mvns	r2, r3
 8006ee4:	4b21      	ldr	r3, [pc, #132]	; (8006f6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	4a20      	ldr	r2, [pc, #128]	; (8006f6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006eec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef4:	d10a      	bne.n	8006f0c <prvAddCurrentTaskToDelayedList+0x58>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006efc:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3304      	adds	r3, #4
 8006f02:	4619      	mov	r1, r3
 8006f04:	481a      	ldr	r0, [pc, #104]	; (8006f70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f06:	f7ff fa13 	bl	8006330 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f0a:	e026      	b.n	8006f5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4413      	add	r3, r2
 8006f12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f14:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d209      	bcs.n	8006f38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f24:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4610      	mov	r0, r2
 8006f32:	f7ff fa21 	bl	8006378 <vListInsert>
}
 8006f36:	e010      	b.n	8006f5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f38:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3304      	adds	r3, #4
 8006f42:	4619      	mov	r1, r3
 8006f44:	4610      	mov	r0, r2
 8006f46:	f7ff fa17 	bl	8006378 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d202      	bcs.n	8006f5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f54:	4a09      	ldr	r2, [pc, #36]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	6013      	str	r3, [r2, #0]
}
 8006f5a:	bf00      	nop
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	200003e4 	.word	0x200003e4
 8006f68:	200002e0 	.word	0x200002e0
 8006f6c:	200003e8 	.word	0x200003e8
 8006f70:	200003cc 	.word	0x200003cc
 8006f74:	2000039c 	.word	0x2000039c
 8006f78:	20000398 	.word	0x20000398
 8006f7c:	20000400 	.word	0x20000400

08006f80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	3b04      	subs	r3, #4
 8006f90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3b04      	subs	r3, #4
 8006f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	f023 0201 	bic.w	r2, r3, #1
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3b04      	subs	r3, #4
 8006fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fb0:	4a0c      	ldr	r2, [pc, #48]	; (8006fe4 <pxPortInitialiseStack+0x64>)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3b14      	subs	r3, #20
 8006fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3b04      	subs	r3, #4
 8006fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f06f 0202 	mvn.w	r2, #2
 8006fce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3b20      	subs	r3, #32
 8006fd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	08006fe9 	.word	0x08006fe9

08006fe8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ff2:	4b11      	ldr	r3, [pc, #68]	; (8007038 <prvTaskExitError+0x50>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffa:	d009      	beq.n	8007010 <prvTaskExitError+0x28>
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	e7fe      	b.n	800700e <prvTaskExitError+0x26>
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007022:	bf00      	nop
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0fc      	beq.n	8007024 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800702a:	bf00      	nop
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	2000000c 	.word	0x2000000c
 800703c:	00000000 	.word	0x00000000

08007040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007040:	4b07      	ldr	r3, [pc, #28]	; (8007060 <pxCurrentTCBConst2>)
 8007042:	6819      	ldr	r1, [r3, #0]
 8007044:	6808      	ldr	r0, [r1, #0]
 8007046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704a:	f380 8809 	msr	PSP, r0
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f04f 0000 	mov.w	r0, #0
 8007056:	f380 8811 	msr	BASEPRI, r0
 800705a:	4770      	bx	lr
 800705c:	f3af 8000 	nop.w

08007060 <pxCurrentTCBConst2>:
 8007060:	200002e0 	.word	0x200002e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop

08007068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007068:	4808      	ldr	r0, [pc, #32]	; (800708c <prvPortStartFirstTask+0x24>)
 800706a:	6800      	ldr	r0, [r0, #0]
 800706c:	6800      	ldr	r0, [r0, #0]
 800706e:	f380 8808 	msr	MSP, r0
 8007072:	f04f 0000 	mov.w	r0, #0
 8007076:	f380 8814 	msr	CONTROL, r0
 800707a:	b662      	cpsie	i
 800707c:	b661      	cpsie	f
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	df00      	svc	0
 8007088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800708a:	bf00      	nop
 800708c:	e000ed08 	.word	0xe000ed08

08007090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007096:	4b44      	ldr	r3, [pc, #272]	; (80071a8 <xPortStartScheduler+0x118>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a44      	ldr	r2, [pc, #272]	; (80071ac <xPortStartScheduler+0x11c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d109      	bne.n	80070b4 <xPortStartScheduler+0x24>
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	e7fe      	b.n	80070b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070b4:	4b3c      	ldr	r3, [pc, #240]	; (80071a8 <xPortStartScheduler+0x118>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a3d      	ldr	r2, [pc, #244]	; (80071b0 <xPortStartScheduler+0x120>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d109      	bne.n	80070d2 <xPortStartScheduler+0x42>
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	e7fe      	b.n	80070d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070d2:	4b38      	ldr	r3, [pc, #224]	; (80071b4 <xPortStartScheduler+0x124>)
 80070d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	22ff      	movs	r2, #255	; 0xff
 80070e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	4b30      	ldr	r3, [pc, #192]	; (80071b8 <xPortStartScheduler+0x128>)
 80070f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070fa:	4b30      	ldr	r3, [pc, #192]	; (80071bc <xPortStartScheduler+0x12c>)
 80070fc:	2207      	movs	r2, #7
 80070fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007100:	e009      	b.n	8007116 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007102:	4b2e      	ldr	r3, [pc, #184]	; (80071bc <xPortStartScheduler+0x12c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3b01      	subs	r3, #1
 8007108:	4a2c      	ldr	r2, [pc, #176]	; (80071bc <xPortStartScheduler+0x12c>)
 800710a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	b2db      	uxtb	r3, r3
 8007114:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007116:	78fb      	ldrb	r3, [r7, #3]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711e:	2b80      	cmp	r3, #128	; 0x80
 8007120:	d0ef      	beq.n	8007102 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007122:	4b26      	ldr	r3, [pc, #152]	; (80071bc <xPortStartScheduler+0x12c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f1c3 0307 	rsb	r3, r3, #7
 800712a:	2b04      	cmp	r3, #4
 800712c:	d009      	beq.n	8007142 <xPortStartScheduler+0xb2>
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	60bb      	str	r3, [r7, #8]
 8007140:	e7fe      	b.n	8007140 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007142:	4b1e      	ldr	r3, [pc, #120]	; (80071bc <xPortStartScheduler+0x12c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	021b      	lsls	r3, r3, #8
 8007148:	4a1c      	ldr	r2, [pc, #112]	; (80071bc <xPortStartScheduler+0x12c>)
 800714a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800714c:	4b1b      	ldr	r3, [pc, #108]	; (80071bc <xPortStartScheduler+0x12c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007154:	4a19      	ldr	r2, [pc, #100]	; (80071bc <xPortStartScheduler+0x12c>)
 8007156:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	b2da      	uxtb	r2, r3
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007160:	4b17      	ldr	r3, [pc, #92]	; (80071c0 <xPortStartScheduler+0x130>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a16      	ldr	r2, [pc, #88]	; (80071c0 <xPortStartScheduler+0x130>)
 8007166:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800716a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800716c:	4b14      	ldr	r3, [pc, #80]	; (80071c0 <xPortStartScheduler+0x130>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a13      	ldr	r2, [pc, #76]	; (80071c0 <xPortStartScheduler+0x130>)
 8007172:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007176:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007178:	f000 f8d6 	bl	8007328 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800717c:	4b11      	ldr	r3, [pc, #68]	; (80071c4 <xPortStartScheduler+0x134>)
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007182:	f000 f8f5 	bl	8007370 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007186:	4b10      	ldr	r3, [pc, #64]	; (80071c8 <xPortStartScheduler+0x138>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a0f      	ldr	r2, [pc, #60]	; (80071c8 <xPortStartScheduler+0x138>)
 800718c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007190:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007192:	f7ff ff69 	bl	8007068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007196:	f7ff fd5b 	bl	8006c50 <vTaskSwitchContext>
	prvTaskExitError();
 800719a:	f7ff ff25 	bl	8006fe8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	e000ed00 	.word	0xe000ed00
 80071ac:	410fc271 	.word	0x410fc271
 80071b0:	410fc270 	.word	0x410fc270
 80071b4:	e000e400 	.word	0xe000e400
 80071b8:	2000040c 	.word	0x2000040c
 80071bc:	20000410 	.word	0x20000410
 80071c0:	e000ed20 	.word	0xe000ed20
 80071c4:	2000000c 	.word	0x2000000c
 80071c8:	e000ef34 	.word	0xe000ef34

080071cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071e4:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <vPortEnterCritical+0x54>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3301      	adds	r3, #1
 80071ea:	4a0d      	ldr	r2, [pc, #52]	; (8007220 <vPortEnterCritical+0x54>)
 80071ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071ee:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <vPortEnterCritical+0x54>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d10e      	bne.n	8007214 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071f6:	4b0b      	ldr	r3, [pc, #44]	; (8007224 <vPortEnterCritical+0x58>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d009      	beq.n	8007214 <vPortEnterCritical+0x48>
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	603b      	str	r3, [r7, #0]
 8007212:	e7fe      	b.n	8007212 <vPortEnterCritical+0x46>
	}
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	2000000c 	.word	0x2000000c
 8007224:	e000ed04 	.word	0xe000ed04

08007228 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800722e:	4b11      	ldr	r3, [pc, #68]	; (8007274 <vPortExitCritical+0x4c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d109      	bne.n	800724a <vPortExitCritical+0x22>
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	607b      	str	r3, [r7, #4]
 8007248:	e7fe      	b.n	8007248 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800724a:	4b0a      	ldr	r3, [pc, #40]	; (8007274 <vPortExitCritical+0x4c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3b01      	subs	r3, #1
 8007250:	4a08      	ldr	r2, [pc, #32]	; (8007274 <vPortExitCritical+0x4c>)
 8007252:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007254:	4b07      	ldr	r3, [pc, #28]	; (8007274 <vPortExitCritical+0x4c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d104      	bne.n	8007266 <vPortExitCritical+0x3e>
 800725c:	2300      	movs	r3, #0
 800725e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	2000000c 	.word	0x2000000c
	...

08007280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007280:	f3ef 8009 	mrs	r0, PSP
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <pxCurrentTCBConst>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	f01e 0f10 	tst.w	lr, #16
 8007290:	bf08      	it	eq
 8007292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729a:	6010      	str	r0, [r2, #0]
 800729c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072a4:	f380 8811 	msr	BASEPRI, r0
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f7ff fcce 	bl	8006c50 <vTaskSwitchContext>
 80072b4:	f04f 0000 	mov.w	r0, #0
 80072b8:	f380 8811 	msr	BASEPRI, r0
 80072bc:	bc09      	pop	{r0, r3}
 80072be:	6819      	ldr	r1, [r3, #0]
 80072c0:	6808      	ldr	r0, [r1, #0]
 80072c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c6:	f01e 0f10 	tst.w	lr, #16
 80072ca:	bf08      	it	eq
 80072cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072d0:	f380 8809 	msr	PSP, r0
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	f3af 8000 	nop.w

080072e0 <pxCurrentTCBConst>:
 80072e0:	200002e0 	.word	0x200002e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop

080072e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007300:	f7ff fbea 	bl	8006ad8 <xTaskIncrementTick>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800730a:	4b06      	ldr	r3, [pc, #24]	; (8007324 <SysTick_Handler+0x3c>)
 800730c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	2300      	movs	r3, #0
 8007314:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800731c:	bf00      	nop
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	e000ed04 	.word	0xe000ed04

08007328 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007328:	b480      	push	{r7}
 800732a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800732c:	4b0b      	ldr	r3, [pc, #44]	; (800735c <vPortSetupTimerInterrupt+0x34>)
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007332:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <vPortSetupTimerInterrupt+0x38>)
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <vPortSetupTimerInterrupt+0x3c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a0a      	ldr	r2, [pc, #40]	; (8007368 <vPortSetupTimerInterrupt+0x40>)
 800733e:	fba2 2303 	umull	r2, r3, r2, r3
 8007342:	0b9b      	lsrs	r3, r3, #14
 8007344:	4a09      	ldr	r2, [pc, #36]	; (800736c <vPortSetupTimerInterrupt+0x44>)
 8007346:	3b01      	subs	r3, #1
 8007348:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800734a:	4b04      	ldr	r3, [pc, #16]	; (800735c <vPortSetupTimerInterrupt+0x34>)
 800734c:	2207      	movs	r2, #7
 800734e:	601a      	str	r2, [r3, #0]
}
 8007350:	bf00      	nop
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	e000e010 	.word	0xe000e010
 8007360:	e000e018 	.word	0xe000e018
 8007364:	20000000 	.word	0x20000000
 8007368:	d1b71759 	.word	0xd1b71759
 800736c:	e000e014 	.word	0xe000e014

08007370 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007370:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007380 <vPortEnableVFP+0x10>
 8007374:	6801      	ldr	r1, [r0, #0]
 8007376:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800737a:	6001      	str	r1, [r0, #0]
 800737c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800737e:	bf00      	nop
 8007380:	e000ed88 	.word	0xe000ed88

08007384 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08a      	sub	sp, #40	; 0x28
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800738c:	2300      	movs	r3, #0
 800738e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007390:	f7ff fae8 	bl	8006964 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007394:	4b57      	ldr	r3, [pc, #348]	; (80074f4 <pvPortMalloc+0x170>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800739c:	f000 f90c 	bl	80075b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073a0:	4b55      	ldr	r3, [pc, #340]	; (80074f8 <pvPortMalloc+0x174>)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4013      	ands	r3, r2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f040 808c 	bne.w	80074c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d01c      	beq.n	80073ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80073b4:	2208      	movs	r2, #8
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4413      	add	r3, r2
 80073ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f003 0307 	and.w	r3, r3, #7
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d013      	beq.n	80073ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f023 0307 	bic.w	r3, r3, #7
 80073cc:	3308      	adds	r3, #8
 80073ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d009      	beq.n	80073ee <pvPortMalloc+0x6a>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	e7fe      	b.n	80073ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d068      	beq.n	80074c6 <pvPortMalloc+0x142>
 80073f4:	4b41      	ldr	r3, [pc, #260]	; (80074fc <pvPortMalloc+0x178>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d863      	bhi.n	80074c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073fe:	4b40      	ldr	r3, [pc, #256]	; (8007500 <pvPortMalloc+0x17c>)
 8007400:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007402:	4b3f      	ldr	r3, [pc, #252]	; (8007500 <pvPortMalloc+0x17c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007408:	e004      	b.n	8007414 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	429a      	cmp	r2, r3
 800741c:	d903      	bls.n	8007426 <pvPortMalloc+0xa2>
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1f1      	bne.n	800740a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007426:	4b33      	ldr	r3, [pc, #204]	; (80074f4 <pvPortMalloc+0x170>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742c:	429a      	cmp	r2, r3
 800742e:	d04a      	beq.n	80074c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2208      	movs	r2, #8
 8007436:	4413      	add	r3, r2
 8007438:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	1ad2      	subs	r2, r2, r3
 800744a:	2308      	movs	r3, #8
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	429a      	cmp	r2, r3
 8007450:	d91e      	bls.n	8007490 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4413      	add	r3, r2
 8007458:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	2b00      	cmp	r3, #0
 8007462:	d009      	beq.n	8007478 <pvPortMalloc+0xf4>
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	613b      	str	r3, [r7, #16]
 8007476:	e7fe      	b.n	8007476 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	1ad2      	subs	r2, r2, r3
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800748a:	69b8      	ldr	r0, [r7, #24]
 800748c:	f000 f8f6 	bl	800767c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007490:	4b1a      	ldr	r3, [pc, #104]	; (80074fc <pvPortMalloc+0x178>)
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	4a18      	ldr	r2, [pc, #96]	; (80074fc <pvPortMalloc+0x178>)
 800749c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800749e:	4b17      	ldr	r3, [pc, #92]	; (80074fc <pvPortMalloc+0x178>)
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4b18      	ldr	r3, [pc, #96]	; (8007504 <pvPortMalloc+0x180>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d203      	bcs.n	80074b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074aa:	4b14      	ldr	r3, [pc, #80]	; (80074fc <pvPortMalloc+0x178>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a15      	ldr	r2, [pc, #84]	; (8007504 <pvPortMalloc+0x180>)
 80074b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	4b10      	ldr	r3, [pc, #64]	; (80074f8 <pvPortMalloc+0x174>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	431a      	orrs	r2, r3
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074c6:	f7ff fa5b 	bl	8006980 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	f003 0307 	and.w	r3, r3, #7
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d009      	beq.n	80074e8 <pvPortMalloc+0x164>
 80074d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	e7fe      	b.n	80074e6 <pvPortMalloc+0x162>
	return pvReturn;
 80074e8:	69fb      	ldr	r3, [r7, #28]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3728      	adds	r7, #40	; 0x28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20002424 	.word	0x20002424
 80074f8:	20002430 	.word	0x20002430
 80074fc:	20002428 	.word	0x20002428
 8007500:	2000241c 	.word	0x2000241c
 8007504:	2000242c 	.word	0x2000242c

08007508 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d046      	beq.n	80075a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800751a:	2308      	movs	r3, #8
 800751c:	425b      	negs	r3, r3
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	4413      	add	r3, r2
 8007522:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	4b20      	ldr	r3, [pc, #128]	; (80075b0 <vPortFree+0xa8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4013      	ands	r3, r2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d109      	bne.n	800754a <vPortFree+0x42>
 8007536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e7fe      	b.n	8007548 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d009      	beq.n	8007566 <vPortFree+0x5e>
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	60bb      	str	r3, [r7, #8]
 8007564:	e7fe      	b.n	8007564 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	4b11      	ldr	r3, [pc, #68]	; (80075b0 <vPortFree+0xa8>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4013      	ands	r3, r2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d019      	beq.n	80075a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d115      	bne.n	80075a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <vPortFree+0xa8>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	43db      	mvns	r3, r3
 8007586:	401a      	ands	r2, r3
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800758c:	f7ff f9ea 	bl	8006964 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	4b07      	ldr	r3, [pc, #28]	; (80075b4 <vPortFree+0xac>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4413      	add	r3, r2
 800759a:	4a06      	ldr	r2, [pc, #24]	; (80075b4 <vPortFree+0xac>)
 800759c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800759e:	6938      	ldr	r0, [r7, #16]
 80075a0:	f000 f86c 	bl	800767c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80075a4:	f7ff f9ec 	bl	8006980 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075a8:	bf00      	nop
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20002430 	.word	0x20002430
 80075b4:	20002428 	.word	0x20002428

080075b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075be:	f242 0308 	movw	r3, #8200	; 0x2008
 80075c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075c4:	4b27      	ldr	r3, [pc, #156]	; (8007664 <prvHeapInit+0xac>)
 80075c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00c      	beq.n	80075ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3307      	adds	r3, #7
 80075d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f023 0307 	bic.w	r3, r3, #7
 80075de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	4a1f      	ldr	r2, [pc, #124]	; (8007664 <prvHeapInit+0xac>)
 80075e8:	4413      	add	r3, r2
 80075ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075f0:	4a1d      	ldr	r2, [pc, #116]	; (8007668 <prvHeapInit+0xb0>)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075f6:	4b1c      	ldr	r3, [pc, #112]	; (8007668 <prvHeapInit+0xb0>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	4413      	add	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007604:	2208      	movs	r2, #8
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	1a9b      	subs	r3, r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0307 	bic.w	r3, r3, #7
 8007612:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4a15      	ldr	r2, [pc, #84]	; (800766c <prvHeapInit+0xb4>)
 8007618:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800761a:	4b14      	ldr	r3, [pc, #80]	; (800766c <prvHeapInit+0xb4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2200      	movs	r2, #0
 8007620:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007622:	4b12      	ldr	r3, [pc, #72]	; (800766c <prvHeapInit+0xb4>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	1ad2      	subs	r2, r2, r3
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007638:	4b0c      	ldr	r3, [pc, #48]	; (800766c <prvHeapInit+0xb4>)
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	4a0a      	ldr	r2, [pc, #40]	; (8007670 <prvHeapInit+0xb8>)
 8007646:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	4a09      	ldr	r2, [pc, #36]	; (8007674 <prvHeapInit+0xbc>)
 800764e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007650:	4b09      	ldr	r3, [pc, #36]	; (8007678 <prvHeapInit+0xc0>)
 8007652:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007656:	601a      	str	r2, [r3, #0]
}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	20000414 	.word	0x20000414
 8007668:	2000241c 	.word	0x2000241c
 800766c:	20002424 	.word	0x20002424
 8007670:	2000242c 	.word	0x2000242c
 8007674:	20002428 	.word	0x20002428
 8007678:	20002430 	.word	0x20002430

0800767c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007684:	4b28      	ldr	r3, [pc, #160]	; (8007728 <prvInsertBlockIntoFreeList+0xac>)
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	e002      	b.n	8007690 <prvInsertBlockIntoFreeList+0x14>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	429a      	cmp	r2, r3
 8007698:	d8f7      	bhi.n	800768a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	4413      	add	r3, r2
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d108      	bne.n	80076be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	441a      	add	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	441a      	add	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d118      	bne.n	8007704 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	4b15      	ldr	r3, [pc, #84]	; (800772c <prvInsertBlockIntoFreeList+0xb0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d00d      	beq.n	80076fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	441a      	add	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	e008      	b.n	800770c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076fa:	4b0c      	ldr	r3, [pc, #48]	; (800772c <prvInsertBlockIntoFreeList+0xb0>)
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	e003      	b.n	800770c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	429a      	cmp	r2, r3
 8007712:	d002      	beq.n	800771a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800771a:	bf00      	nop
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	2000241c 	.word	0x2000241c
 800772c:	20002424 	.word	0x20002424

08007730 <__libc_init_array>:
 8007730:	b570      	push	{r4, r5, r6, lr}
 8007732:	4e0d      	ldr	r6, [pc, #52]	; (8007768 <__libc_init_array+0x38>)
 8007734:	4c0d      	ldr	r4, [pc, #52]	; (800776c <__libc_init_array+0x3c>)
 8007736:	1ba4      	subs	r4, r4, r6
 8007738:	10a4      	asrs	r4, r4, #2
 800773a:	2500      	movs	r5, #0
 800773c:	42a5      	cmp	r5, r4
 800773e:	d109      	bne.n	8007754 <__libc_init_array+0x24>
 8007740:	4e0b      	ldr	r6, [pc, #44]	; (8007770 <__libc_init_array+0x40>)
 8007742:	4c0c      	ldr	r4, [pc, #48]	; (8007774 <__libc_init_array+0x44>)
 8007744:	f000 f820 	bl	8007788 <_init>
 8007748:	1ba4      	subs	r4, r4, r6
 800774a:	10a4      	asrs	r4, r4, #2
 800774c:	2500      	movs	r5, #0
 800774e:	42a5      	cmp	r5, r4
 8007750:	d105      	bne.n	800775e <__libc_init_array+0x2e>
 8007752:	bd70      	pop	{r4, r5, r6, pc}
 8007754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007758:	4798      	blx	r3
 800775a:	3501      	adds	r5, #1
 800775c:	e7ee      	b.n	800773c <__libc_init_array+0xc>
 800775e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007762:	4798      	blx	r3
 8007764:	3501      	adds	r5, #1
 8007766:	e7f2      	b.n	800774e <__libc_init_array+0x1e>
 8007768:	0800788c 	.word	0x0800788c
 800776c:	0800788c 	.word	0x0800788c
 8007770:	0800788c 	.word	0x0800788c
 8007774:	08007890 	.word	0x08007890

08007778 <memset>:
 8007778:	4402      	add	r2, r0
 800777a:	4603      	mov	r3, r0
 800777c:	4293      	cmp	r3, r2
 800777e:	d100      	bne.n	8007782 <memset+0xa>
 8007780:	4770      	bx	lr
 8007782:	f803 1b01 	strb.w	r1, [r3], #1
 8007786:	e7f9      	b.n	800777c <memset+0x4>

08007788 <_init>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	bf00      	nop
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr

08007794 <_fini>:
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007796:	bf00      	nop
 8007798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779a:	bc08      	pop	{r3}
 800779c:	469e      	mov	lr, r3
 800779e:	4770      	bx	lr
