
MD2020-303k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008538  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  080086c8  080086c8  000186c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b84  08008b84  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008b84  08008b84  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b84  08008b84  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b84  08008b84  00018b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b88  08008b88  00018b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002670  20000010  08008b9c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002680  08008b9c  00022680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a547  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003930  00000000  00000000  0003a587  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c0  00000000  00000000  0003deb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e8  00000000  00000000  0003f478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b8af  00000000  00000000  00040860  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012c79  00000000  00000000  0005c10f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009cd52  00000000  00000000  0006ed88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010bada  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c1c  00000000  00000000  0010bb58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086b0 	.word	0x080086b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080086b0 	.word	0x080086b0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000a70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a76:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000a78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a90:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000aba:	2204      	movs	r2, #4
 8000abc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aca:	4817      	ldr	r0, [pc, #92]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000acc:	f001 f82e 	bl	8001b2c <HAL_ADC_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ad6:	f000 fbf3 	bl	80012c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4810      	ldr	r0, [pc, #64]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000ae6:	f001 febd 	bl	8002864 <HAL_ADCEx_MultiModeConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000af0:	f000 fbe6 	bl	80012c0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000b00:	2304      	movs	r3, #4
 8000b02:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000b12:	f001 fbe5 	bl	80022e0 <HAL_ADC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000b1c:	f000 fbd0 	bl	80012c0 <Error_Handler>
  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000242c 	.word	0x2000242c

08000b2c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b32:	463b      	mov	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
 8000b40:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000b42:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b44:	4a2e      	ldr	r2, [pc, #184]	; (8000c00 <MX_ADC2_Init+0xd4>)
 8000b46:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b48:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b4a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b4e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b50:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b6a:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b7e:	2202      	movs	r2, #2
 8000b80:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b8c:	2208      	movs	r2, #8
 8000b8e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b9c:	4817      	ldr	r0, [pc, #92]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b9e:	f000 ffc5 	bl	8001b2c <HAL_ADC_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000ba8:	f000 fb8a 	bl	80012c0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000bca:	f001 fb89 	bl	80022e0 <HAL_ADC_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000bd4:	f000 fb74 	bl	80012c0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000be6:	f001 fb7b 	bl	80022e0 <HAL_ADC_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000bf0:	f000 fb66 	bl	80012c0 <Error_Handler>
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200023dc 	.word	0x200023dc
 8000c00:	50000100 	.word	0x50000100

08000c04 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c24:	d15e      	bne.n	8000ce4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c26:	4b63      	ldr	r3, [pc, #396]	; (8000db4 <HAL_ADC_MspInit+0x1b0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	4a61      	ldr	r2, [pc, #388]	; (8000db4 <HAL_ADC_MspInit+0x1b0>)
 8000c2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c30:	4b60      	ldr	r3, [pc, #384]	; (8000db4 <HAL_ADC_MspInit+0x1b0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d10b      	bne.n	8000c50 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c38:	4b5f      	ldr	r3, [pc, #380]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	4a5e      	ldr	r2, [pc, #376]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c42:	6153      	str	r3, [r2, #20]
 8000c44:	4b5c      	ldr	r3, [pc, #368]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	61bb      	str	r3, [r7, #24]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	4b59      	ldr	r3, [pc, #356]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	4a58      	ldr	r2, [pc, #352]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5a:	6153      	str	r3, [r2, #20]
 8000c5c:	4b56      	ldr	r3, [pc, #344]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = POT_Pin;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(POT_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f002 fc6f 	bl	8003560 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c82:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000c84:	4a4e      	ldr	r2, [pc, #312]	; (8000dc0 <HAL_ADC_MspInit+0x1bc>)
 8000c86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c88:	4b4c      	ldr	r3, [pc, #304]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c94:	4b49      	ldr	r3, [pc, #292]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c9a:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ca2:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000caa:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000cac:	2220      	movs	r2, #32
 8000cae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cb0:	4b42      	ldr	r3, [pc, #264]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb6:	4841      	ldr	r0, [pc, #260]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000cb8:	f002 fb0a 	bl	80032d0 <HAL_DMA_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000cc2:	f000 fafd 	bl	80012c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a3c      	ldr	r2, [pc, #240]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000cca:	639a      	str	r2, [r3, #56]	; 0x38
 8000ccc:	4a3b      	ldr	r2, [pc, #236]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	2012      	movs	r0, #18
 8000cd8:	f002 fad0 	bl	800327c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000cdc:	2012      	movs	r0, #18
 8000cde:	f002 fae9 	bl	80032b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000ce2:	e062      	b.n	8000daa <HAL_ADC_MspInit+0x1a6>
  else if(adcHandle->Instance==ADC2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a36      	ldr	r2, [pc, #216]	; (8000dc4 <HAL_ADC_MspInit+0x1c0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d15d      	bne.n	8000daa <HAL_ADC_MspInit+0x1a6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <HAL_ADC_MspInit+0x1b0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <HAL_ADC_MspInit+0x1b0>)
 8000cf6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <HAL_ADC_MspInit+0x1b0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10b      	bne.n	8000d18 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d00:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	4a2c      	ldr	r2, [pc, #176]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	6153      	str	r3, [r2, #20]
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	4a26      	ldr	r2, [pc, #152]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d22:	6153      	str	r3, [r2, #20]
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Current_Pin|Voltage_Pin;
 8000d30:	2330      	movs	r3, #48	; 0x30
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d46:	f002 fc0b 	bl	8003560 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d4c:	4a1f      	ldr	r2, [pc, #124]	; (8000dcc <HAL_ADC_MspInit+0x1c8>)
 8000d4e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d68:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d70:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d74:	2220      	movs	r2, #32
 8000d76:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000d7e:	4812      	ldr	r0, [pc, #72]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d80:	f002 faa6 	bl	80032d0 <HAL_DMA_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 8000d8a:	f000 fa99 	bl	80012c0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
 8000d94:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	2012      	movs	r0, #18
 8000da0:	f002 fa6c 	bl	800327c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000da4:	2012      	movs	r0, #18
 8000da6:	f002 fa85 	bl	80032b4 <HAL_NVIC_EnableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	3730      	adds	r7, #48	; 0x30
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000002c 	.word	0x2000002c
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	2000247c 	.word	0x2000247c
 8000dc0:	40020008 	.word	0x40020008
 8000dc4:	50000100 	.word	0x50000100
 8000dc8:	200024c0 	.word	0x200024c0
 8000dcc:	4002001c 	.word	0x4002001c

08000dd0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_CAN_Init+0x64>)
 8000dd6:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <MX_CAN_Init+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_CAN_Init+0x64>)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_CAN_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_CAN_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_CAN_Init+0x64>)
 8000dee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000df2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_CAN_Init+0x64>)
 8000df6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000dfa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <MX_CAN_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_CAN_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <MX_CAN_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_CAN_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <MX_CAN_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_CAN_Init+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_CAN_Init+0x64>)
 8000e22:	f001 fe44 	bl	8002aae <HAL_CAN_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000e2c:	f000 fa48 	bl	80012c0 <Error_Handler>
  }

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20002504 	.word	0x20002504
 8000e38:	40006400 	.word	0x40006400

08000e3c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a24      	ldr	r2, [pc, #144]	; (8000eec <HAL_CAN_MspInit+0xb0>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d141      	bne.n	8000ee2 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <HAL_CAN_MspInit+0xb4>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <HAL_CAN_MspInit+0xb4>)
 8000e64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e68:	61d3      	str	r3, [r2, #28]
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <HAL_CAN_MspInit+0xb4>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <HAL_CAN_MspInit+0xb4>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <HAL_CAN_MspInit+0xb4>)
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	6153      	str	r3, [r2, #20]
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <HAL_CAN_MspInit+0xb4>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000ea0:	2309      	movs	r3, #9
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f002 fb57 	bl	8003560 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 5, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2105      	movs	r1, #5
 8000eb6:	2013      	movs	r0, #19
 8000eb8:	f002 f9e0 	bl	800327c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8000ebc:	2013      	movs	r0, #19
 8000ebe:	f002 f9f9 	bl	80032b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 5, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	2014      	movs	r0, #20
 8000ec8:	f002 f9d8 	bl	800327c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000ecc:	2014      	movs	r0, #20
 8000ece:	f002 f9f1 	bl	80032b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 5, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2105      	movs	r1, #5
 8000ed6:	2015      	movs	r0, #21
 8000ed8:	f002 f9d0 	bl	800327c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000edc:	2015      	movs	r0, #21
 8000ede:	f002 f9e9 	bl	80032b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40006400 	.word	0x40006400
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <MX_DMA_Init+0x48>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <MX_DMA_Init+0x48>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6153      	str	r3, [r2, #20]
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <MX_DMA_Init+0x48>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2105      	movs	r1, #5
 8000f16:	200b      	movs	r0, #11
 8000f18:	f002 f9b0 	bl	800327c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f1c:	200b      	movs	r0, #11
 8000f1e:	f002 f9c9 	bl	80032b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2105      	movs	r1, #5
 8000f26:	200c      	movs	r0, #12
 8000f28:	f002 f9a8 	bl	800327c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f2c:	200c      	movs	r0, #12
 8000f2e:	f002 f9c1 	bl	80032b4 <HAL_NVIC_EnableIRQ>

}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000

08000f40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <vApplicationGetIdleTaskMemory+0x2c>)
 8000f50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <vApplicationGetIdleTaskMemory+0x30>)
 8000f56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000034 	.word	0x20000034
 8000f70:	20000088 	.word	0x20000088

08000f74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b09c      	sub	sp, #112	; 0x70
 8000f78:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f7a:	4b27      	ldr	r3, [pc, #156]	; (8001018 <MX_FREERTOS_Init+0xa4>)
 8000f7c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000f80:	461d      	mov	r5, r3
 8000f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f005 fc0d 	bl	80067b4 <osThreadCreate>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <MX_FREERTOS_Init+0xa8>)
 8000f9e:	601a      	str	r2, [r3, #0]

  /* definition and creation of MinorLoopTask */
  osThreadDef(MinorLoopTask, StartMinorLoopTask, osPriorityRealtime, 0, 256);
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <MX_FREERTOS_Init+0xac>)
 8000fa2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MinorLoopTaskHandle = osThreadCreate(osThread(MinorLoopTask), NULL);
 8000fb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f005 fbfa 	bl	80067b4 <osThreadCreate>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_FREERTOS_Init+0xb0>)
 8000fc4:	601a      	str	r2, [r3, #0]

  /* definition and creation of MajorLoopTask */
  osThreadDef(MajorLoopTask, StartMajorLoopTask, osPriorityHigh, 0, 1024);
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_FREERTOS_Init+0xb4>)
 8000fc8:	f107 041c 	add.w	r4, r7, #28
 8000fcc:	461d      	mov	r5, r3
 8000fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MajorLoopTaskHandle = osThreadCreate(osThread(MajorLoopTask), NULL);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f005 fbe7 	bl	80067b4 <osThreadCreate>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_FREERTOS_Init+0xb8>)
 8000fea:	601a      	str	r2, [r3, #0]

  /* definition and creation of CanCommunicatio */
  osThreadDef(CanCommunicatio, StartCanCommunicationTask, osPriorityAboveNormal, 0, 512);
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <MX_FREERTOS_Init+0xbc>)
 8000fee:	463c      	mov	r4, r7
 8000ff0:	461d      	mov	r5, r3
 8000ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ffa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CanCommunicatioHandle = osThreadCreate(osThread(CanCommunicatio), NULL);
 8000ffe:	463b      	mov	r3, r7
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f005 fbd6 	bl	80067b4 <osThreadCreate>
 8001008:	4602      	mov	r2, r0
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <MX_FREERTOS_Init+0xc0>)
 800100c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800100e:	bf00      	nop
 8001010:	3770      	adds	r7, #112	; 0x70
 8001012:	46bd      	mov	sp, r7
 8001014:	bdb0      	pop	{r4, r5, r7, pc}
 8001016:	bf00      	nop
 8001018:	080086d4 	.word	0x080086d4
 800101c:	2000252c 	.word	0x2000252c
 8001020:	08008700 	.word	0x08008700
 8001024:	20002538 	.word	0x20002538
 8001028:	0800872c 	.word	0x0800872c
 800102c:	20002534 	.word	0x20002534
 8001030:	08008758 	.word	0x08008758
 8001034:	20002530 	.word	0x20002530

08001038 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f005 fc03 	bl	800684c <osDelay>
 8001046:	e7fb      	b.n	8001040 <StartDefaultTask+0x8>

08001048 <StartMinorLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMinorLoopTask */
void StartMinorLoopTask(void const * argument)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMinorLoopTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001050:	2001      	movs	r0, #1
 8001052:	f005 fbfb 	bl	800684c <osDelay>
 8001056:	e7fb      	b.n	8001050 <StartMinorLoopTask+0x8>

08001058 <StartMajorLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMajorLoopTask */
void StartMajorLoopTask(void const * argument)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMajorLoopTask */
  /* Infinite loop */
  for(;;)
  {
	encval=TIM_Encoder_Value();
 8001060:	f000 fbd8 	bl	8001814 <TIM_Encoder_Value>
 8001064:	4602      	mov	r2, r0
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <StartMajorLoopTask+0xa8>)
 8001068:	601a      	str	r2, [r3, #0]
	uint32_t tim=HAL_GetTick();
 800106a:	f000 fd35 	bl	8001ad8 <HAL_GetTick>
 800106e:	6178      	str	r0, [r7, #20]
	float sec=tim/1000.0;
 8001070:	6978      	ldr	r0, [r7, #20]
 8001072:	f7ff f9ef 	bl	8000454 <__aeabi_ui2d>
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <StartMajorLoopTask+0xac>)
 800107c:	f7ff fb8e 	bl	800079c <__aeabi_ddiv>
 8001080:	4603      	mov	r3, r0
 8001082:	460c      	mov	r4, r1
 8001084:	4618      	mov	r0, r3
 8001086:	4621      	mov	r1, r4
 8001088:	f7ff fc90 	bl	80009ac <__aeabi_d2f>
 800108c:	4603      	mov	r3, r0
 800108e:	613b      	str	r3, [r7, #16]
	float duty=0.9*sinf(M_TWOPI*sec);
 8001090:	6938      	ldr	r0, [r7, #16]
 8001092:	f7ff fa01 	bl	8000498 <__aeabi_f2d>
 8001096:	a316      	add	r3, pc, #88	; (adr r3, 80010f0 <StartMajorLoopTask+0x98>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff fa54 	bl	8000548 <__aeabi_dmul>
 80010a0:	4603      	mov	r3, r0
 80010a2:	460c      	mov	r4, r1
 80010a4:	4618      	mov	r0, r3
 80010a6:	4621      	mov	r1, r4
 80010a8:	f7ff fc80 	bl	80009ac <__aeabi_d2f>
 80010ac:	4603      	mov	r3, r0
 80010ae:	ee00 3a10 	vmov	s0, r3
 80010b2:	f006 fdb1 	bl	8007c18 <sinf>
 80010b6:	ee10 3a10 	vmov	r3, s0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f9ec 	bl	8000498 <__aeabi_f2d>
 80010c0:	a30d      	add	r3, pc, #52	; (adr r3, 80010f8 <StartMajorLoopTask+0xa0>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fa3f 	bl	8000548 <__aeabi_dmul>
 80010ca:	4603      	mov	r3, r0
 80010cc:	460c      	mov	r4, r1
 80010ce:	4618      	mov	r0, r3
 80010d0:	4621      	mov	r1, r4
 80010d2:	f7ff fc6b 	bl	80009ac <__aeabi_d2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	60fb      	str	r3, [r7, #12]
	Duty_Set(duty);
 80010da:	ed97 0a03 	vldr	s0, [r7, #12]
 80010de:	f000 fbe3 	bl	80018a8 <Duty_Set>
    osDelay(1);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f005 fbb2 	bl	800684c <osDelay>
  {
 80010e8:	e7ba      	b.n	8001060 <StartMajorLoopTask+0x8>
 80010ea:	bf00      	nop
 80010ec:	f3af 8000 	nop.w
 80010f0:	54442d18 	.word	0x54442d18
 80010f4:	401921fb 	.word	0x401921fb
 80010f8:	cccccccd 	.word	0xcccccccd
 80010fc:	3feccccc 	.word	0x3feccccc
 8001100:	20000030 	.word	0x20000030
 8001104:	408f4000 	.word	0x408f4000

08001108 <StartCanCommunicationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanCommunicationTask */
void StartCanCommunicationTask(void const * argument)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanCommunicationTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f005 fb9b 	bl	800684c <osDelay>
 8001116:	e7fb      	b.n	8001110 <StartCanCommunicationTask+0x8>

08001118 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <MX_GPIO_Init+0xa8>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <MX_GPIO_Init+0xa8>)
 8001134:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001138:	6153      	str	r3, [r2, #20]
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <MX_GPIO_Init+0xa8>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <MX_GPIO_Init+0xa8>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <MX_GPIO_Init+0xa8>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <MX_GPIO_Init+0xa8>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <MX_GPIO_Init+0xa8>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <MX_GPIO_Init+0xa8>)
 8001164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001168:	6153      	str	r3, [r2, #20]
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_GPIO_Init+0xa8>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A2C8_Pin|D2D8_Pin|D3D9_Pin|D4D10_Pin 
 8001176:	2200      	movs	r2, #0
 8001178:	21f8      	movs	r1, #248	; 0xf8
 800117a:	4812      	ldr	r0, [pc, #72]	; (80011c4 <MX_GPIO_Init+0xac>)
 800117c:	f002 fb62 	bl	8003844 <HAL_GPIO_WritePin>
                          |D5D11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = p1_Pin|p2_Pin|p3_Pin;
 8001180:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001198:	f002 f9e2 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = A2C8_Pin|D2D8_Pin|D3D9_Pin|D4D10_Pin 
 800119c:	23f8      	movs	r3, #248	; 0xf8
 800119e:	60fb      	str	r3, [r7, #12]
                          |D5D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4619      	mov	r1, r3
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_GPIO_Init+0xac>)
 80011b4:	f002 f9d4 	bl	8003560 <HAL_GPIO_Init>

}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021000 	.word	0x40021000
 80011c4:	48000400 	.word	0x48000400

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011cc:	f000 fc5a 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d0:	f000 f81e 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d4:	f7ff ffa0 	bl	8001118 <MX_GPIO_Init>
  MX_DMA_Init();
 80011d8:	f7ff fe8c 	bl	8000ef4 <MX_DMA_Init>
  MX_ADC1_Init();
 80011dc:	f7ff fc36 	bl	8000a4c <MX_ADC1_Init>
  MX_ADC2_Init();
 80011e0:	f7ff fca4 	bl	8000b2c <MX_ADC2_Init>
  MX_CAN_Init();
 80011e4:	f7ff fdf4 	bl	8000dd0 <MX_CAN_Init>
  MX_TIM2_Init();
 80011e8:	f000 f974 	bl	80014d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011ec:	f000 f9c6 	bl	800157c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80011f0:	f000 fba2 	bl	8001938 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80011f4:	213c      	movs	r1, #60	; 0x3c
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <main+0x44>)
 80011f8:	f003 fe1e 	bl	8004e38 <HAL_TIM_Encoder_Start>
  TIM_PWM_Start();
 80011fc:	f000 fb1e 	bl	800183c <TIM_PWM_Start>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8001200:	f7ff feb8 	bl	8000f74 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001204:	f005 facf 	bl	80067a6 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001208:	e7fe      	b.n	8001208 <main+0x40>
 800120a:	bf00      	nop
 800120c:	200025bc 	.word	0x200025bc

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b090      	sub	sp, #64	; 0x40
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2228      	movs	r2, #40	; 0x28
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f006 fcf2 	bl	8007c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001232:	2301      	movs	r3, #1
 8001234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800123c:	2301      	movs	r3, #1
 800123e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	2301      	movs	r3, #1
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800124e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fb0b 	bl	8003874 <HAL_RCC_OscConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001264:	f000 f82c 	bl	80012c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001268:	230f      	movs	r3, #15
 800126a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126c:	2302      	movs	r3, #2
 800126e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2102      	movs	r1, #2
 8001282:	4618      	mov	r0, r3
 8001284:	f003 f9fe 	bl	8004684 <HAL_RCC_ClockConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800128e:	f000 f817 	bl	80012c0 <Error_Handler>
  }
}
 8001292:	bf00      	nop
 8001294:	3740      	adds	r7, #64	; 0x40
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d101      	bne.n	80012b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ae:	f000 fbff 	bl	8001ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40014800 	.word	0x40014800

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_MspInit+0x4c>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_MspInit+0x4c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6193      	str	r3, [r2, #24]
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_MspInit+0x4c>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_MspInit+0x4c>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <HAL_MspInit+0x4c>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_MspInit+0x4c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	210f      	movs	r1, #15
 800130a:	f06f 0001 	mvn.w	r0, #1
 800130e:	f001 ffb5 	bl	800327c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	; 0x30
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0); 
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	201a      	movs	r0, #26
 8001336:	f001 ffa1 	bl	800327c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn); 
 800133a:	201a      	movs	r0, #26
 800133c:	f001 ffba 	bl	80032b4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_InitTick+0x9c>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a1d      	ldr	r2, [pc, #116]	; (80013bc <HAL_InitTick+0x9c>)
 8001346:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_InitTick+0x9c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001358:	f107 0210 	add.w	r2, r7, #16
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f003 fbc6 	bl	8004af4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001368:	f003 fba2 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 800136c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800136e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001370:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <HAL_InitTick+0xa0>)
 8001372:	fba2 2303 	umull	r2, r3, r2, r3
 8001376:	0c9b      	lsrs	r3, r3, #18
 8001378:	3b01      	subs	r3, #1
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_InitTick+0xa4>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <HAL_InitTick+0xa8>)
 8001380:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_InitTick+0xa4>)
 8001384:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001388:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_InitTick+0xa4>)
 800138c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_InitTick+0xa4>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_InitTick+0xa4>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <HAL_InitTick+0xa4>)
 800139e:	f003 fbdb 	bl	8004b58 <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d104      	bne.n	80013b2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80013a8:	4806      	ldr	r0, [pc, #24]	; (80013c4 <HAL_InitTick+0xa4>)
 80013aa:	f003 fc01 	bl	8004bb0 <HAL_TIM_Base_Start_IT>
 80013ae:	4603      	mov	r3, r0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3730      	adds	r7, #48	; 0x30
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000
 80013c0:	431bde83 	.word	0x431bde83
 80013c4:	2000253c 	.word	0x2000253c
 80013c8:	40014800 	.word	0x40014800

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <DMA1_Channel1_IRQHandler+0x10>)
 8001406:	f001 ffe8 	bl	80033da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2000247c 	.word	0x2000247c

08001414 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <DMA1_Channel2_IRQHandler+0x10>)
 800141a:	f001 ffde 	bl	80033da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200024c0 	.word	0x200024c0

08001428 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <ADC1_2_IRQHandler+0x14>)
 800142e:	f000 fd0f 	bl	8001e50 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001432:	4803      	ldr	r0, [pc, #12]	; (8001440 <ADC1_2_IRQHandler+0x18>)
 8001434:	f000 fd0c 	bl	8001e50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2000242c 	.word	0x2000242c
 8001440:	200023dc 	.word	0x200023dc

08001444 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <CAN_TX_IRQHandler+0x10>)
 800144a:	f001 fc2b 	bl	8002ca4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20002504 	.word	0x20002504

08001458 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <CAN_RX0_IRQHandler+0x10>)
 800145e:	f001 fc21 	bl	8002ca4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20002504 	.word	0x20002504

0800146c <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <CAN_RX1_IRQHandler+0x10>)
 8001472:	f001 fc17 	bl	8002ca4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20002504 	.word	0x20002504

08001480 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001486:	f003 fd0e 	bl	8004ea6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000253c 	.word	0x2000253c

08001494 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <USART2_IRQHandler+0x10>)
 800149a:	f004 fcd5 	bl	8005e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200025fc 	.word	0x200025fc

080014a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <SystemInit+0x28>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <SystemInit+0x28>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SystemInit+0x28>)
 80014be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014c2:	609a      	str	r2, [r3, #8]
#endif
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08c      	sub	sp, #48	; 0x30
 80014d8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	2224      	movs	r2, #36	; 0x24
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f006 fb90 	bl	8007c08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <MX_TIM2_Init+0xa4>)
 80014f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <MX_TIM2_Init+0xa4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <MX_TIM2_Init+0xa4>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <MX_TIM2_Init+0xa4>)
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_TIM2_Init+0xa4>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_TIM2_Init+0xa4>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800151a:	2303      	movs	r3, #3
 800151c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800151e:	2302      	movs	r3, #2
 8001520:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001522:	2301      	movs	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 800152a:	2303      	movs	r3, #3
 800152c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800152e:	2302      	movs	r3, #2
 8001530:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001532:	2301      	movs	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 3;
 800153a:	2303      	movs	r3, #3
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4619      	mov	r1, r3
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <MX_TIM2_Init+0xa4>)
 8001546:	f003 fbe5 	bl	8004d14 <HAL_TIM_Encoder_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001550:	f7ff feb6 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_TIM2_Init+0xa4>)
 8001562:	f004 fb97 	bl	8005c94 <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800156c:	f7ff fea8 	bl	80012c0 <Error_Handler>
  }

}
 8001570:	bf00      	nop
 8001572:	3730      	adds	r7, #48	; 0x30
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200025bc 	.word	0x200025bc

0800157c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80015ae:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <MX_TIM3_Init+0x128>)
 80015b0:	4a3d      	ldr	r2, [pc, #244]	; (80016a8 <MX_TIM3_Init+0x12c>)
 80015b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015b4:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <MX_TIM3_Init+0x128>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80015ba:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <MX_TIM3_Init+0x128>)
 80015bc:	2220      	movs	r2, #32
 80015be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80015c0:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <MX_TIM3_Init+0x128>)
 80015c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c8:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <MX_TIM3_Init+0x128>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015ce:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <MX_TIM3_Init+0x128>)
 80015d0:	2280      	movs	r2, #128	; 0x80
 80015d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015d4:	4833      	ldr	r0, [pc, #204]	; (80016a4 <MX_TIM3_Init+0x128>)
 80015d6:	f003 fabf 	bl	8004b58 <HAL_TIM_Base_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80015e0:	f7ff fe6e 	bl	80012c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ee:	4619      	mov	r1, r3
 80015f0:	482c      	ldr	r0, [pc, #176]	; (80016a4 <MX_TIM3_Init+0x128>)
 80015f2:	f003 fe8f 	bl	8005314 <HAL_TIM_ConfigClockSource>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80015fc:	f7ff fe60 	bl	80012c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001600:	4828      	ldr	r0, [pc, #160]	; (80016a4 <MX_TIM3_Init+0x128>)
 8001602:	f003 faff 	bl	8004c04 <HAL_TIM_PWM_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800160c:	f7ff fe58 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001610:	2320      	movs	r3, #32
 8001612:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4821      	ldr	r0, [pc, #132]	; (80016a4 <MX_TIM3_Init+0x128>)
 8001620:	f004 fb38 	bl	8005c94 <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800162a:	f7ff fe49 	bl	80012c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162e:	2360      	movs	r3, #96	; 0x60
 8001630:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	4619      	mov	r1, r3
 8001644:	4817      	ldr	r0, [pc, #92]	; (80016a4 <MX_TIM3_Init+0x128>)
 8001646:	f003 fd4d 	bl	80050e4 <HAL_TIM_PWM_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001650:	f7ff fe36 	bl	80012c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	2204      	movs	r2, #4
 8001658:	4619      	mov	r1, r3
 800165a:	4812      	ldr	r0, [pc, #72]	; (80016a4 <MX_TIM3_Init+0x128>)
 800165c:	f003 fd42 	bl	80050e4 <HAL_TIM_PWM_ConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001666:	f7ff fe2b 	bl	80012c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	2208      	movs	r2, #8
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <MX_TIM3_Init+0x128>)
 8001672:	f003 fd37 	bl	80050e4 <HAL_TIM_PWM_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800167c:	f7ff fe20 	bl	80012c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	220c      	movs	r2, #12
 8001684:	4619      	mov	r1, r3
 8001686:	4807      	ldr	r0, [pc, #28]	; (80016a4 <MX_TIM3_Init+0x128>)
 8001688:	f003 fd2c 	bl	80050e4 <HAL_TIM_PWM_ConfigChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001692:	f7ff fe15 	bl	80012c0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <MX_TIM3_Init+0x128>)
 8001698:	f000 f868 	bl	800176c <HAL_TIM_MspPostInit>

}
 800169c:	bf00      	nop
 800169e:	3738      	adds	r7, #56	; 0x38
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	2000257c 	.word	0x2000257c
 80016a8:	40000400 	.word	0x40000400

080016ac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016cc:	d128      	bne.n	8001720 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_TIM_Encoder_MspInit+0x7c>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a15      	ldr	r2, [pc, #84]	; (8001728 <HAL_TIM_Encoder_MspInit+0x7c>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_TIM_Encoder_MspInit+0x7c>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_TIM_Encoder_MspInit+0x7c>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <HAL_TIM_Encoder_MspInit+0x7c>)
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	6153      	str	r3, [r2, #20]
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_TIM_Encoder_MspInit+0x7c>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016fe:	2303      	movs	r3, #3
 8001700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800170e:	2301      	movs	r3, #1
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171c:	f001 ff20 	bl	8003560 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	; 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_TIM_Base_MspInit+0x38>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d10b      	bne.n	8001756 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_TIM_Base_MspInit+0x3c>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a09      	ldr	r2, [pc, #36]	; (8001768 <HAL_TIM_Base_MspInit+0x3c>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <HAL_TIM_Base_MspInit+0x3c>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40000400 	.word	0x40000400
 8001768:	40021000 	.word	0x40021000

0800176c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <HAL_TIM_MspPostInit+0x9c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d138      	bne.n	8001800 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HAL_TIM_MspPostInit+0xa0>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a1e      	ldr	r2, [pc, #120]	; (800180c <HAL_TIM_MspPostInit+0xa0>)
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	6153      	str	r3, [r2, #20]
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <HAL_TIM_MspPostInit+0xa0>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_TIM_MspPostInit+0xa0>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a18      	ldr	r2, [pc, #96]	; (800180c <HAL_TIM_MspPostInit+0xa0>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <HAL_TIM_MspPostInit+0xa0>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017be:	23c0      	movs	r3, #192	; 0xc0
 80017c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ce:	2302      	movs	r3, #2
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017dc:	f001 fec0 	bl	8003560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017e0:	2303      	movs	r3, #3
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017f0:	2302      	movs	r3, #2
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <HAL_TIM_MspPostInit+0xa4>)
 80017fc:	f001 feb0 	bl	8003560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	; 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40000400 	.word	0x40000400
 800180c:	40021000 	.word	0x40021000
 8001810:	48000400 	.word	0x48000400

08001814 <TIM_Encoder_Value>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
int32_t TIM_Encoder_Value(void){
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
	uint32_t encbuff = TIM2->CNT;
 800181a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	607b      	str	r3, [r7, #4]
	if (encbuff > 2147483647)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	da02      	bge.n	800182e <TIM_Encoder_Value+0x1a>
		return (int32_t) encbuff * -1;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	425b      	negs	r3, r3
 800182c:	e000      	b.n	8001830 <TIM_Encoder_Value+0x1c>
	else
		return (int32_t) encbuff;
 800182e:	687b      	ldr	r3, [r7, #4]

}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <TIM_PWM_Start>:
void TIM_PWM_Start(void){
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001840:	2100      	movs	r1, #0
 8001842:	4808      	ldr	r0, [pc, #32]	; (8001864 <TIM_PWM_Start+0x28>)
 8001844:	f003 fa14 	bl	8004c70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001848:	2104      	movs	r1, #4
 800184a:	4806      	ldr	r0, [pc, #24]	; (8001864 <TIM_PWM_Start+0x28>)
 800184c:	f003 fa10 	bl	8004c70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001850:	2108      	movs	r1, #8
 8001852:	4804      	ldr	r0, [pc, #16]	; (8001864 <TIM_PWM_Start+0x28>)
 8001854:	f003 fa0c 	bl	8004c70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001858:	210c      	movs	r1, #12
 800185a:	4802      	ldr	r0, [pc, #8]	; (8001864 <TIM_PWM_Start+0x28>)
 800185c:	f003 fa08 	bl	8004c70 <HAL_TIM_PWM_Start>
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000257c 	.word	0x2000257c

08001868 <TIM_PWM_Set>:
void TIM_PWM_Set(uint16_t *pwms){
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	TIM3->CCR1 = pwms[0];
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	881a      	ldrh	r2, [r3, #0]
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <TIM_PWM_Set+0x3c>)
 8001876:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = pwms[1];
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3302      	adds	r3, #2
 800187c:	881a      	ldrh	r2, [r3, #0]
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <TIM_PWM_Set+0x3c>)
 8001880:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = pwms[2];
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3304      	adds	r3, #4
 8001886:	881a      	ldrh	r2, [r3, #0]
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <TIM_PWM_Set+0x3c>)
 800188a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = pwms[3];
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3306      	adds	r3, #6
 8001890:	881a      	ldrh	r2, [r3, #0]
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <TIM_PWM_Set+0x3c>)
 8001894:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40000400 	.word	0x40000400

080018a8 <Duty_Set>:
void Duty_Set(float duty){
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t pwms[4];
	pwms[0]=pwms[1]=500.0+duty*500.0;
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7fe fdf0 	bl	8000498 <__aeabi_f2d>
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <Duty_Set+0x8c>)
 80018be:	f7fe fe43 	bl	8000548 <__aeabi_dmul>
 80018c2:	4603      	mov	r3, r0
 80018c4:	460c      	mov	r4, r1
 80018c6:	4618      	mov	r0, r3
 80018c8:	4621      	mov	r1, r4
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <Duty_Set+0x8c>)
 80018d0:	f7fe fc84 	bl	80001dc <__adddf3>
 80018d4:	4603      	mov	r3, r0
 80018d6:	460c      	mov	r4, r1
 80018d8:	4618      	mov	r0, r3
 80018da:	4621      	mov	r1, r4
 80018dc:	f7ff f846 	bl	800096c <__aeabi_d2uiz>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	817b      	strh	r3, [r7, #10]
 80018e6:	897b      	ldrh	r3, [r7, #10]
 80018e8:	813b      	strh	r3, [r7, #8]
	pwms[2]=pwms[3]=500.0-duty*500.0;
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7fe fdd4 	bl	8000498 <__aeabi_f2d>
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <Duty_Set+0x8c>)
 80018f6:	f7fe fe27 	bl	8000548 <__aeabi_dmul>
 80018fa:	4603      	mov	r3, r0
 80018fc:	460c      	mov	r4, r1
 80018fe:	461a      	mov	r2, r3
 8001900:	4623      	mov	r3, r4
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	490b      	ldr	r1, [pc, #44]	; (8001934 <Duty_Set+0x8c>)
 8001908:	f7fe fc66 	bl	80001d8 <__aeabi_dsub>
 800190c:	4603      	mov	r3, r0
 800190e:	460c      	mov	r4, r1
 8001910:	4618      	mov	r0, r3
 8001912:	4621      	mov	r1, r4
 8001914:	f7ff f82a 	bl	800096c <__aeabi_d2uiz>
 8001918:	4603      	mov	r3, r0
 800191a:	b29b      	uxth	r3, r3
 800191c:	81fb      	strh	r3, [r7, #14]
 800191e:	89fb      	ldrh	r3, [r7, #14]
 8001920:	81bb      	strh	r3, [r7, #12]
	TIM_PWM_Set(pwms);
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff9e 	bl	8001868 <TIM_PWM_Set>
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bd90      	pop	{r4, r7, pc}
 8001934:	407f4000 	.word	0x407f4000

08001938 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <MX_USART2_UART_Init+0x58>)
 800193e:	4a15      	ldr	r2, [pc, #84]	; (8001994 <MX_USART2_UART_Init+0x5c>)
 8001940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <MX_USART2_UART_Init+0x58>)
 8001944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_USART2_UART_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <MX_USART2_UART_Init+0x58>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_USART2_UART_Init+0x58>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MX_USART2_UART_Init+0x58>)
 800195e:	220c      	movs	r2, #12
 8001960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <MX_USART2_UART_Init+0x58>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_USART2_UART_Init+0x58>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <MX_USART2_UART_Init+0x58>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_USART2_UART_Init+0x58>)
 8001976:	2200      	movs	r2, #0
 8001978:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_USART2_UART_Init+0x58>)
 800197c:	f004 fa16 	bl	8005dac <HAL_UART_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001986:	f7ff fc9b 	bl	80012c0 <Error_Handler>
  }

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200025fc 	.word	0x200025fc
 8001994:	40004400 	.word	0x40004400

08001998 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <HAL_UART_MspInit+0x90>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d131      	bne.n	8001a1e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_UART_MspInit+0x94>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <HAL_UART_MspInit+0x94>)
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_UART_MspInit+0x94>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_UART_MspInit+0x94>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <HAL_UART_MspInit+0x94>)
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019dc:	6153      	str	r3, [r2, #20]
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_UART_MspInit+0x94>)
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80019ea:	f248 0304 	movw	r3, #32772	; 0x8004
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019fc:	2307      	movs	r3, #7
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0a:	f001 fda9 	bl	8003560 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2105      	movs	r1, #5
 8001a12:	2026      	movs	r0, #38	; 0x26
 8001a14:	f001 fc32 	bl	800327c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a18:	2026      	movs	r0, #38	; 0x26
 8001a1a:	f001 fc4b 	bl	80032b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	; 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40004400 	.word	0x40004400
 8001a2c:	40021000 	.word	0x40021000

08001a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a36:	e003      	b.n	8001a40 <LoopCopyDataInit>

08001a38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a3e:	3104      	adds	r1, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a40:	480b      	ldr	r0, [pc, #44]	; (8001a70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a48:	d3f6      	bcc.n	8001a38 <CopyDataInit>
	ldr	r2, =_sbss
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a4c:	e002      	b.n	8001a54 <LoopFillZerobss>

08001a4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a50:	f842 3b04 	str.w	r3, [r2], #4

08001a54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <LoopForever+0x16>)
	cmp	r2, r3
 8001a56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a58:	d3f9      	bcc.n	8001a4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a5a:	f7ff fd25 	bl	80014a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f006 f8af 	bl	8007bc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a62:	f7ff fbb1 	bl	80011c8 <main>

08001a66 <LoopForever>:

LoopForever:
    b LoopForever
 8001a66:	e7fe      	b.n	8001a66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a68:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001a6c:	08008b8c 	.word	0x08008b8c
	ldr	r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a74:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001a78:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001a7c:	20002680 	.word	0x20002680

08001a80 <CAN_SCE_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <CAN_SCE_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x28>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x28>)
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f001 fbe6 	bl	8003266 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fc40 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fc16 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40022000 	.word	0x40022000

08001ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	2000267c 	.word	0x2000267c

08001ad8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;  
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	2000267c 	.word	0x2000267c

08001af0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b09a      	sub	sp, #104	; 0x68
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e172      	b.n	8001e32 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d176      	bne.n	8001c4c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d152      	bne.n	8001c0c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff f83f 	bl	8000c04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d13b      	bne.n	8001c0c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 ff2b 	bl	80029f0 <ADC_Disable>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d12f      	bne.n	8001c0c <HAL_ADC_Init+0xe0>
 8001bac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d12b      	bne.n	8001c0c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bbc:	f023 0302 	bic.w	r3, r3, #2
 8001bc0:	f043 0202 	orr.w	r2, r3, #2
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bd6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001be6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001be8:	4b94      	ldr	r3, [pc, #592]	; (8001e3c <HAL_ADC_Init+0x310>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a94      	ldr	r2, [pc, #592]	; (8001e40 <HAL_ADC_Init+0x314>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0c9a      	lsrs	r2, r3, #18
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bfe:	e002      	b.n	8001c06 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f9      	bne.n	8001c00 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c28:	d110      	bne.n	8001c4c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f023 0312 	bic.w	r3, r3, #18
 8001c32:	f043 0210 	orr.w	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f040 80df 	bne.w	8001e18 <HAL_ADC_Init+0x2ec>
 8001c5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 80da 	bne.w	8001e18 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 80d2 	bne.w	8001e18 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c7c:	f043 0202 	orr.w	r2, r3, #2
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c84:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <HAL_ADC_Init+0x318>)
 8001c86:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c90:	d102      	bne.n	8001c98 <HAL_ADC_Init+0x16c>
 8001c92:	4b6d      	ldr	r3, [pc, #436]	; (8001e48 <HAL_ADC_Init+0x31c>)
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	e002      	b.n	8001c9e <HAL_ADC_Init+0x172>
 8001c98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c9c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d108      	bne.n	8001cbe <HAL_ADC_Init+0x192>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_Init+0x192>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_ADC_Init+0x194>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d11c      	bne.n	8001cfe <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d010      	beq.n	8001cec <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d107      	bne.n	8001ce6 <HAL_ADC_Init+0x1ba>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Init+0x1ba>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_ADC_Init+0x1bc>
 8001ce6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d108      	bne.n	8001cfe <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cfc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7e5b      	ldrb	r3, [r3, #25]
 8001d02:	035b      	lsls	r3, r3, #13
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d08:	2a01      	cmp	r2, #1
 8001d0a:	d002      	beq.n	8001d12 <HAL_ADC_Init+0x1e6>
 8001d0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d10:	e000      	b.n	8001d14 <HAL_ADC_Init+0x1e8>
 8001d12:	2200      	movs	r2, #0
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d24:	4313      	orrs	r3, r2
 8001d26:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d11b      	bne.n	8001d6a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	7e5b      	ldrb	r3, [r3, #25]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	045a      	lsls	r2, r3, #17
 8001d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4a:	663b      	str	r3, [r7, #96]	; 0x60
 8001d4c:	e00d      	b.n	8001d6a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001d56:	f043 0220 	orr.w	r2, r3, #32
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d007      	beq.n	8001d82 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d114      	bne.n	8001dba <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d9e:	f023 0302 	bic.w	r3, r3, #2
 8001da2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7e1b      	ldrb	r3, [r3, #24]
 8001da8:	039a      	lsls	r2, r3, #14
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4313      	orrs	r3, r2
 8001db4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001db6:	4313      	orrs	r3, r2
 8001db8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_ADC_Init+0x320>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001dca:	430b      	orrs	r3, r1
 8001dcc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d10c      	bne.n	8001df0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	f023 010f 	bic.w	r1, r3, #15
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	1e5a      	subs	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30
 8001dee:	e007      	b.n	8001e00 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 020f 	bic.w	r2, r2, #15
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f023 0303 	bic.w	r3, r3, #3
 8001e0e:	f043 0201 	orr.w	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	641a      	str	r2, [r3, #64]	; 0x40
 8001e16:	e00a      	b.n	8001e2e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f023 0312 	bic.w	r3, r3, #18
 8001e20:	f043 0210 	orr.w	r2, r3, #16
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001e2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3768      	adds	r7, #104	; 0x68
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	431bde83 	.word	0x431bde83
 8001e44:	50000300 	.word	0x50000300
 8001e48:	50000100 	.word	0x50000100
 8001e4c:	fff0c007 	.word	0xfff0c007

08001e50 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d106      	bne.n	8001e80 <HAL_ADC_IRQHandler+0x30>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d00d      	beq.n	8001e9c <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d17a      	bne.n	8001f84 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d173      	bne.n	8001f84 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001eb4:	4b88      	ldr	r3, [pc, #544]	; (80020d8 <HAL_ADC_IRQHandler+0x288>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d010      	beq.n	8001ee2 <HAL_ADC_IRQHandler+0x92>
 8001ec0:	4b85      	ldr	r3, [pc, #532]	; (80020d8 <HAL_ADC_IRQHandler+0x288>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d00a      	beq.n	8001ee2 <HAL_ADC_IRQHandler+0x92>
 8001ecc:	4b82      	ldr	r3, [pc, #520]	; (80020d8 <HAL_ADC_IRQHandler+0x288>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	2b09      	cmp	r3, #9
 8001ed6:	d004      	beq.n	8001ee2 <HAL_ADC_IRQHandler+0x92>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ee0:	d104      	bne.n	8001eec <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	e003      	b.n	8001ef4 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001eec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d139      	bne.n	8001f76 <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d134      	bne.n	8001f76 <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d12d      	bne.n	8001f76 <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d11a      	bne.n	8001f5e <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 020c 	bic.w	r2, r2, #12
 8001f36:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d112      	bne.n	8001f76 <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
 8001f5c:	e00b      	b.n	8001f76 <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f043 0210 	orr.w	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f043 0201 	orr.w	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fdba 	bl	8001af0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	220c      	movs	r2, #12
 8001f82:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	d106      	bne.n	8001fa0 <HAL_ADC_IRQHandler+0x150>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d00f      	beq.n	8001fc0 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	f040 80a9 	bne.w	8002102 <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fba:	2b40      	cmp	r3, #64	; 0x40
 8001fbc:	f040 80a1 	bne.w	8002102 <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001fcc:	4b42      	ldr	r3, [pc, #264]	; (80020d8 <HAL_ADC_IRQHandler+0x288>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x1aa>
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	; (80020d8 <HAL_ADC_IRQHandler+0x288>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d00a      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x1aa>
 8001fe4:	4b3c      	ldr	r3, [pc, #240]	; (80020d8 <HAL_ADC_IRQHandler+0x288>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	2b09      	cmp	r3, #9
 8001fee:	d004      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x1aa>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ff8:	d104      	bne.n	8002004 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	e003      	b.n	800200c <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d010      	beq.n	800203c <HAL_ADC_IRQHandler+0x1ec>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002020:	2b00      	cmp	r3, #0
 8002022:	d167      	bne.n	80020f4 <HAL_ADC_IRQHandler+0x2a4>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 800202e:	2b00      	cmp	r3, #0
 8002030:	d160      	bne.n	80020f4 <HAL_ADC_IRQHandler+0x2a4>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002038:	2b00      	cmp	r3, #0
 800203a:	d15b      	bne.n	80020f4 <HAL_ADC_IRQHandler+0x2a4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002046:	2b40      	cmp	r3, #64	; 0x40
 8002048:	d154      	bne.n	80020f4 <HAL_ADC_IRQHandler+0x2a4>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800204a:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <HAL_ADC_IRQHandler+0x288>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	2b00      	cmp	r3, #0
 8002054:	d010      	beq.n	8002078 <HAL_ADC_IRQHandler+0x228>
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_ADC_IRQHandler+0x288>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 031f 	and.w	r3, r3, #31
 800205e:	2b06      	cmp	r3, #6
 8002060:	d00a      	beq.n	8002078 <HAL_ADC_IRQHandler+0x228>
 8002062:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <HAL_ADC_IRQHandler+0x288>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2b07      	cmp	r3, #7
 800206c:	d004      	beq.n	8002078 <HAL_ADC_IRQHandler+0x228>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002076:	d104      	bne.n	8002082 <HAL_ADC_IRQHandler+0x232>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	e003      	b.n	800208a <HAL_ADC_IRQHandler+0x23a>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d12f      	bne.n	80020f4 <HAL_ADC_IRQHandler+0x2a4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d11c      	bne.n	80020dc <HAL_ADC_IRQHandler+0x28c>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020b0:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d114      	bne.n	80020f4 <HAL_ADC_IRQHandler+0x2a4>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f043 0201 	orr.w	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
 80020d6:	e00d      	b.n	80020f4 <HAL_ADC_IRQHandler+0x2a4>
 80020d8:	50000300 	.word	0x50000300
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f043 0210 	orr.w	r2, r3, #16
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	f043 0201 	orr.w	r2, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f8cb 	bl	8002290 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2260      	movs	r2, #96	; 0x60
 8002100:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d113      	bne.n	8002138 <HAL_ADC_IRQHandler+0x2e8>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211a:	2b80      	cmp	r3, #128	; 0x80
 800211c:	d10c      	bne.n	8002138 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff fcea 	bl	8001b04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002146:	d115      	bne.n	8002174 <HAL_ADC_IRQHandler+0x324>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002156:	d10d      	bne.n	8002174 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f8a7 	bl	80022b8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002172:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002182:	d115      	bne.n	80021b0 <HAL_ADC_IRQHandler+0x360>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800218e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002192:	d10d      	bne.n	80021b0 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f893 	bl	80022cc <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ae:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d13d      	bne.n	800223a <HAL_ADC_IRQHandler+0x3ea>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b10      	cmp	r3, #16
 80021ca:	d136      	bne.n	800223a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d102      	bne.n	80021da <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 80021d4:	2301      	movs	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	e019      	b.n	800220e <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021da:	4b2c      	ldr	r3, [pc, #176]	; (800228c <HAL_ADC_IRQHandler+0x43c>)
 80021dc:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d10a      	bne.n	800220e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80021f8:	2301      	movs	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e007      	b.n	800220e <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 800220a:	2301      	movs	r3, #1
 800220c:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d10e      	bne.n	8002232 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	f043 0202 	orr.w	r2, r3, #2
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fc73 	bl	8001b18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2210      	movs	r2, #16
 8002238:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002248:	d11b      	bne.n	8002282 <HAL_ADC_IRQHandler+0x432>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002258:	d113      	bne.n	8002282 <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f043 0208 	orr.w	r2, r3, #8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800227a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f811 	bl	80022a4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	50000300 	.word	0x50000300

08002290 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b09b      	sub	sp, #108	; 0x6c
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x22>
 80022fe:	2302      	movs	r3, #2
 8002300:	e2a5      	b.n	800284e <HAL_ADC_ConfigChannel+0x56e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	f040 8289 	bne.w	800282c <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b04      	cmp	r3, #4
 8002320:	d81c      	bhi.n	800235c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	461a      	mov	r2, r3
 8002336:	231f      	movs	r3, #31
 8002338:	4093      	lsls	r3, r2
 800233a:	43db      	mvns	r3, r3
 800233c:	4019      	ands	r1, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa00 f203 	lsl.w	r2, r0, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
 800235a:	e063      	b.n	8002424 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b09      	cmp	r3, #9
 8002362:	d81e      	bhi.n	80023a2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	3b1e      	subs	r3, #30
 8002378:	221f      	movs	r2, #31
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	4019      	ands	r1, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	3b1e      	subs	r3, #30
 8002394:	fa00 f203 	lsl.w	r2, r0, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	635a      	str	r2, [r3, #52]	; 0x34
 80023a0:	e040      	b.n	8002424 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b0e      	cmp	r3, #14
 80023a8:	d81e      	bhi.n	80023e8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	3b3c      	subs	r3, #60	; 0x3c
 80023be:	221f      	movs	r2, #31
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	4019      	ands	r1, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	3b3c      	subs	r3, #60	; 0x3c
 80023da:	fa00 f203 	lsl.w	r2, r0, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
 80023e6:	e01d      	b.n	8002424 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	3b5a      	subs	r3, #90	; 0x5a
 80023fc:	221f      	movs	r2, #31
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	4019      	ands	r1, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	3b5a      	subs	r3, #90	; 0x5a
 8002418:	fa00 f203 	lsl.w	r2, r0, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 80e5 	bne.w	80025fe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b09      	cmp	r3, #9
 800243a:	d91c      	bls.n	8002476 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6999      	ldr	r1, [r3, #24]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	3b1e      	subs	r3, #30
 800244e:	2207      	movs	r2, #7
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	4019      	ands	r1, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	6898      	ldr	r0, [r3, #8]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	3b1e      	subs	r3, #30
 8002468:	fa00 f203 	lsl.w	r2, r0, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	619a      	str	r2, [r3, #24]
 8002474:	e019      	b.n	80024aa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6959      	ldr	r1, [r3, #20]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	2207      	movs	r2, #7
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	4019      	ands	r1, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6898      	ldr	r0, [r3, #8]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	fa00 f203 	lsl.w	r2, r0, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	08db      	lsrs	r3, r3, #3
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d84f      	bhi.n	800256c <HAL_ADC_ConfigChannel+0x28c>
 80024cc:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <HAL_ADC_ConfigChannel+0x1f4>)
 80024ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d2:	bf00      	nop
 80024d4:	080024e5 	.word	0x080024e5
 80024d8:	08002507 	.word	0x08002507
 80024dc:	08002529 	.word	0x08002529
 80024e0:	0800254b 	.word	0x0800254b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ea:	4b9e      	ldr	r3, [pc, #632]	; (8002764 <HAL_ADC_ConfigChannel+0x484>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	0691      	lsls	r1, r2, #26
 80024f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024f6:	430a      	orrs	r2, r1
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002502:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002504:	e07e      	b.n	8002604 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800250c:	4b95      	ldr	r3, [pc, #596]	; (8002764 <HAL_ADC_ConfigChannel+0x484>)
 800250e:	4013      	ands	r3, r2
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	0691      	lsls	r1, r2, #26
 8002516:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002518:	430a      	orrs	r2, r1
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002524:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002526:	e06d      	b.n	8002604 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800252e:	4b8d      	ldr	r3, [pc, #564]	; (8002764 <HAL_ADC_ConfigChannel+0x484>)
 8002530:	4013      	ands	r3, r2
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	0691      	lsls	r1, r2, #26
 8002538:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800253a:	430a      	orrs	r2, r1
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002546:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002548:	e05c      	b.n	8002604 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002550:	4b84      	ldr	r3, [pc, #528]	; (8002764 <HAL_ADC_ConfigChannel+0x484>)
 8002552:	4013      	ands	r3, r2
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	0691      	lsls	r1, r2, #26
 800255a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800255c:	430a      	orrs	r2, r1
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002568:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800256a:	e04b      	b.n	8002604 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002572:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	069b      	lsls	r3, r3, #26
 800257c:	429a      	cmp	r2, r3
 800257e:	d107      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800258e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002596:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	069b      	lsls	r3, r3, #26
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d107      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025b2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d107      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025d6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	069b      	lsls	r3, r3, #26
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d10a      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025fa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80025fc:	e001      	b.n	8002602 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80025fe:	bf00      	nop
 8002600:	e000      	b.n	8002604 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002602:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d108      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x344>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x344>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_ADC_ConfigChannel+0x346>
 8002624:	2300      	movs	r3, #0
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 810b 	bne.w	8002842 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d00f      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2201      	movs	r2, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	400a      	ands	r2, r1
 800264e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002652:	e049      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2201      	movs	r2, #1
 8002662:	409a      	lsls	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b09      	cmp	r3, #9
 8002674:	d91c      	bls.n	80026b0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6999      	ldr	r1, [r3, #24]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	3b1b      	subs	r3, #27
 8002688:	2207      	movs	r2, #7
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	4019      	ands	r1, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6898      	ldr	r0, [r3, #8]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	3b1b      	subs	r3, #27
 80026a2:	fa00 f203 	lsl.w	r2, r0, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	619a      	str	r2, [r3, #24]
 80026ae:	e01b      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6959      	ldr	r1, [r3, #20]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	2207      	movs	r2, #7
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	4019      	ands	r1, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6898      	ldr	r0, [r3, #8]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	fa00 f203 	lsl.w	r2, r0, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026e8:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <HAL_ADC_ConfigChannel+0x488>)
 80026ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	d105      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80026f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d015      	beq.n	800272c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002704:	2b11      	cmp	r3, #17
 8002706:	d105      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002718:	2b12      	cmp	r3, #18
 800271a:	f040 8092 	bne.w	8002842 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800271e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 808b 	bne.w	8002842 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002734:	d102      	bne.n	800273c <HAL_ADC_ConfigChannel+0x45c>
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_ADC_ConfigChannel+0x48c>)
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	e002      	b.n	8002742 <HAL_ADC_ConfigChannel+0x462>
 800273c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002740:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d10f      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x490>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b01      	cmp	r3, #1
 800275c:	d108      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x490>
 800275e:	2301      	movs	r3, #1
 8002760:	e007      	b.n	8002772 <HAL_ADC_ConfigChannel+0x492>
 8002762:	bf00      	nop
 8002764:	83fff000 	.word	0x83fff000
 8002768:	50000300 	.word	0x50000300
 800276c:	50000100 	.word	0x50000100
 8002770:	2300      	movs	r3, #0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d150      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002776:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002778:	2b00      	cmp	r3, #0
 800277a:	d010      	beq.n	800279e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d107      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x4b8>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x4b8>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_ADC_ConfigChannel+0x4ba>
 8002798:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800279a:	2b00      	cmp	r3, #0
 800279c:	d13c      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d11d      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x502>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ae:	d118      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80027b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ba:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <HAL_ADC_ConfigChannel+0x57c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a27      	ldr	r2, [pc, #156]	; (8002860 <HAL_ADC_ConfigChannel+0x580>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0c9a      	lsrs	r2, r3, #18
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027d2:	e002      	b.n	80027da <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f9      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027e0:	e02e      	b.n	8002840 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b11      	cmp	r3, #17
 80027e8:	d10b      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x522>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027f2:	d106      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80027f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80027fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027fe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002800:	e01e      	b.n	8002840 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b12      	cmp	r3, #18
 8002808:	d11a      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800280a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002814:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002816:	e013      	b.n	8002840 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800282a:	e00a      	b.n	8002842 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f043 0220 	orr.w	r2, r3, #32
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800283e:	e000      	b.n	8002842 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002840:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800284a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800284e:	4618      	mov	r0, r3
 8002850:	376c      	adds	r7, #108	; 0x6c
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000000 	.word	0x20000000
 8002860:	431bde83 	.word	0x431bde83

08002864 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002864:	b480      	push	{r7}
 8002866:	b099      	sub	sp, #100	; 0x64
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800287c:	d102      	bne.n	8002884 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800287e:	4b5a      	ldr	r3, [pc, #360]	; (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	e002      	b.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002884:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002888:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0a2      	b.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800289e:	2302      	movs	r3, #2
 80028a0:	e09b      	b.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d17f      	bne.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d179      	bne.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c4:	4b49      	ldr	r3, [pc, #292]	; (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80028c6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d040      	beq.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80028d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028e2:	035b      	lsls	r3, r3, #13
 80028e4:	430b      	orrs	r3, r1
 80028e6:	431a      	orrs	r2, r3
 80028e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ea:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d108      	bne.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800290c:	2300      	movs	r3, #0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d15c      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d107      	bne.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800292e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002930:	2b00      	cmp	r3, #0
 8002932:	d14b      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800293c:	f023 030f 	bic.w	r3, r3, #15
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	6811      	ldr	r1, [r2, #0]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	6892      	ldr	r2, [r2, #8]
 8002948:	430a      	orrs	r2, r1
 800294a:	431a      	orrs	r2, r3
 800294c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800294e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002950:	e03c      	b.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800295a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800295c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d108      	bne.n	800297e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800297e:	2300      	movs	r3, #0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d123      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d107      	bne.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80029a0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d112      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80029a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029ae:	f023 030f 	bic.w	r3, r3, #15
 80029b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029b4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029b6:	e009      	b.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029ca:	e000      	b.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029cc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80029d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80029da:	4618      	mov	r0, r3
 80029dc:	3764      	adds	r7, #100	; 0x64
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	50000100 	.word	0x50000100
 80029ec:	50000300 	.word	0x50000300

080029f0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d108      	bne.n	8002a1c <ADC_Disable+0x2c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <ADC_Disable+0x2c>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <ADC_Disable+0x2e>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d040      	beq.n	8002aa4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 030d 	and.w	r3, r3, #13
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d10f      	bne.n	8002a50 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0202 	orr.w	r2, r2, #2
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2203      	movs	r2, #3
 8002a46:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002a48:	f7ff f846 	bl	8001ad8 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a4e:	e022      	b.n	8002a96 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f043 0210 	orr.w	r2, r3, #16
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e01c      	b.n	8002aa6 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a6c:	f7ff f834 	bl	8001ad8 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d90d      	bls.n	8002a96 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f043 0210 	orr.w	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e007      	b.n	8002aa6 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d0e3      	beq.n	8002a6c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0ed      	b.n	8002c9c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7fe f9b5 	bl	8000e3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0202 	bic.w	r2, r2, #2
 8002ae0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ae2:	f7fe fff9 	bl	8001ad8 <HAL_GetTick>
 8002ae6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ae8:	e012      	b.n	8002b10 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002aea:	f7fe fff5 	bl	8001ad8 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b0a      	cmp	r3, #10
 8002af6:	d90b      	bls.n	8002b10 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2205      	movs	r2, #5
 8002b08:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0c5      	b.n	8002c9c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e5      	bne.n	8002aea <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b2e:	f7fe ffd3 	bl	8001ad8 <HAL_GetTick>
 8002b32:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b34:	e012      	b.n	8002b5c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b36:	f7fe ffcf 	bl	8001ad8 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b0a      	cmp	r3, #10
 8002b42:	d90b      	bls.n	8002b5c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2205      	movs	r2, #5
 8002b54:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e09f      	b.n	8002c9c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0e5      	beq.n	8002b36 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	7e1b      	ldrb	r3, [r3, #24]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d108      	bne.n	8002b84 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e007      	b.n	8002b94 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7e5b      	ldrb	r3, [r3, #25]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d108      	bne.n	8002bae <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e007      	b.n	8002bbe <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7e9b      	ldrb	r3, [r3, #26]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d108      	bne.n	8002bd8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0220 	orr.w	r2, r2, #32
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e007      	b.n	8002be8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0220 	bic.w	r2, r2, #32
 8002be6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7edb      	ldrb	r3, [r3, #27]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d108      	bne.n	8002c02 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0210 	bic.w	r2, r2, #16
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	e007      	b.n	8002c12 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0210 	orr.w	r2, r2, #16
 8002c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7f1b      	ldrb	r3, [r3, #28]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d108      	bne.n	8002c2c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0208 	orr.w	r2, r2, #8
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e007      	b.n	8002c3c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0208 	bic.w	r2, r2, #8
 8002c3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7f5b      	ldrb	r3, [r3, #29]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d108      	bne.n	8002c56 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0204 	orr.w	r2, r2, #4
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e007      	b.n	8002c66 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0204 	bic.w	r2, r2, #4
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	ea42 0103 	orr.w	r1, r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	1e5a      	subs	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d07c      	beq.n	8002de4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d023      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f97d 	bl	8003006 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d0c:	e016      	b.n	8002d3c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d20:	e00c      	b.n	8002d3c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d004      	beq.n	8002d36 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	e002      	b.n	8002d3c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f983 	bl	8003042 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d024      	beq.n	8002d90 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f95d 	bl	800301a <HAL_CAN_TxMailbox1CompleteCallback>
 8002d60:	e016      	b.n	8002d90 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d004      	beq.n	8002d76 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
 8002d74:	e00c      	b.n	8002d90 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d004      	beq.n	8002d8a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
 8002d88:	e002      	b.n	8002d90 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f963 	bl	8003056 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d024      	beq.n	8002de4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002da2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f93d 	bl	800302e <HAL_CAN_TxMailbox2CompleteCallback>
 8002db4:	e016      	b.n	8002de4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc8:	e00c      	b.n	8002de4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
 8002ddc:	e002      	b.n	8002de4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f943 	bl	800306a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00c      	beq.n	8002e08 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2210      	movs	r2, #16
 8002e06:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d006      	beq.n	8002e2a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2208      	movs	r2, #8
 8002e22:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f934 	bl	8003092 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d009      	beq.n	8002e48 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f91b 	bl	800307e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00c      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2210      	movs	r2, #16
 8002e6a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d006      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2208      	movs	r2, #8
 8002e86:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f916 	bl	80030ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d009      	beq.n	8002eac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8fd 	bl	80030a6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f900 	bl	80030ce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f8f9 	bl	80030e2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d075      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d06c      	beq.n	8002fde <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	f043 0302 	orr.w	r3, r3, #2
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	f043 0304 	orr.w	r3, r3, #4
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d03d      	beq.n	8002fde <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d038      	beq.n	8002fde <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f72:	2b30      	cmp	r3, #48	; 0x30
 8002f74:	d017      	beq.n	8002fa6 <HAL_CAN_IRQHandler+0x302>
 8002f76:	2b30      	cmp	r3, #48	; 0x30
 8002f78:	d804      	bhi.n	8002f84 <HAL_CAN_IRQHandler+0x2e0>
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d009      	beq.n	8002f92 <HAL_CAN_IRQHandler+0x2ee>
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d00c      	beq.n	8002f9c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f82:	e024      	b.n	8002fce <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002f84:	2b50      	cmp	r3, #80	; 0x50
 8002f86:	d018      	beq.n	8002fba <HAL_CAN_IRQHandler+0x316>
 8002f88:	2b60      	cmp	r3, #96	; 0x60
 8002f8a:	d01b      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x320>
 8002f8c:	2b40      	cmp	r3, #64	; 0x40
 8002f8e:	d00f      	beq.n	8002fb0 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002f90:	e01d      	b.n	8002fce <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	f043 0308 	orr.w	r3, r3, #8
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f9a:	e018      	b.n	8002fce <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	f043 0310 	orr.w	r3, r3, #16
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fa4:	e013      	b.n	8002fce <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	f043 0320 	orr.w	r3, r3, #32
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fae:	e00e      	b.n	8002fce <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fb8:	e009      	b.n	8002fce <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fc2:	e004      	b.n	8002fce <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fcc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699a      	ldr	r2, [r3, #24]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002fdc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f87c 	bl	80030f6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ffe:	bf00      	nop
 8003000:	3728      	adds	r7, #40	; 0x28
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313e:	4a04      	ldr	r2, [pc, #16]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	60d3      	str	r3, [r2, #12]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <__NVIC_GetPriorityGrouping+0x18>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 0307 	and.w	r3, r3, #7
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	2b00      	cmp	r3, #0
 8003180:	db0b      	blt.n	800319a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	4907      	ldr	r1, [pc, #28]	; (80031a8 <__NVIC_EnableIRQ+0x38>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2001      	movs	r0, #1
 8003192:	fa00 f202 	lsl.w	r2, r0, r2
 8003196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e100 	.word	0xe000e100

080031ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	6039      	str	r1, [r7, #0]
 80031b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	db0a      	blt.n	80031d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	490c      	ldr	r1, [pc, #48]	; (80031f8 <__NVIC_SetPriority+0x4c>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	0112      	lsls	r2, r2, #4
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	440b      	add	r3, r1
 80031d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d4:	e00a      	b.n	80031ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	4908      	ldr	r1, [pc, #32]	; (80031fc <__NVIC_SetPriority+0x50>)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	3b04      	subs	r3, #4
 80031e4:	0112      	lsls	r2, r2, #4
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	440b      	add	r3, r1
 80031ea:	761a      	strb	r2, [r3, #24]
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000e100 	.word	0xe000e100
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f1c3 0307 	rsb	r3, r3, #7
 800321a:	2b04      	cmp	r3, #4
 800321c:	bf28      	it	cs
 800321e:	2304      	movcs	r3, #4
 8003220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3304      	adds	r3, #4
 8003226:	2b06      	cmp	r3, #6
 8003228:	d902      	bls.n	8003230 <NVIC_EncodePriority+0x30>
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3b03      	subs	r3, #3
 800322e:	e000      	b.n	8003232 <NVIC_EncodePriority+0x32>
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	f04f 32ff 	mov.w	r2, #4294967295
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43da      	mvns	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	401a      	ands	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003248:	f04f 31ff 	mov.w	r1, #4294967295
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	43d9      	mvns	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	4313      	orrs	r3, r2
         );
}
 800325a:	4618      	mov	r0, r3
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff ff4c 	bl	800310c <__NVIC_SetPriorityGrouping>
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800328e:	f7ff ff61 	bl	8003154 <__NVIC_GetPriorityGrouping>
 8003292:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	6978      	ldr	r0, [r7, #20]
 800329a:	f7ff ffb1 	bl	8003200 <NVIC_EncodePriority>
 800329e:	4602      	mov	r2, r0
 80032a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a4:	4611      	mov	r1, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ff80 	bl	80031ac <__NVIC_SetPriority>
}
 80032ac:	bf00      	nop
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ff54 	bl	8003170 <__NVIC_EnableIRQ>
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e037      	b.n	8003356 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032fc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003300:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800330a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003316:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003322:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f8f1 	bl	8003520 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}  
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003370:	2b02      	cmp	r3, #2
 8003372:	d005      	beq.n	8003380 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2204      	movs	r2, #4
 8003378:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
 800337e:	e027      	b.n	80033d0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 020e 	bic.w	r2, r2, #14
 800338e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f202 	lsl.w	r2, r1, r2
 80033ae:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
    } 
  }
  return status;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	2204      	movs	r2, #4
 80033f8:	409a      	lsls	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d024      	beq.n	800344c <HAL_DMA_IRQHandler+0x72>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01f      	beq.n	800344c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d107      	bne.n	800342a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0204 	bic.w	r2, r2, #4
 8003428:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	2104      	movs	r1, #4
 8003434:	fa01 f202 	lsl.w	r2, r1, r2
 8003438:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d06a      	beq.n	8003518 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800344a:	e065      	b.n	8003518 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	2202      	movs	r2, #2
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d02c      	beq.n	80034b6 <HAL_DMA_IRQHandler+0xdc>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d027      	beq.n	80034b6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 020a 	bic.w	r2, r2, #10
 8003482:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	2102      	movs	r1, #2
 8003496:	fa01 f202 	lsl.w	r2, r1, r2
 800349a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d035      	beq.n	8003518 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80034b4:	e030      	b.n	8003518 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2208      	movs	r2, #8
 80034bc:	409a      	lsls	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d028      	beq.n	8003518 <HAL_DMA_IRQHandler+0x13e>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d023      	beq.n	8003518 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 020e 	bic.w	r2, r2, #14
 80034de:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f202 	lsl.w	r2, r1, r2
 80034ee:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	2b00      	cmp	r3, #0
 800350c:	d004      	beq.n	8003518 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4798      	blx	r3
    }
  }
}  
 8003516:	e7ff      	b.n	8003518 <HAL_DMA_IRQHandler+0x13e>
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <DMA_CalcBaseAndBitshift+0x34>)
 8003530:	4413      	add	r3, r2
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <DMA_CalcBaseAndBitshift+0x38>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	009a      	lsls	r2, r3, #2
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a06      	ldr	r2, [pc, #24]	; (800355c <DMA_CalcBaseAndBitshift+0x3c>)
 8003544:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	bffdfff8 	.word	0xbffdfff8
 8003558:	cccccccd 	.word	0xcccccccd
 800355c:	40020000 	.word	0x40020000

08003560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800356e:	e14e      	b.n	800380e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	2101      	movs	r1, #1
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8140 	beq.w	8003808 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x38>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b12      	cmp	r3, #18
 8003596:	d123      	bne.n	80035e0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	08da      	lsrs	r2, r3, #3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3208      	adds	r2, #8
 80035a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	220f      	movs	r2, #15
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	08da      	lsrs	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3208      	adds	r2, #8
 80035da:	6939      	ldr	r1, [r7, #16]
 80035dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0203 	and.w	r2, r3, #3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d00b      	beq.n	8003634 <HAL_GPIO_Init+0xd4>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d007      	beq.n	8003634 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003628:	2b11      	cmp	r3, #17
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b12      	cmp	r3, #18
 8003632:	d130      	bne.n	8003696 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	2203      	movs	r2, #3
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4013      	ands	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800366a:	2201      	movs	r2, #1
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4013      	ands	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f003 0201 	and.w	r2, r3, #1
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 809a 	beq.w	8003808 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d4:	4b55      	ldr	r3, [pc, #340]	; (800382c <HAL_GPIO_Init+0x2cc>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	4a54      	ldr	r2, [pc, #336]	; (800382c <HAL_GPIO_Init+0x2cc>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6193      	str	r3, [r2, #24]
 80036e0:	4b52      	ldr	r3, [pc, #328]	; (800382c <HAL_GPIO_Init+0x2cc>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036ec:	4a50      	ldr	r2, [pc, #320]	; (8003830 <HAL_GPIO_Init+0x2d0>)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	3302      	adds	r3, #2
 80036f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	220f      	movs	r2, #15
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003716:	d013      	beq.n	8003740 <HAL_GPIO_Init+0x1e0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a46      	ldr	r2, [pc, #280]	; (8003834 <HAL_GPIO_Init+0x2d4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00d      	beq.n	800373c <HAL_GPIO_Init+0x1dc>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a45      	ldr	r2, [pc, #276]	; (8003838 <HAL_GPIO_Init+0x2d8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d007      	beq.n	8003738 <HAL_GPIO_Init+0x1d8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a44      	ldr	r2, [pc, #272]	; (800383c <HAL_GPIO_Init+0x2dc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_GPIO_Init+0x1d4>
 8003730:	2303      	movs	r3, #3
 8003732:	e006      	b.n	8003742 <HAL_GPIO_Init+0x1e2>
 8003734:	2305      	movs	r3, #5
 8003736:	e004      	b.n	8003742 <HAL_GPIO_Init+0x1e2>
 8003738:	2302      	movs	r3, #2
 800373a:	e002      	b.n	8003742 <HAL_GPIO_Init+0x1e2>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <HAL_GPIO_Init+0x1e2>
 8003740:	2300      	movs	r3, #0
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	f002 0203 	and.w	r2, r2, #3
 8003748:	0092      	lsls	r2, r2, #2
 800374a:	4093      	lsls	r3, r2
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003752:	4937      	ldr	r1, [pc, #220]	; (8003830 <HAL_GPIO_Init+0x2d0>)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	3302      	adds	r3, #2
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003760:	4b37      	ldr	r3, [pc, #220]	; (8003840 <HAL_GPIO_Init+0x2e0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	43db      	mvns	r3, r3
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003784:	4a2e      	ldr	r2, [pc, #184]	; (8003840 <HAL_GPIO_Init+0x2e0>)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800378a:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_GPIO_Init+0x2e0>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	43db      	mvns	r3, r3
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80037ae:	4a24      	ldr	r2, [pc, #144]	; (8003840 <HAL_GPIO_Init+0x2e0>)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037b4:	4b22      	ldr	r3, [pc, #136]	; (8003840 <HAL_GPIO_Init+0x2e0>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	43db      	mvns	r3, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037d8:	4a19      	ldr	r2, [pc, #100]	; (8003840 <HAL_GPIO_Init+0x2e0>)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037de:	4b18      	ldr	r3, [pc, #96]	; (8003840 <HAL_GPIO_Init+0x2e0>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4013      	ands	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003802:	4a0f      	ldr	r2, [pc, #60]	; (8003840 <HAL_GPIO_Init+0x2e0>)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	3301      	adds	r3, #1
 800380c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	f47f aea9 	bne.w	8003570 <HAL_GPIO_Init+0x10>
  }
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	40010000 	.word	0x40010000
 8003834:	48000400 	.word	0x48000400
 8003838:	48000800 	.word	0x48000800
 800383c:	48000c00 	.word	0x48000c00
 8003840:	40010400 	.word	0x40010400

08003844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	807b      	strh	r3, [r7, #2]
 8003850:	4613      	mov	r3, r2
 8003852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003854:	787b      	ldrb	r3, [r7, #1]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800385a:	887a      	ldrh	r2, [r7, #2]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003860:	e002      	b.n	8003868 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003862:	887a      	ldrh	r2, [r7, #2]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800387a:	af00      	add	r7, sp, #0
 800387c:	1d3b      	adds	r3, r7, #4
 800387e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003880:	1d3b      	adds	r3, r7, #4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d102      	bne.n	800388e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	f000 bef4 	b.w	8004676 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800388e:	1d3b      	adds	r3, r7, #4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 816a 	beq.w	8003b72 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800389e:	4bb3      	ldr	r3, [pc, #716]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d00c      	beq.n	80038c4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038aa:	4bb0      	ldr	r3, [pc, #704]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d159      	bne.n	800396a <HAL_RCC_OscConfig+0xf6>
 80038b6:	4bad      	ldr	r3, [pc, #692]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c2:	d152      	bne.n	800396a <HAL_RCC_OscConfig+0xf6>
 80038c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038c8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038cc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038d8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d102      	bne.n	80038f6 <HAL_RCC_OscConfig+0x82>
 80038f0:	4b9e      	ldr	r3, [pc, #632]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	e015      	b.n	8003922 <HAL_RCC_OscConfig+0xae>
 80038f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038fa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800390a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800390e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003912:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800391e:	4b93      	ldr	r3, [pc, #588]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003926:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800392a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800392e:	fa92 f2a2 	rbit	r2, r2
 8003932:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003936:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800393a:	fab2 f282 	clz	r2, r2
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	f042 0220 	orr.w	r2, r2, #32
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	f002 021f 	and.w	r2, r2, #31
 800394a:	2101      	movs	r1, #1
 800394c:	fa01 f202 	lsl.w	r2, r1, r2
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 810c 	beq.w	8003b70 <HAL_RCC_OscConfig+0x2fc>
 8003958:	1d3b      	adds	r3, r7, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f040 8106 	bne.w	8003b70 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f000 be86 	b.w	8004676 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396a:	1d3b      	adds	r3, r7, #4
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003974:	d106      	bne.n	8003984 <HAL_RCC_OscConfig+0x110>
 8003976:	4b7d      	ldr	r3, [pc, #500]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a7c      	ldr	r2, [pc, #496]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e030      	b.n	80039e6 <HAL_RCC_OscConfig+0x172>
 8003984:	1d3b      	adds	r3, r7, #4
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x134>
 800398e:	4b77      	ldr	r3, [pc, #476]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a76      	ldr	r2, [pc, #472]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 8003994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4b74      	ldr	r3, [pc, #464]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a73      	ldr	r2, [pc, #460]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80039a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e01e      	b.n	80039e6 <HAL_RCC_OscConfig+0x172>
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b2:	d10c      	bne.n	80039ce <HAL_RCC_OscConfig+0x15a>
 80039b4:	4b6d      	ldr	r3, [pc, #436]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a6c      	ldr	r2, [pc, #432]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80039ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a69      	ldr	r2, [pc, #420]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	e00b      	b.n	80039e6 <HAL_RCC_OscConfig+0x172>
 80039ce:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a66      	ldr	r2, [pc, #408]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80039d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b64      	ldr	r3, [pc, #400]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a63      	ldr	r2, [pc, #396]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80039e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039e6:	4b61      	ldr	r3, [pc, #388]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	f023 020f 	bic.w	r2, r3, #15
 80039ee:	1d3b      	adds	r3, r7, #4
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	495d      	ldr	r1, [pc, #372]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d059      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7fe f868 	bl	8001ad8 <HAL_GetTick>
 8003a08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a0e:	f7fe f863 	bl	8001ad8 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d902      	bls.n	8003a24 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	f000 be29 	b.w	8004676 <HAL_RCC_OscConfig+0xe02>
 8003a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a28:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003a38:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3c:	fab3 f383 	clz	r3, r3
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d102      	bne.n	8003a56 <HAL_RCC_OscConfig+0x1e2>
 8003a50:	4b46      	ldr	r3, [pc, #280]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	e015      	b.n	8003a82 <HAL_RCC_OscConfig+0x20e>
 8003a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a5a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a6e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003a72:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a86:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003a8a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003a8e:	fa92 f2a2 	rbit	r2, r2
 8003a92:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003a96:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003a9a:	fab2 f282 	clz	r2, r2
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	f042 0220 	orr.w	r2, r2, #32
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	f002 021f 	and.w	r2, r2, #31
 8003aaa:	2101      	movs	r1, #1
 8003aac:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0ab      	beq.n	8003a0e <HAL_RCC_OscConfig+0x19a>
 8003ab6:	e05c      	b.n	8003b72 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fe f80e 	bl	8001ad8 <HAL_GetTick>
 8003abc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac2:	f7fe f809 	bl	8001ad8 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	; 0x64
 8003ad0:	d902      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	f000 bdcf 	b.w	8004676 <HAL_RCC_OscConfig+0xe02>
 8003ad8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003adc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003aec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af0:	fab3 f383 	clz	r3, r3
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d102      	bne.n	8003b0a <HAL_RCC_OscConfig+0x296>
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	e015      	b.n	8003b36 <HAL_RCC_OscConfig+0x2c2>
 8003b0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b0e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003b1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b22:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003b26:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003b2a:	fa93 f3a3 	rbit	r3, r3
 8003b2e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003b32:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <HAL_RCC_OscConfig+0x2f8>)
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b3a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003b3e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003b42:	fa92 f2a2 	rbit	r2, r2
 8003b46:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003b4a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003b4e:	fab2 f282 	clz	r2, r2
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	f042 0220 	orr.w	r2, r2, #32
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	f002 021f 	and.w	r2, r2, #31
 8003b5e:	2101      	movs	r1, #1
 8003b60:	fa01 f202 	lsl.w	r2, r1, r2
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1ab      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x24e>
 8003b6a:	e002      	b.n	8003b72 <HAL_RCC_OscConfig+0x2fe>
 8003b6c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b72:	1d3b      	adds	r3, r7, #4
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 816f 	beq.w	8003e60 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b82:	4bd0      	ldr	r3, [pc, #832]	; (8003ec4 <HAL_RCC_OscConfig+0x650>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 030c 	and.w	r3, r3, #12
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00b      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b8e:	4bcd      	ldr	r3, [pc, #820]	; (8003ec4 <HAL_RCC_OscConfig+0x650>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d16c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x400>
 8003b9a:	4bca      	ldr	r3, [pc, #808]	; (8003ec4 <HAL_RCC_OscConfig+0x650>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d166      	bne.n	8003c74 <HAL_RCC_OscConfig+0x400>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003bb8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bbc:	fab3 f383 	clz	r3, r3
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d102      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x362>
 8003bd0:	4bbc      	ldr	r3, [pc, #752]	; (8003ec4 <HAL_RCC_OscConfig+0x650>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	e013      	b.n	8003bfe <HAL_RCC_OscConfig+0x38a>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003be8:	2302      	movs	r3, #2
 8003bea:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003bee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003bfa:	4bb2      	ldr	r3, [pc, #712]	; (8003ec4 <HAL_RCC_OscConfig+0x650>)
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003c04:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003c08:	fa92 f2a2 	rbit	r2, r2
 8003c0c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003c10:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003c14:	fab2 f282 	clz	r2, r2
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	f042 0220 	orr.w	r2, r2, #32
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	f002 021f 	and.w	r2, r2, #31
 8003c24:	2101      	movs	r1, #1
 8003c26:	fa01 f202 	lsl.w	r2, r1, r2
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <HAL_RCC_OscConfig+0x3cc>
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d002      	beq.n	8003c40 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f000 bd1b 	b.w	8004676 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c40:	4ba0      	ldr	r3, [pc, #640]	; (8003ec4 <HAL_RCC_OscConfig+0x650>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c48:	1d3b      	adds	r3, r7, #4
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	21f8      	movs	r1, #248	; 0xf8
 8003c50:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003c58:	fa91 f1a1 	rbit	r1, r1
 8003c5c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003c60:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003c64:	fab1 f181 	clz	r1, r1
 8003c68:	b2c9      	uxtb	r1, r1
 8003c6a:	408b      	lsls	r3, r1
 8003c6c:	4995      	ldr	r1, [pc, #596]	; (8003ec4 <HAL_RCC_OscConfig+0x650>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c72:	e0f5      	b.n	8003e60 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 8085 	beq.w	8003d8a <HAL_RCC_OscConfig+0x516>
 8003c80:	2301      	movs	r3, #1
 8003c82:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003c92:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c96:	fab3 f383 	clz	r3, r3
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ca0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2301      	movs	r3, #1
 8003caa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fd ff14 	bl	8001ad8 <HAL_GetTick>
 8003cb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb4:	e00a      	b.n	8003ccc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb6:	f7fd ff0f 	bl	8001ad8 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d902      	bls.n	8003ccc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	f000 bcd5 	b.w	8004676 <HAL_RCC_OscConfig+0xe02>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003cde:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d102      	bne.n	8003cfc <HAL_RCC_OscConfig+0x488>
 8003cf6:	4b73      	ldr	r3, [pc, #460]	; (8003ec4 <HAL_RCC_OscConfig+0x650>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	e013      	b.n	8003d24 <HAL_RCC_OscConfig+0x4b0>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003d0e:	2302      	movs	r3, #2
 8003d10:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003d14:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003d18:	fa93 f3a3 	rbit	r3, r3
 8003d1c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003d20:	4b68      	ldr	r3, [pc, #416]	; (8003ec4 <HAL_RCC_OscConfig+0x650>)
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	2202      	movs	r2, #2
 8003d26:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003d2a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003d2e:	fa92 f2a2 	rbit	r2, r2
 8003d32:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003d36:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003d3a:	fab2 f282 	clz	r2, r2
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	f042 0220 	orr.w	r2, r2, #32
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	f002 021f 	and.w	r2, r2, #31
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0af      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d56:	4b5b      	ldr	r3, [pc, #364]	; (8003ec4 <HAL_RCC_OscConfig+0x650>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	21f8      	movs	r1, #248	; 0xf8
 8003d66:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003d6e:	fa91 f1a1 	rbit	r1, r1
 8003d72:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003d76:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003d7a:	fab1 f181 	clz	r1, r1
 8003d7e:	b2c9      	uxtb	r1, r1
 8003d80:	408b      	lsls	r3, r1
 8003d82:	4950      	ldr	r1, [pc, #320]	; (8003ec4 <HAL_RCC_OscConfig+0x650>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	600b      	str	r3, [r1, #0]
 8003d88:	e06a      	b.n	8003e60 <HAL_RCC_OscConfig+0x5ec>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003d94:	fa93 f3a3 	rbit	r3, r3
 8003d98:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003d9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da0:	fab3 f383 	clz	r3, r3
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003daa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	461a      	mov	r2, r3
 8003db2:	2300      	movs	r3, #0
 8003db4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fd fe8f 	bl	8001ad8 <HAL_GetTick>
 8003dba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc0:	f7fd fe8a 	bl	8001ad8 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d902      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	f000 bc50 	b.w	8004676 <HAL_RCC_OscConfig+0xe02>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dec:	fab3 f383 	clz	r3, r3
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d102      	bne.n	8003e06 <HAL_RCC_OscConfig+0x592>
 8003e00:	4b30      	ldr	r3, [pc, #192]	; (8003ec4 <HAL_RCC_OscConfig+0x650>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	e013      	b.n	8003e2e <HAL_RCC_OscConfig+0x5ba>
 8003e06:	2302      	movs	r3, #2
 8003e08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e18:	2302      	movs	r3, #2
 8003e1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e22:	fa93 f3a3 	rbit	r3, r3
 8003e26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003e2a:	4b26      	ldr	r3, [pc, #152]	; (8003ec4 <HAL_RCC_OscConfig+0x650>)
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003e34:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003e38:	fa92 f2a2 	rbit	r2, r2
 8003e3c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003e40:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003e44:	fab2 f282 	clz	r2, r2
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	f042 0220 	orr.w	r2, r2, #32
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	f002 021f 	and.w	r2, r2, #31
 8003e54:	2101      	movs	r1, #1
 8003e56:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1af      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e60:	1d3b      	adds	r3, r7, #4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80da 	beq.w	8004024 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e70:	1d3b      	adds	r3, r7, #4
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d069      	beq.n	8003f4e <HAL_RCC_OscConfig+0x6da>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e90:	fab3 f383 	clz	r3, r3
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_RCC_OscConfig+0x654>)
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea4:	f7fd fe18 	bl	8001ad8 <HAL_GetTick>
 8003ea8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eac:	e00e      	b.n	8003ecc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eae:	f7fd fe13 	bl	8001ad8 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d906      	bls.n	8003ecc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e3d9      	b.n	8004676 <HAL_RCC_OscConfig+0xe02>
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	10908120 	.word	0x10908120
 8003ecc:	2302      	movs	r3, #2
 8003ece:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ed6:	fa93 f3a3 	rbit	r3, r3
 8003eda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ede:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	fa93 f2a3 	rbit	r2, r3
 8003ef0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003efa:	2202      	movs	r2, #2
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	fa93 f2a3 	rbit	r2, r3
 8003f08:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003f0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0e:	4ba5      	ldr	r3, [pc, #660]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 8003f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003f16:	2102      	movs	r1, #2
 8003f18:	6019      	str	r1, [r3, #0]
 8003f1a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	fa93 f1a3 	rbit	r1, r3
 8003f24:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003f28:	6019      	str	r1, [r3, #0]
  return result;
 8003f2a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	fab3 f383 	clz	r3, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	2101      	movs	r1, #1
 8003f42:	fa01 f303 	lsl.w	r3, r1, r3
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0b0      	beq.n	8003eae <HAL_RCC_OscConfig+0x63a>
 8003f4c:	e06a      	b.n	8004024 <HAL_RCC_OscConfig+0x7b0>
 8003f4e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	fa93 f2a3 	rbit	r2, r3
 8003f60:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003f64:	601a      	str	r2, [r3, #0]
  return result;
 8003f66:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003f6a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f6c:	fab3 f383 	clz	r3, r3
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	4b8c      	ldr	r3, [pc, #560]	; (80041a8 <HAL_RCC_OscConfig+0x934>)
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f80:	f7fd fdaa 	bl	8001ad8 <HAL_GetTick>
 8003f84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f88:	e009      	b.n	8003f9e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f8a:	f7fd fda5 	bl	8001ad8 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e36b      	b.n	8004676 <HAL_RCC_OscConfig+0xe02>
 8003f9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	fa93 f2a3 	rbit	r2, r3
 8003fb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003fba:	2202      	movs	r2, #2
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	fa93 f2a3 	rbit	r2, r3
 8003fc8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	fa93 f2a3 	rbit	r2, r3
 8003fe0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003fe4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe6:	4b6f      	ldr	r3, [pc, #444]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 8003fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003fee:	2102      	movs	r1, #2
 8003ff0:	6019      	str	r1, [r3, #0]
 8003ff2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	fa93 f1a3 	rbit	r1, r3
 8003ffc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004000:	6019      	str	r1, [r3, #0]
  return result;
 8004002:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	fab3 f383 	clz	r3, r3
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	2101      	movs	r1, #1
 800401a:	fa01 f303 	lsl.w	r3, r1, r3
 800401e:	4013      	ands	r3, r2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1b2      	bne.n	8003f8a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004024:	1d3b      	adds	r3, r7, #4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 8158 	beq.w	80042e4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004034:	2300      	movs	r3, #0
 8004036:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403a:	4b5a      	ldr	r3, [pc, #360]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d112      	bne.n	800406c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004046:	4b57      	ldr	r3, [pc, #348]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	4a56      	ldr	r2, [pc, #344]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 800404c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004050:	61d3      	str	r3, [r2, #28]
 8004052:	4b54      	ldr	r3, [pc, #336]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800405a:	f107 0308 	add.w	r3, r7, #8
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	f107 0308 	add.w	r3, r7, #8
 8004064:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406c:	4b4f      	ldr	r3, [pc, #316]	; (80041ac <HAL_RCC_OscConfig+0x938>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d11a      	bne.n	80040ae <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004078:	4b4c      	ldr	r3, [pc, #304]	; (80041ac <HAL_RCC_OscConfig+0x938>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a4b      	ldr	r2, [pc, #300]	; (80041ac <HAL_RCC_OscConfig+0x938>)
 800407e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004082:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004084:	f7fd fd28 	bl	8001ad8 <HAL_GetTick>
 8004088:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408c:	e009      	b.n	80040a2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408e:	f7fd fd23 	bl	8001ad8 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	; 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e2e9      	b.n	8004676 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a2:	4b42      	ldr	r3, [pc, #264]	; (80041ac <HAL_RCC_OscConfig+0x938>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0ef      	beq.n	800408e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d106      	bne.n	80040c6 <HAL_RCC_OscConfig+0x852>
 80040b8:	4b3a      	ldr	r3, [pc, #232]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	4a39      	ldr	r2, [pc, #228]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6213      	str	r3, [r2, #32]
 80040c4:	e02f      	b.n	8004126 <HAL_RCC_OscConfig+0x8b2>
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10c      	bne.n	80040ea <HAL_RCC_OscConfig+0x876>
 80040d0:	4b34      	ldr	r3, [pc, #208]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	4a33      	ldr	r2, [pc, #204]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	6213      	str	r3, [r2, #32]
 80040dc:	4b31      	ldr	r3, [pc, #196]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	4a30      	ldr	r2, [pc, #192]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 80040e2:	f023 0304 	bic.w	r3, r3, #4
 80040e6:	6213      	str	r3, [r2, #32]
 80040e8:	e01d      	b.n	8004126 <HAL_RCC_OscConfig+0x8b2>
 80040ea:	1d3b      	adds	r3, r7, #4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b05      	cmp	r3, #5
 80040f2:	d10c      	bne.n	800410e <HAL_RCC_OscConfig+0x89a>
 80040f4:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	4a2a      	ldr	r2, [pc, #168]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 80040fa:	f043 0304 	orr.w	r3, r3, #4
 80040fe:	6213      	str	r3, [r2, #32]
 8004100:	4b28      	ldr	r3, [pc, #160]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	4a27      	ldr	r2, [pc, #156]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	6213      	str	r3, [r2, #32]
 800410c:	e00b      	b.n	8004126 <HAL_RCC_OscConfig+0x8b2>
 800410e:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4a24      	ldr	r2, [pc, #144]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	6213      	str	r3, [r2, #32]
 800411a:	4b22      	ldr	r3, [pc, #136]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	4a21      	ldr	r2, [pc, #132]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 8004120:	f023 0304 	bic.w	r3, r3, #4
 8004124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004126:	1d3b      	adds	r3, r7, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d06b      	beq.n	8004208 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004130:	f7fd fcd2 	bl	8001ad8 <HAL_GetTick>
 8004134:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004138:	e00b      	b.n	8004152 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fd fccd 	bl	8001ad8 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	; 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e291      	b.n	8004676 <HAL_RCC_OscConfig+0xe02>
 8004152:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004156:	2202      	movs	r2, #2
 8004158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	fa93 f2a3 	rbit	r2, r3
 8004164:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800416e:	2202      	movs	r2, #2
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	fa93 f2a3 	rbit	r2, r3
 800417c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004180:	601a      	str	r2, [r3, #0]
  return result;
 8004182:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004186:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004188:	fab3 f383 	clz	r3, r3
 800418c:	b2db      	uxtb	r3, r3
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f043 0302 	orr.w	r3, r3, #2
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d109      	bne.n	80041b0 <HAL_RCC_OscConfig+0x93c>
 800419c:	4b01      	ldr	r3, [pc, #4]	; (80041a4 <HAL_RCC_OscConfig+0x930>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	e014      	b.n	80041cc <HAL_RCC_OscConfig+0x958>
 80041a2:	bf00      	nop
 80041a4:	40021000 	.word	0x40021000
 80041a8:	10908120 	.word	0x10908120
 80041ac:	40007000 	.word	0x40007000
 80041b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80041b4:	2202      	movs	r2, #2
 80041b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	fa93 f2a3 	rbit	r2, r3
 80041c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	4bbb      	ldr	r3, [pc, #748]	; (80044b8 <HAL_RCC_OscConfig+0xc44>)
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80041d0:	2102      	movs	r1, #2
 80041d2:	6011      	str	r1, [r2, #0]
 80041d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	fa92 f1a2 	rbit	r1, r2
 80041de:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80041e2:	6011      	str	r1, [r2, #0]
  return result;
 80041e4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	fab2 f282 	clz	r2, r2
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	f002 021f 	and.w	r2, r2, #31
 80041fa:	2101      	movs	r1, #1
 80041fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d099      	beq.n	800413a <HAL_RCC_OscConfig+0x8c6>
 8004206:	e063      	b.n	80042d0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004208:	f7fd fc66 	bl	8001ad8 <HAL_GetTick>
 800420c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004210:	e00b      	b.n	800422a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fd fc61 	bl	8001ad8 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e225      	b.n	8004676 <HAL_RCC_OscConfig+0xe02>
 800422a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800422e:	2202      	movs	r2, #2
 8004230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004232:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	fa93 f2a3 	rbit	r2, r3
 800423c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004246:	2202      	movs	r2, #2
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	fa93 f2a3 	rbit	r2, r3
 8004254:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004258:	601a      	str	r2, [r3, #0]
  return result;
 800425a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800425e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004260:	fab3 f383 	clz	r3, r3
 8004264:	b2db      	uxtb	r3, r3
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	b2db      	uxtb	r3, r3
 800426a:	f043 0302 	orr.w	r3, r3, #2
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d102      	bne.n	800427a <HAL_RCC_OscConfig+0xa06>
 8004274:	4b90      	ldr	r3, [pc, #576]	; (80044b8 <HAL_RCC_OscConfig+0xc44>)
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	e00d      	b.n	8004296 <HAL_RCC_OscConfig+0xa22>
 800427a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800427e:	2202      	movs	r2, #2
 8004280:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004282:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	fa93 f2a3 	rbit	r2, r3
 800428c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	4b89      	ldr	r3, [pc, #548]	; (80044b8 <HAL_RCC_OscConfig+0xc44>)
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800429a:	2102      	movs	r1, #2
 800429c:	6011      	str	r1, [r2, #0]
 800429e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	fa92 f1a2 	rbit	r1, r2
 80042a8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80042ac:	6011      	str	r1, [r2, #0]
  return result;
 80042ae:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	fab2 f282 	clz	r2, r2
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	f002 021f 	and.w	r2, r2, #31
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1a0      	bne.n	8004212 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042d0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d8:	4b77      	ldr	r3, [pc, #476]	; (80044b8 <HAL_RCC_OscConfig+0xc44>)
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	4a76      	ldr	r2, [pc, #472]	; (80044b8 <HAL_RCC_OscConfig+0xc44>)
 80042de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e4:	1d3b      	adds	r3, r7, #4
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 81c2 	beq.w	8004674 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042f0:	4b71      	ldr	r3, [pc, #452]	; (80044b8 <HAL_RCC_OscConfig+0xc44>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	f000 819c 	beq.w	8004636 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fe:	1d3b      	adds	r3, r7, #4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	2b02      	cmp	r3, #2
 8004306:	f040 8114 	bne.w	8004532 <HAL_RCC_OscConfig+0xcbe>
 800430a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800430e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004314:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	fa93 f2a3 	rbit	r2, r3
 800431e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004322:	601a      	str	r2, [r3, #0]
  return result;
 8004324:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004328:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	fab3 f383 	clz	r3, r3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004334:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	461a      	mov	r2, r3
 800433c:	2300      	movs	r3, #0
 800433e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fd fbca 	bl	8001ad8 <HAL_GetTick>
 8004344:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004348:	e009      	b.n	800435e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434a:	f7fd fbc5 	bl	8001ad8 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e18b      	b.n	8004676 <HAL_RCC_OscConfig+0xe02>
 800435e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004362:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004368:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	fa93 f2a3 	rbit	r2, r3
 8004372:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004376:	601a      	str	r2, [r3, #0]
  return result;
 8004378:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800437c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800437e:	fab3 f383 	clz	r3, r3
 8004382:	b2db      	uxtb	r3, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	b2db      	uxtb	r3, r3
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b01      	cmp	r3, #1
 8004390:	d102      	bne.n	8004398 <HAL_RCC_OscConfig+0xb24>
 8004392:	4b49      	ldr	r3, [pc, #292]	; (80044b8 <HAL_RCC_OscConfig+0xc44>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	e01b      	b.n	80043d0 <HAL_RCC_OscConfig+0xb5c>
 8004398:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800439c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	fa93 f2a3 	rbit	r2, r3
 80043ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80043b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	fa93 f2a3 	rbit	r2, r3
 80043c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	4b3a      	ldr	r3, [pc, #232]	; (80044b8 <HAL_RCC_OscConfig+0xc44>)
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80043d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043d8:	6011      	str	r1, [r2, #0]
 80043da:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80043de:	6812      	ldr	r2, [r2, #0]
 80043e0:	fa92 f1a2 	rbit	r1, r2
 80043e4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80043e8:	6011      	str	r1, [r2, #0]
  return result;
 80043ea:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	fab2 f282 	clz	r2, r2
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	f042 0220 	orr.w	r2, r2, #32
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	f002 021f 	and.w	r2, r2, #31
 8004400:	2101      	movs	r1, #1
 8004402:	fa01 f202 	lsl.w	r2, r1, r2
 8004406:	4013      	ands	r3, r2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d19e      	bne.n	800434a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800440c:	4b2a      	ldr	r3, [pc, #168]	; (80044b8 <HAL_RCC_OscConfig+0xc44>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	430b      	orrs	r3, r1
 8004422:	4925      	ldr	r1, [pc, #148]	; (80044b8 <HAL_RCC_OscConfig+0xc44>)
 8004424:	4313      	orrs	r3, r2
 8004426:	604b      	str	r3, [r1, #4]
 8004428:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800442c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004432:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	fa93 f2a3 	rbit	r2, r3
 800443c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004440:	601a      	str	r2, [r3, #0]
  return result;
 8004442:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004446:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004448:	fab3 f383 	clz	r3, r3
 800444c:	b2db      	uxtb	r3, r3
 800444e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004452:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	461a      	mov	r2, r3
 800445a:	2301      	movs	r3, #1
 800445c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445e:	f7fd fb3b 	bl	8001ad8 <HAL_GetTick>
 8004462:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004466:	e009      	b.n	800447c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004468:	f7fd fb36 	bl	8001ad8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e0fc      	b.n	8004676 <HAL_RCC_OscConfig+0xe02>
 800447c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004480:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004486:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	fa93 f2a3 	rbit	r2, r3
 8004490:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004494:	601a      	str	r2, [r3, #0]
  return result;
 8004496:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800449a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800449c:	fab3 f383 	clz	r3, r3
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <HAL_RCC_OscConfig+0xc48>
 80044b0:	4b01      	ldr	r3, [pc, #4]	; (80044b8 <HAL_RCC_OscConfig+0xc44>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	e01e      	b.n	80044f4 <HAL_RCC_OscConfig+0xc80>
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000
 80044bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	fa93 f2a3 	rbit	r2, r3
 80044d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	fa93 f2a3 	rbit	r2, r3
 80044ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	4b63      	ldr	r3, [pc, #396]	; (8004680 <HAL_RCC_OscConfig+0xe0c>)
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80044f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044fc:	6011      	str	r1, [r2, #0]
 80044fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	fa92 f1a2 	rbit	r1, r2
 8004508:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800450c:	6011      	str	r1, [r2, #0]
  return result;
 800450e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	fab2 f282 	clz	r2, r2
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	f042 0220 	orr.w	r2, r2, #32
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	f002 021f 	and.w	r2, r2, #31
 8004524:	2101      	movs	r1, #1
 8004526:	fa01 f202 	lsl.w	r2, r1, r2
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d09b      	beq.n	8004468 <HAL_RCC_OscConfig+0xbf4>
 8004530:	e0a0      	b.n	8004674 <HAL_RCC_OscConfig+0xe00>
 8004532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004536:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800453a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	fa93 f2a3 	rbit	r2, r3
 8004546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800454a:	601a      	str	r2, [r3, #0]
  return result;
 800454c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004550:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004552:	fab3 f383 	clz	r3, r3
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800455c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	461a      	mov	r2, r3
 8004564:	2300      	movs	r3, #0
 8004566:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7fd fab6 	bl	8001ad8 <HAL_GetTick>
 800456c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004570:	e009      	b.n	8004586 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004572:	f7fd fab1 	bl	8001ad8 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e077      	b.n	8004676 <HAL_RCC_OscConfig+0xe02>
 8004586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800458a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800458e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	fa93 f2a3 	rbit	r2, r3
 800459a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800459e:	601a      	str	r2, [r3, #0]
  return result;
 80045a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a6:	fab3 f383 	clz	r3, r3
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d102      	bne.n	80045c0 <HAL_RCC_OscConfig+0xd4c>
 80045ba:	4b31      	ldr	r3, [pc, #196]	; (8004680 <HAL_RCC_OscConfig+0xe0c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	e01b      	b.n	80045f8 <HAL_RCC_OscConfig+0xd84>
 80045c0:	f107 0320 	add.w	r3, r7, #32
 80045c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ca:	f107 0320 	add.w	r3, r7, #32
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	fa93 f2a3 	rbit	r2, r3
 80045d4:	f107 031c 	add.w	r3, r7, #28
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	f107 0318 	add.w	r3, r7, #24
 80045de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	f107 0318 	add.w	r3, r7, #24
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	fa93 f2a3 	rbit	r2, r3
 80045ee:	f107 0314 	add.w	r3, r7, #20
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	4b22      	ldr	r3, [pc, #136]	; (8004680 <HAL_RCC_OscConfig+0xe0c>)
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	f107 0210 	add.w	r2, r7, #16
 80045fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004600:	6011      	str	r1, [r2, #0]
 8004602:	f107 0210 	add.w	r2, r7, #16
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	fa92 f1a2 	rbit	r1, r2
 800460c:	f107 020c 	add.w	r2, r7, #12
 8004610:	6011      	str	r1, [r2, #0]
  return result;
 8004612:	f107 020c 	add.w	r2, r7, #12
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	fab2 f282 	clz	r2, r2
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	f042 0220 	orr.w	r2, r2, #32
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	f002 021f 	and.w	r2, r2, #31
 8004628:	2101      	movs	r1, #1
 800462a:	fa01 f202 	lsl.w	r2, r1, r2
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d19e      	bne.n	8004572 <HAL_RCC_OscConfig+0xcfe>
 8004634:	e01e      	b.n	8004674 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e018      	b.n	8004676 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004644:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <HAL_RCC_OscConfig+0xe0c>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800464c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	429a      	cmp	r2, r3
 800465c:	d108      	bne.n	8004670 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800465e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004662:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004666:	1d3b      	adds	r3, r7, #4
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000

08004684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b09e      	sub	sp, #120	; 0x78
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e162      	b.n	8004962 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800469c:	4b90      	ldr	r3, [pc, #576]	; (80048e0 <HAL_RCC_ClockConfig+0x25c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d910      	bls.n	80046cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b8d      	ldr	r3, [pc, #564]	; (80048e0 <HAL_RCC_ClockConfig+0x25c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 0207 	bic.w	r2, r3, #7
 80046b2:	498b      	ldr	r1, [pc, #556]	; (80048e0 <HAL_RCC_ClockConfig+0x25c>)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ba:	4b89      	ldr	r3, [pc, #548]	; (80048e0 <HAL_RCC_ClockConfig+0x25c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e14a      	b.n	8004962 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d008      	beq.n	80046ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d8:	4b82      	ldr	r3, [pc, #520]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	497f      	ldr	r1, [pc, #508]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80dc 	beq.w	80048b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d13c      	bne.n	800477a <HAL_RCC_ClockConfig+0xf6>
 8004700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004704:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004708:	fa93 f3a3 	rbit	r3, r3
 800470c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800470e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004710:	fab3 f383 	clz	r3, r3
 8004714:	b2db      	uxtb	r3, r3
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d102      	bne.n	800472a <HAL_RCC_ClockConfig+0xa6>
 8004724:	4b6f      	ldr	r3, [pc, #444]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	e00f      	b.n	800474a <HAL_RCC_ClockConfig+0xc6>
 800472a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800472e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	667b      	str	r3, [r7, #100]	; 0x64
 8004738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800473c:	663b      	str	r3, [r7, #96]	; 0x60
 800473e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004740:	fa93 f3a3 	rbit	r3, r3
 8004744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004746:	4b67      	ldr	r3, [pc, #412]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800474e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004752:	fa92 f2a2 	rbit	r2, r2
 8004756:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004758:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800475a:	fab2 f282 	clz	r2, r2
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	f042 0220 	orr.w	r2, r2, #32
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	f002 021f 	and.w	r2, r2, #31
 800476a:	2101      	movs	r1, #1
 800476c:	fa01 f202 	lsl.w	r2, r1, r2
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d17b      	bne.n	800486e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e0f3      	b.n	8004962 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d13c      	bne.n	80047fc <HAL_RCC_ClockConfig+0x178>
 8004782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004786:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800478a:	fa93 f3a3 	rbit	r3, r3
 800478e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004792:	fab3 f383 	clz	r3, r3
 8004796:	b2db      	uxtb	r3, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	b2db      	uxtb	r3, r3
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d102      	bne.n	80047ac <HAL_RCC_ClockConfig+0x128>
 80047a6:	4b4f      	ldr	r3, [pc, #316]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	e00f      	b.n	80047cc <HAL_RCC_ClockConfig+0x148>
 80047ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b4:	fa93 f3a3 	rbit	r3, r3
 80047b8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047be:	643b      	str	r3, [r7, #64]	; 0x40
 80047c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c2:	fa93 f3a3 	rbit	r3, r3
 80047c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c8:	4b46      	ldr	r3, [pc, #280]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80047d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047d4:	fa92 f2a2 	rbit	r2, r2
 80047d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80047da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047dc:	fab2 f282 	clz	r2, r2
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	f042 0220 	orr.w	r2, r2, #32
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	f002 021f 	and.w	r2, r2, #31
 80047ec:	2101      	movs	r1, #1
 80047ee:	fa01 f202 	lsl.w	r2, r1, r2
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d13a      	bne.n	800486e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0b2      	b.n	8004962 <HAL_RCC_ClockConfig+0x2de>
 80047fc:	2302      	movs	r3, #2
 80047fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	fa93 f3a3 	rbit	r3, r3
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480a:	fab3 f383 	clz	r3, r3
 800480e:	b2db      	uxtb	r3, r3
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b01      	cmp	r3, #1
 800481c:	d102      	bne.n	8004824 <HAL_RCC_ClockConfig+0x1a0>
 800481e:	4b31      	ldr	r3, [pc, #196]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	e00d      	b.n	8004840 <HAL_RCC_ClockConfig+0x1bc>
 8004824:	2302      	movs	r3, #2
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	fa93 f3a3 	rbit	r3, r3
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
 8004830:	2302      	movs	r3, #2
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	4b29      	ldr	r3, [pc, #164]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	2202      	movs	r2, #2
 8004842:	61ba      	str	r2, [r7, #24]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	fa92 f2a2 	rbit	r2, r2
 800484a:	617a      	str	r2, [r7, #20]
  return result;
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	fab2 f282 	clz	r2, r2
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	f042 0220 	orr.w	r2, r2, #32
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	f002 021f 	and.w	r2, r2, #31
 800485e:	2101      	movs	r1, #1
 8004860:	fa01 f202 	lsl.w	r2, r1, r2
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e079      	b.n	8004962 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800486e:	4b1d      	ldr	r3, [pc, #116]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f023 0203 	bic.w	r2, r3, #3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	491a      	ldr	r1, [pc, #104]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 800487c:	4313      	orrs	r3, r2
 800487e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004880:	f7fd f92a 	bl	8001ad8 <HAL_GetTick>
 8004884:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004886:	e00a      	b.n	800489e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004888:	f7fd f926 	bl	8001ad8 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	; 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e061      	b.n	8004962 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489e:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <HAL_RCC_ClockConfig+0x260>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 020c 	and.w	r2, r3, #12
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d1eb      	bne.n	8004888 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCC_ClockConfig+0x25c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d214      	bcs.n	80048e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <HAL_RCC_ClockConfig+0x25c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f023 0207 	bic.w	r2, r3, #7
 80048c6:	4906      	ldr	r1, [pc, #24]	; (80048e0 <HAL_RCC_ClockConfig+0x25c>)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <HAL_RCC_ClockConfig+0x25c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e040      	b.n	8004962 <HAL_RCC_ClockConfig+0x2de>
 80048e0:	40022000 	.word	0x40022000
 80048e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f4:	4b1d      	ldr	r3, [pc, #116]	; (800496c <HAL_RCC_ClockConfig+0x2e8>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	491a      	ldr	r1, [pc, #104]	; (800496c <HAL_RCC_ClockConfig+0x2e8>)
 8004902:	4313      	orrs	r3, r2
 8004904:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004912:	4b16      	ldr	r3, [pc, #88]	; (800496c <HAL_RCC_ClockConfig+0x2e8>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4912      	ldr	r1, [pc, #72]	; (800496c <HAL_RCC_ClockConfig+0x2e8>)
 8004922:	4313      	orrs	r3, r2
 8004924:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004926:	f000 f829 	bl	800497c <HAL_RCC_GetSysClockFreq>
 800492a:	4601      	mov	r1, r0
 800492c:	4b0f      	ldr	r3, [pc, #60]	; (800496c <HAL_RCC_ClockConfig+0x2e8>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004934:	22f0      	movs	r2, #240	; 0xf0
 8004936:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	fa92 f2a2 	rbit	r2, r2
 800493e:	60fa      	str	r2, [r7, #12]
  return result;
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	fab2 f282 	clz	r2, r2
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	40d3      	lsrs	r3, r2
 800494a:	4a09      	ldr	r2, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x2ec>)
 800494c:	5cd3      	ldrb	r3, [r2, r3]
 800494e:	fa21 f303 	lsr.w	r3, r1, r3
 8004952:	4a08      	ldr	r2, [pc, #32]	; (8004974 <HAL_RCC_ClockConfig+0x2f0>)
 8004954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004956:	4b08      	ldr	r3, [pc, #32]	; (8004978 <HAL_RCC_ClockConfig+0x2f4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7fc fce0 	bl	8001320 <HAL_InitTick>
  
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3778      	adds	r7, #120	; 0x78
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40021000 	.word	0x40021000
 8004970:	0800877c 	.word	0x0800877c
 8004974:	20000000 	.word	0x20000000
 8004978:	20000004 	.word	0x20000004

0800497c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800497c:	b480      	push	{r7}
 800497e:	b08b      	sub	sp, #44	; 0x2c
 8004980:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	2300      	movs	r3, #0
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	2300      	movs	r3, #0
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004996:	4b29      	ldr	r3, [pc, #164]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f003 030c 	and.w	r3, r3, #12
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d002      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x30>
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x36>
 80049aa:	e03c      	b.n	8004a26 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049ac:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 80049ae:	623b      	str	r3, [r7, #32]
      break;
 80049b0:	e03c      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80049b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80049bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	fa92 f2a2 	rbit	r2, r2
 80049c4:	607a      	str	r2, [r7, #4]
  return result;
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	fab2 f282 	clz	r2, r2
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	40d3      	lsrs	r3, r2
 80049d0:	4a1c      	ldr	r2, [pc, #112]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xc8>)
 80049d2:	5cd3      	ldrb	r3, [r2, r3]
 80049d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80049d6:	4b19      	ldr	r3, [pc, #100]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	220f      	movs	r2, #15
 80049e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	fa92 f2a2 	rbit	r2, r2
 80049e8:	60fa      	str	r2, [r7, #12]
  return result;
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	fab2 f282 	clz	r2, r2
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	40d3      	lsrs	r3, r2
 80049f4:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xcc>)
 80049f6:	5cd3      	ldrb	r3, [r2, r3]
 80049f8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a04:	4a0e      	ldr	r2, [pc, #56]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
 8004a14:	e004      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	4a0c      	ldr	r2, [pc, #48]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	623b      	str	r3, [r7, #32]
      break;
 8004a24:	e002      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a26:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a28:	623b      	str	r3, [r7, #32]
      break;
 8004a2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	372c      	adds	r7, #44	; 0x2c
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	00f42400 	.word	0x00f42400
 8004a44:	08008794 	.word	0x08008794
 8004a48:	080087a4 	.word	0x080087a4
 8004a4c:	003d0900 	.word	0x003d0900
 8004a50:	007a1200 	.word	0x007a1200

08004a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	20000000 	.word	0x20000000

08004a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004a72:	f7ff ffef 	bl	8004a54 <HAL_RCC_GetHCLKFreq>
 8004a76:	4601      	mov	r1, r0
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a80:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	fa92 f2a2 	rbit	r2, r2
 8004a8c:	603a      	str	r2, [r7, #0]
  return result;
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	fab2 f282 	clz	r2, r2
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	40d3      	lsrs	r3, r2
 8004a98:	4a04      	ldr	r2, [pc, #16]	; (8004aac <HAL_RCC_GetPCLK1Freq+0x40>)
 8004a9a:	5cd3      	ldrb	r3, [r2, r3]
 8004a9c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	0800878c 	.word	0x0800878c

08004ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004ab6:	f7ff ffcd 	bl	8004a54 <HAL_RCC_GetHCLKFreq>
 8004aba:	4601      	mov	r1, r0
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004ac4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004ac8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	fa92 f2a2 	rbit	r2, r2
 8004ad0:	603a      	str	r2, [r7, #0]
  return result;
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	fab2 f282 	clz	r2, r2
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	40d3      	lsrs	r3, r2
 8004adc:	4a04      	ldr	r2, [pc, #16]	; (8004af0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004ade:	5cd3      	ldrb	r3, [r2, r3]
 8004ae0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000
 8004af0:	0800878c 	.word	0x0800878c

08004af4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	220f      	movs	r2, #15
 8004b02:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b04:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 0203 	and.w	r2, r3, #3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004b10:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	08db      	lsrs	r3, r3, #3
 8004b2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <HAL_RCC_GetClockConfig+0x60>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0207 	and.w	r2, r3, #7
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	601a      	str	r2, [r3, #0]
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40022000 	.word	0x40022000

08004b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e01d      	b.n	8004ba6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fc fdd4 	bl	800172c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f000 fc9e 	bl	80054d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <HAL_TIM_Base_Start_IT+0x50>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b06      	cmp	r3, #6
 8004bd8:	d00b      	beq.n	8004bf2 <HAL_TIM_Base_Start_IT+0x42>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be0:	d007      	beq.n	8004bf2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0201 	orr.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	00010007 	.word	0x00010007

08004c04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e01d      	b.n	8004c52 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f815 	bl	8004c5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4619      	mov	r1, r3
 8004c42:	4610      	mov	r0, r2
 8004c44:	f000 fc48 	bl	80054d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
	...

08004c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	6839      	ldr	r1, [r7, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 ffe0 	bl	8005c48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1c      	ldr	r2, [pc, #112]	; (8004d00 <HAL_TIM_PWM_Start+0x90>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00e      	beq.n	8004cb0 <HAL_TIM_PWM_Start+0x40>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1b      	ldr	r2, [pc, #108]	; (8004d04 <HAL_TIM_PWM_Start+0x94>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <HAL_TIM_PWM_Start+0x40>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a19      	ldr	r2, [pc, #100]	; (8004d08 <HAL_TIM_PWM_Start+0x98>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_TIM_PWM_Start+0x40>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a18      	ldr	r2, [pc, #96]	; (8004d0c <HAL_TIM_PWM_Start+0x9c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIM_PWM_Start+0x44>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <HAL_TIM_PWM_Start+0x46>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <HAL_TIM_PWM_Start+0xa0>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b06      	cmp	r3, #6
 8004cda:	d00b      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x84>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce2:	d007      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40014000 	.word	0x40014000
 8004d08:	40014400 	.word	0x40014400
 8004d0c:	40014800 	.word	0x40014800
 8004d10:	00010007 	.word	0x00010007

08004d14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e083      	b.n	8004e30 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7fc fcb5 	bl	80016ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6812      	ldr	r2, [r2, #0]
 8004d54:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004d58:	f023 0307 	bic.w	r3, r3, #7
 8004d5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3304      	adds	r3, #4
 8004d66:	4619      	mov	r1, r3
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f000 fbb5 	bl	80054d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d96:	f023 0303 	bic.w	r3, r3, #3
 8004d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	4313      	orrs	r3, r2
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004db4:	f023 030c 	bic.w	r3, r3, #12
 8004db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	011a      	lsls	r2, r3, #4
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	031b      	lsls	r3, r3, #12
 8004de4:	4313      	orrs	r3, r2
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004df2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004dfa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	4313      	orrs	r3, r2
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_TIM_Encoder_Start+0x16>
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d008      	beq.n	8004e5e <HAL_TIM_Encoder_Start+0x26>
 8004e4c:	e00f      	b.n	8004e6e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2201      	movs	r2, #1
 8004e54:	2100      	movs	r1, #0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fef6 	bl	8005c48 <TIM_CCxChannelCmd>
      break;
 8004e5c:	e016      	b.n	8004e8c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2201      	movs	r2, #1
 8004e64:	2104      	movs	r1, #4
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 feee 	bl	8005c48 <TIM_CCxChannelCmd>
      break;
 8004e6c:	e00e      	b.n	8004e8c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2201      	movs	r2, #1
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fee6 	bl	8005c48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2201      	movs	r2, #1
 8004e82:	2104      	movs	r1, #4
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fedf 	bl	8005c48 <TIM_CCxChannelCmd>
      break;
 8004e8a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d122      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d11b      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f06f 0202 	mvn.w	r2, #2
 8004ed2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fad6 	bl	800549a <HAL_TIM_IC_CaptureCallback>
 8004eee:	e005      	b.n	8004efc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fac8 	bl	8005486 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fad9 	bl	80054ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d122      	bne.n	8004f56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d11b      	bne.n	8004f56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f06f 0204 	mvn.w	r2, #4
 8004f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 faac 	bl	800549a <HAL_TIM_IC_CaptureCallback>
 8004f42:	e005      	b.n	8004f50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fa9e 	bl	8005486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 faaf 	bl	80054ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d122      	bne.n	8004faa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d11b      	bne.n	8004faa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f06f 0208 	mvn.w	r2, #8
 8004f7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2204      	movs	r2, #4
 8004f80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f003 0303 	and.w	r3, r3, #3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fa82 	bl	800549a <HAL_TIM_IC_CaptureCallback>
 8004f96:	e005      	b.n	8004fa4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fa74 	bl	8005486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fa85 	bl	80054ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d122      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d11b      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f06f 0210 	mvn.w	r2, #16
 8004fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2208      	movs	r2, #8
 8004fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fa58 	bl	800549a <HAL_TIM_IC_CaptureCallback>
 8004fea:	e005      	b.n	8004ff8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fa4a 	bl	8005486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fa5b 	bl	80054ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b01      	cmp	r3, #1
 800500a:	d10e      	bne.n	800502a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b01      	cmp	r3, #1
 8005018:	d107      	bne.n	800502a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f06f 0201 	mvn.w	r2, #1
 8005022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7fc f939 	bl	800129c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005034:	2b80      	cmp	r3, #128	; 0x80
 8005036:	d10e      	bne.n	8005056 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005042:	2b80      	cmp	r3, #128	; 0x80
 8005044:	d107      	bne.n	8005056 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800504e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fe97 	bl	8005d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005064:	d10e      	bne.n	8005084 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005070:	2b80      	cmp	r3, #128	; 0x80
 8005072:	d107      	bne.n	8005084 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800507c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fe8a 	bl	8005d98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	d10e      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d107      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fa09 	bl	80054c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d10e      	bne.n	80050dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d107      	bne.n	80050dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0220 	mvn.w	r2, #32
 80050d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fe4a 	bl	8005d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e105      	b.n	800530a <HAL_TIM_PWM_ConfigChannel+0x226>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2202      	movs	r2, #2
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b14      	cmp	r3, #20
 8005112:	f200 80f0 	bhi.w	80052f6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005116:	a201      	add	r2, pc, #4	; (adr r2, 800511c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	08005171 	.word	0x08005171
 8005120:	080052f7 	.word	0x080052f7
 8005124:	080052f7 	.word	0x080052f7
 8005128:	080052f7 	.word	0x080052f7
 800512c:	080051b1 	.word	0x080051b1
 8005130:	080052f7 	.word	0x080052f7
 8005134:	080052f7 	.word	0x080052f7
 8005138:	080052f7 	.word	0x080052f7
 800513c:	080051f3 	.word	0x080051f3
 8005140:	080052f7 	.word	0x080052f7
 8005144:	080052f7 	.word	0x080052f7
 8005148:	080052f7 	.word	0x080052f7
 800514c:	08005233 	.word	0x08005233
 8005150:	080052f7 	.word	0x080052f7
 8005154:	080052f7 	.word	0x080052f7
 8005158:	080052f7 	.word	0x080052f7
 800515c:	08005275 	.word	0x08005275
 8005160:	080052f7 	.word	0x080052f7
 8005164:	080052f7 	.word	0x080052f7
 8005168:	080052f7 	.word	0x080052f7
 800516c:	080052b5 	.word	0x080052b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fa26 	bl	80055c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0208 	orr.w	r2, r2, #8
 800518a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0204 	bic.w	r2, r2, #4
 800519a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6999      	ldr	r1, [r3, #24]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	619a      	str	r2, [r3, #24]
      break;
 80051ae:	e0a3      	b.n	80052f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fa8c 	bl	80056d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6999      	ldr	r1, [r3, #24]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	021a      	lsls	r2, r3, #8
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	619a      	str	r2, [r3, #24]
      break;
 80051f0:	e082      	b.n	80052f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 faeb 	bl	80057d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0208 	orr.w	r2, r2, #8
 800520c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0204 	bic.w	r2, r2, #4
 800521c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69d9      	ldr	r1, [r3, #28]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	61da      	str	r2, [r3, #28]
      break;
 8005230:	e062      	b.n	80052f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fb49 	bl	80058d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800524c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69d9      	ldr	r1, [r3, #28]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	021a      	lsls	r2, r3, #8
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	61da      	str	r2, [r3, #28]
      break;
 8005272:	e041      	b.n	80052f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fb8c 	bl	8005998 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0208 	orr.w	r2, r2, #8
 800528e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0204 	bic.w	r2, r2, #4
 800529e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052b2:	e021      	b.n	80052f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fbca 	bl	8005a54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	021a      	lsls	r2, r3, #8
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052f4:	e000      	b.n	80052f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80052f6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop

08005314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_TIM_ConfigClockSource+0x18>
 8005328:	2302      	movs	r3, #2
 800532a:	e0a8      	b.n	800547e <HAL_TIM_ConfigClockSource+0x16a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800534a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800534e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005356:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b40      	cmp	r3, #64	; 0x40
 8005366:	d067      	beq.n	8005438 <HAL_TIM_ConfigClockSource+0x124>
 8005368:	2b40      	cmp	r3, #64	; 0x40
 800536a:	d80b      	bhi.n	8005384 <HAL_TIM_ConfigClockSource+0x70>
 800536c:	2b10      	cmp	r3, #16
 800536e:	d073      	beq.n	8005458 <HAL_TIM_ConfigClockSource+0x144>
 8005370:	2b10      	cmp	r3, #16
 8005372:	d802      	bhi.n	800537a <HAL_TIM_ConfigClockSource+0x66>
 8005374:	2b00      	cmp	r3, #0
 8005376:	d06f      	beq.n	8005458 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005378:	e078      	b.n	800546c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800537a:	2b20      	cmp	r3, #32
 800537c:	d06c      	beq.n	8005458 <HAL_TIM_ConfigClockSource+0x144>
 800537e:	2b30      	cmp	r3, #48	; 0x30
 8005380:	d06a      	beq.n	8005458 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005382:	e073      	b.n	800546c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005384:	2b70      	cmp	r3, #112	; 0x70
 8005386:	d00d      	beq.n	80053a4 <HAL_TIM_ConfigClockSource+0x90>
 8005388:	2b70      	cmp	r3, #112	; 0x70
 800538a:	d804      	bhi.n	8005396 <HAL_TIM_ConfigClockSource+0x82>
 800538c:	2b50      	cmp	r3, #80	; 0x50
 800538e:	d033      	beq.n	80053f8 <HAL_TIM_ConfigClockSource+0xe4>
 8005390:	2b60      	cmp	r3, #96	; 0x60
 8005392:	d041      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005394:	e06a      	b.n	800546c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539a:	d066      	beq.n	800546a <HAL_TIM_ConfigClockSource+0x156>
 800539c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a0:	d017      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80053a2:	e063      	b.n	800546c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6818      	ldr	r0, [r3, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	6899      	ldr	r1, [r3, #8]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f000 fc28 	bl	8005c08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	609a      	str	r2, [r3, #8]
      break;
 80053d0:	e04c      	b.n	800546c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	6899      	ldr	r1, [r3, #8]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f000 fc11 	bl	8005c08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053f4:	609a      	str	r2, [r3, #8]
      break;
 80053f6:	e039      	b.n	800546c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	6859      	ldr	r1, [r3, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	461a      	mov	r2, r3
 8005406:	f000 fb85 	bl	8005b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2150      	movs	r1, #80	; 0x50
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fbde 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 8005416:	e029      	b.n	800546c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	6859      	ldr	r1, [r3, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	461a      	mov	r2, r3
 8005426:	f000 fba4 	bl	8005b72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2160      	movs	r1, #96	; 0x60
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fbce 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 8005436:	e019      	b.n	800546c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	6859      	ldr	r1, [r3, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	461a      	mov	r2, r3
 8005446:	f000 fb65 	bl	8005b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2140      	movs	r1, #64	; 0x40
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fbbe 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 8005456:	e009      	b.n	800546c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f000 fbb5 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 8005468:	e000      	b.n	800546c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800546a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a32      	ldr	r2, [pc, #200]	; (80055b4 <TIM_Base_SetConfig+0xdc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <TIM_Base_SetConfig+0x28>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f6:	d003      	beq.n	8005500 <TIM_Base_SetConfig+0x28>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a2f      	ldr	r2, [pc, #188]	; (80055b8 <TIM_Base_SetConfig+0xe0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d108      	bne.n	8005512 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a27      	ldr	r2, [pc, #156]	; (80055b4 <TIM_Base_SetConfig+0xdc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <TIM_Base_SetConfig+0x6a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005520:	d00f      	beq.n	8005542 <TIM_Base_SetConfig+0x6a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a24      	ldr	r2, [pc, #144]	; (80055b8 <TIM_Base_SetConfig+0xe0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00b      	beq.n	8005542 <TIM_Base_SetConfig+0x6a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a23      	ldr	r2, [pc, #140]	; (80055bc <TIM_Base_SetConfig+0xe4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d007      	beq.n	8005542 <TIM_Base_SetConfig+0x6a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <TIM_Base_SetConfig+0xe8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d003      	beq.n	8005542 <TIM_Base_SetConfig+0x6a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <TIM_Base_SetConfig+0xec>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d108      	bne.n	8005554 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a0e      	ldr	r2, [pc, #56]	; (80055b4 <TIM_Base_SetConfig+0xdc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00b      	beq.n	8005598 <TIM_Base_SetConfig+0xc0>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a0e      	ldr	r2, [pc, #56]	; (80055bc <TIM_Base_SetConfig+0xe4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d007      	beq.n	8005598 <TIM_Base_SetConfig+0xc0>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a0d      	ldr	r2, [pc, #52]	; (80055c0 <TIM_Base_SetConfig+0xe8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d003      	beq.n	8005598 <TIM_Base_SetConfig+0xc0>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a0c      	ldr	r2, [pc, #48]	; (80055c4 <TIM_Base_SetConfig+0xec>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d103      	bne.n	80055a0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	615a      	str	r2, [r3, #20]
}
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40012c00 	.word	0x40012c00
 80055b8:	40000400 	.word	0x40000400
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800

080055c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f023 0201 	bic.w	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0303 	bic.w	r3, r3, #3
 8005602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f023 0302 	bic.w	r3, r3, #2
 8005614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a28      	ldr	r2, [pc, #160]	; (80056c4 <TIM_OC1_SetConfig+0xfc>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00b      	beq.n	8005640 <TIM_OC1_SetConfig+0x78>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a27      	ldr	r2, [pc, #156]	; (80056c8 <TIM_OC1_SetConfig+0x100>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d007      	beq.n	8005640 <TIM_OC1_SetConfig+0x78>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a26      	ldr	r2, [pc, #152]	; (80056cc <TIM_OC1_SetConfig+0x104>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d003      	beq.n	8005640 <TIM_OC1_SetConfig+0x78>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a25      	ldr	r2, [pc, #148]	; (80056d0 <TIM_OC1_SetConfig+0x108>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d10c      	bne.n	800565a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f023 0308 	bic.w	r3, r3, #8
 8005646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f023 0304 	bic.w	r3, r3, #4
 8005658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <TIM_OC1_SetConfig+0xfc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00b      	beq.n	800567a <TIM_OC1_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a18      	ldr	r2, [pc, #96]	; (80056c8 <TIM_OC1_SetConfig+0x100>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d007      	beq.n	800567a <TIM_OC1_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a17      	ldr	r2, [pc, #92]	; (80056cc <TIM_OC1_SetConfig+0x104>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_OC1_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <TIM_OC1_SetConfig+0x108>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d111      	bne.n	800569e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	621a      	str	r2, [r3, #32]
}
 80056b8:	bf00      	nop
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	40012c00 	.word	0x40012c00
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800

080056d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f023 0210 	bic.w	r2, r3, #16
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	021b      	lsls	r3, r3, #8
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f023 0320 	bic.w	r3, r3, #32
 8005722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a24      	ldr	r2, [pc, #144]	; (80057c4 <TIM_OC2_SetConfig+0xf0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d10d      	bne.n	8005754 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800573e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a1b      	ldr	r2, [pc, #108]	; (80057c4 <TIM_OC2_SetConfig+0xf0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00b      	beq.n	8005774 <TIM_OC2_SetConfig+0xa0>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a1a      	ldr	r2, [pc, #104]	; (80057c8 <TIM_OC2_SetConfig+0xf4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d007      	beq.n	8005774 <TIM_OC2_SetConfig+0xa0>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a19      	ldr	r2, [pc, #100]	; (80057cc <TIM_OC2_SetConfig+0xf8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_OC2_SetConfig+0xa0>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <TIM_OC2_SetConfig+0xfc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d113      	bne.n	800579c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800577a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005782:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40014000 	.word	0x40014000
 80057cc:	40014400 	.word	0x40014400
 80057d0:	40014800 	.word	0x40014800

080057d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0303 	bic.w	r3, r3, #3
 800580e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a23      	ldr	r2, [pc, #140]	; (80058c0 <TIM_OC3_SetConfig+0xec>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d10d      	bne.n	8005852 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800583c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005850:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a1a      	ldr	r2, [pc, #104]	; (80058c0 <TIM_OC3_SetConfig+0xec>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00b      	beq.n	8005872 <TIM_OC3_SetConfig+0x9e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a19      	ldr	r2, [pc, #100]	; (80058c4 <TIM_OC3_SetConfig+0xf0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d007      	beq.n	8005872 <TIM_OC3_SetConfig+0x9e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a18      	ldr	r2, [pc, #96]	; (80058c8 <TIM_OC3_SetConfig+0xf4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d003      	beq.n	8005872 <TIM_OC3_SetConfig+0x9e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a17      	ldr	r2, [pc, #92]	; (80058cc <TIM_OC3_SetConfig+0xf8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d113      	bne.n	800589a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	621a      	str	r2, [r3, #32]
}
 80058b4:	bf00      	nop
 80058b6:	371c      	adds	r7, #28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	40012c00 	.word	0x40012c00
 80058c4:	40014000 	.word	0x40014000
 80058c8:	40014400 	.word	0x40014400
 80058cc:	40014800 	.word	0x40014800

080058d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800591e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	031b      	lsls	r3, r3, #12
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a16      	ldr	r2, [pc, #88]	; (8005988 <TIM_OC4_SetConfig+0xb8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00b      	beq.n	800594c <TIM_OC4_SetConfig+0x7c>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a15      	ldr	r2, [pc, #84]	; (800598c <TIM_OC4_SetConfig+0xbc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d007      	beq.n	800594c <TIM_OC4_SetConfig+0x7c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a14      	ldr	r2, [pc, #80]	; (8005990 <TIM_OC4_SetConfig+0xc0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_OC4_SetConfig+0x7c>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a13      	ldr	r2, [pc, #76]	; (8005994 <TIM_OC4_SetConfig+0xc4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d109      	bne.n	8005960 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	019b      	lsls	r3, r3, #6
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40012c00 	.word	0x40012c00
 800598c:	40014000 	.word	0x40014000
 8005990:	40014400 	.word	0x40014400
 8005994:	40014800 	.word	0x40014800

08005998 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	041b      	lsls	r3, r3, #16
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a15      	ldr	r2, [pc, #84]	; (8005a44 <TIM_OC5_SetConfig+0xac>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00b      	beq.n	8005a0a <TIM_OC5_SetConfig+0x72>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a14      	ldr	r2, [pc, #80]	; (8005a48 <TIM_OC5_SetConfig+0xb0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d007      	beq.n	8005a0a <TIM_OC5_SetConfig+0x72>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a13      	ldr	r2, [pc, #76]	; (8005a4c <TIM_OC5_SetConfig+0xb4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <TIM_OC5_SetConfig+0x72>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a12      	ldr	r2, [pc, #72]	; (8005a50 <TIM_OC5_SetConfig+0xb8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d109      	bne.n	8005a1e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	621a      	str	r2, [r3, #32]
}
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	40012c00 	.word	0x40012c00
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400
 8005a50:	40014800 	.word	0x40014800

08005a54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	021b      	lsls	r3, r3, #8
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	051b      	lsls	r3, r3, #20
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a16      	ldr	r2, [pc, #88]	; (8005b04 <TIM_OC6_SetConfig+0xb0>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00b      	beq.n	8005ac8 <TIM_OC6_SetConfig+0x74>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a15      	ldr	r2, [pc, #84]	; (8005b08 <TIM_OC6_SetConfig+0xb4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d007      	beq.n	8005ac8 <TIM_OC6_SetConfig+0x74>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a14      	ldr	r2, [pc, #80]	; (8005b0c <TIM_OC6_SetConfig+0xb8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d003      	beq.n	8005ac8 <TIM_OC6_SetConfig+0x74>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a13      	ldr	r2, [pc, #76]	; (8005b10 <TIM_OC6_SetConfig+0xbc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d109      	bne.n	8005adc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ace:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	029b      	lsls	r3, r3, #10
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40012c00 	.word	0x40012c00
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800

08005b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0201 	bic.w	r2, r3, #1
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f023 030a 	bic.w	r3, r3, #10
 8005b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	621a      	str	r2, [r3, #32]
}
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b087      	sub	sp, #28
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0210 	bic.w	r2, r3, #16
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	031b      	lsls	r3, r3, #12
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	621a      	str	r2, [r3, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f043 0307 	orr.w	r3, r3, #7
 8005bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	609a      	str	r2, [r3, #8]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	021a      	lsls	r2, r3, #8
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	609a      	str	r2, [r3, #8]
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a1a      	ldr	r2, [r3, #32]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	401a      	ands	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a1a      	ldr	r2, [r3, #32]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f003 031f 	and.w	r3, r3, #31
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c80:	431a      	orrs	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	bf00      	nop
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e054      	b.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a24      	ldr	r2, [pc, #144]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d108      	bne.n	8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00e      	beq.n	8005d2a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d14:	d009      	beq.n	8005d2a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a13      	ldr	r2, [pc, #76]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d004      	beq.n	8005d2a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a11      	ldr	r2, [pc, #68]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d10c      	bne.n	8005d44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40012c00 	.word	0x40012c00
 8005d68:	40000400 	.word	0x40000400
 8005d6c:	40014000 	.word	0x40014000

08005d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e040      	b.n	8005e40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fb fde2 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2224      	movs	r2, #36	; 0x24
 8005dd8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f986 	bl	80060fc <UART_SetConfig>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e022      	b.n	8005e40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fafc 	bl	8006400 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fb83 	bl	8006544 <UART_CheckIdleState>
 8005e3e:	4603      	mov	r3, r0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e68:	69fa      	ldr	r2, [r7, #28]
 8005e6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e6e:	4013      	ands	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d113      	bne.n	8005ea0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00e      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8114 	beq.w	80060be <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4798      	blx	r3
      }
      return;
 8005e9e:	e10e      	b.n	80060be <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 80d6 	beq.w	8006054 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d105      	bne.n	8005ebe <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 80cb 	beq.w	8006054 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00e      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x9e>
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d009      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ede:	f043 0201 	orr.w	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00e      	beq.n	8005f0e <HAL_UART_IRQHandler+0xc6>
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2202      	movs	r2, #2
 8005f00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f06:	f043 0204 	orr.w	r2, r3, #4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00e      	beq.n	8005f36 <HAL_UART_IRQHandler+0xee>
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d009      	beq.n	8005f36 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2204      	movs	r2, #4
 8005f28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f2e:	f043 0202 	orr.w	r2, r3, #2
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d013      	beq.n	8005f68 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d104      	bne.n	8005f54 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2208      	movs	r2, #8
 8005f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f60:	f043 0208 	orr.w	r2, r3, #8
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00f      	beq.n	8005f92 <HAL_UART_IRQHandler+0x14a>
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00a      	beq.n	8005f92 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f8a:	f043 0220 	orr.w	r2, r3, #32
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 8093 	beq.w	80060c2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00c      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d007      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd0:	2b40      	cmp	r3, #64	; 0x40
 8005fd2:	d004      	beq.n	8005fde <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d031      	beq.n	8006042 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fb70 	bl	80066c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d123      	bne.n	800603a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006000:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006006:	2b00      	cmp	r3, #0
 8006008:	d013      	beq.n	8006032 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800600e:	4a30      	ldr	r2, [pc, #192]	; (80060d0 <HAL_UART_IRQHandler+0x288>)
 8006010:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006016:	4618      	mov	r0, r3
 8006018:	f7fd f9a1 	bl	800335e <HAL_DMA_Abort_IT>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d016      	beq.n	8006050 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800602c:	4610      	mov	r0, r2
 800602e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006030:	e00e      	b.n	8006050 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f858 	bl	80060e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006038:	e00a      	b.n	8006050 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f854 	bl	80060e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006040:	e006      	b.n	8006050 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f850 	bl	80060e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800604e:	e038      	b.n	80060c2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006050:	bf00      	nop
    return;
 8006052:	e036      	b.n	80060c2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <HAL_UART_IRQHandler+0x232>
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d008      	beq.n	800607a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006070:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fb75 	bl	8006762 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006078:	e026      	b.n	80060c8 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00d      	beq.n	80060a0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608a:	2b00      	cmp	r3, #0
 800608c:	d008      	beq.n	80060a0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006092:	2b00      	cmp	r3, #0
 8006094:	d017      	beq.n	80060c6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
    }
    return;
 800609e:	e012      	b.n	80060c6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00e      	beq.n	80060c8 <HAL_UART_IRQHandler+0x280>
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d009      	beq.n	80060c8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fb3b 	bl	8006730 <UART_EndTransmit_IT>
    return;
 80060ba:	bf00      	nop
 80060bc:	e004      	b.n	80060c8 <HAL_UART_IRQHandler+0x280>
      return;
 80060be:	bf00      	nop
 80060c0:	e002      	b.n	80060c8 <HAL_UART_IRQHandler+0x280>
    return;
 80060c2:	bf00      	nop
 80060c4:	e000      	b.n	80060c8 <HAL_UART_IRQHandler+0x280>
    return;
 80060c6:	bf00      	nop
  }

}
 80060c8:	3720      	adds	r7, #32
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	08006705 	.word	0x08006705

080060d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006104:	2300      	movs	r3, #0
 8006106:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4ba2      	ldr	r3, [pc, #648]	; (80063b4 <UART_SetConfig+0x2b8>)
 800612c:	4013      	ands	r3, r2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	6939      	ldr	r1, [r7, #16]
 8006134:	430b      	orrs	r3, r1
 8006136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	430a      	orrs	r2, r1
 8006170:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a90      	ldr	r2, [pc, #576]	; (80063b8 <UART_SetConfig+0x2bc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d121      	bne.n	80061c0 <UART_SetConfig+0xc4>
 800617c:	4b8f      	ldr	r3, [pc, #572]	; (80063bc <UART_SetConfig+0x2c0>)
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	f003 0303 	and.w	r3, r3, #3
 8006184:	2b03      	cmp	r3, #3
 8006186:	d817      	bhi.n	80061b8 <UART_SetConfig+0xbc>
 8006188:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <UART_SetConfig+0x94>)
 800618a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618e:	bf00      	nop
 8006190:	080061a1 	.word	0x080061a1
 8006194:	080061ad 	.word	0x080061ad
 8006198:	080061b3 	.word	0x080061b3
 800619c:	080061a7 	.word	0x080061a7
 80061a0:	2300      	movs	r3, #0
 80061a2:	77fb      	strb	r3, [r7, #31]
 80061a4:	e01e      	b.n	80061e4 <UART_SetConfig+0xe8>
 80061a6:	2302      	movs	r3, #2
 80061a8:	77fb      	strb	r3, [r7, #31]
 80061aa:	e01b      	b.n	80061e4 <UART_SetConfig+0xe8>
 80061ac:	2304      	movs	r3, #4
 80061ae:	77fb      	strb	r3, [r7, #31]
 80061b0:	e018      	b.n	80061e4 <UART_SetConfig+0xe8>
 80061b2:	2308      	movs	r3, #8
 80061b4:	77fb      	strb	r3, [r7, #31]
 80061b6:	e015      	b.n	80061e4 <UART_SetConfig+0xe8>
 80061b8:	2310      	movs	r3, #16
 80061ba:	77fb      	strb	r3, [r7, #31]
 80061bc:	bf00      	nop
 80061be:	e011      	b.n	80061e4 <UART_SetConfig+0xe8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a7e      	ldr	r2, [pc, #504]	; (80063c0 <UART_SetConfig+0x2c4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d102      	bne.n	80061d0 <UART_SetConfig+0xd4>
 80061ca:	2300      	movs	r3, #0
 80061cc:	77fb      	strb	r3, [r7, #31]
 80061ce:	e009      	b.n	80061e4 <UART_SetConfig+0xe8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a7b      	ldr	r2, [pc, #492]	; (80063c4 <UART_SetConfig+0x2c8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d102      	bne.n	80061e0 <UART_SetConfig+0xe4>
 80061da:	2300      	movs	r3, #0
 80061dc:	77fb      	strb	r3, [r7, #31]
 80061de:	e001      	b.n	80061e4 <UART_SetConfig+0xe8>
 80061e0:	2310      	movs	r3, #16
 80061e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ec:	f040 8082 	bne.w	80062f4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80061f0:	7ffb      	ldrb	r3, [r7, #31]
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d85e      	bhi.n	80062b4 <UART_SetConfig+0x1b8>
 80061f6:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <UART_SetConfig+0x100>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	08006221 	.word	0x08006221
 8006200:	08006241 	.word	0x08006241
 8006204:	08006261 	.word	0x08006261
 8006208:	080062b5 	.word	0x080062b5
 800620c:	0800627d 	.word	0x0800627d
 8006210:	080062b5 	.word	0x080062b5
 8006214:	080062b5 	.word	0x080062b5
 8006218:	080062b5 	.word	0x080062b5
 800621c:	0800629d 	.word	0x0800629d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006220:	f7fe fc24 	bl	8004a6c <HAL_RCC_GetPCLK1Freq>
 8006224:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	005a      	lsls	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	441a      	add	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	fbb2 f3f3 	udiv	r3, r2, r3
 800623a:	b29b      	uxth	r3, r3
 800623c:	61bb      	str	r3, [r7, #24]
        break;
 800623e:	e03c      	b.n	80062ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006240:	f7fe fc36 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 8006244:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	005a      	lsls	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	085b      	lsrs	r3, r3, #1
 8006250:	441a      	add	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	fbb2 f3f3 	udiv	r3, r2, r3
 800625a:	b29b      	uxth	r3, r3
 800625c:	61bb      	str	r3, [r7, #24]
        break;
 800625e:	e02c      	b.n	80062ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	085b      	lsrs	r3, r3, #1
 8006266:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800626a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6852      	ldr	r2, [r2, #4]
 8006272:	fbb3 f3f2 	udiv	r3, r3, r2
 8006276:	b29b      	uxth	r3, r3
 8006278:	61bb      	str	r3, [r7, #24]
        break;
 800627a:	e01e      	b.n	80062ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800627c:	f7fe fb7e 	bl	800497c <HAL_RCC_GetSysClockFreq>
 8006280:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	005a      	lsls	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	441a      	add	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	fbb2 f3f3 	udiv	r3, r2, r3
 8006296:	b29b      	uxth	r3, r3
 8006298:	61bb      	str	r3, [r7, #24]
        break;
 800629a:	e00e      	b.n	80062ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	085b      	lsrs	r3, r3, #1
 80062a2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	61bb      	str	r3, [r7, #24]
        break;
 80062b2:	e002      	b.n	80062ba <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	75fb      	strb	r3, [r7, #23]
        break;
 80062b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b0f      	cmp	r3, #15
 80062be:	d916      	bls.n	80062ee <UART_SetConfig+0x1f2>
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c6:	d212      	bcs.n	80062ee <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f023 030f 	bic.w	r3, r3, #15
 80062d0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	085b      	lsrs	r3, r3, #1
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	b29a      	uxth	r2, r3
 80062de:	897b      	ldrh	r3, [r7, #10]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	897a      	ldrh	r2, [r7, #10]
 80062ea:	60da      	str	r2, [r3, #12]
 80062ec:	e07d      	b.n	80063ea <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]
 80062f2:	e07a      	b.n	80063ea <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 80062f4:	7ffb      	ldrb	r3, [r7, #31]
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d866      	bhi.n	80063c8 <UART_SetConfig+0x2cc>
 80062fa:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <UART_SetConfig+0x204>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	08006325 	.word	0x08006325
 8006304:	08006343 	.word	0x08006343
 8006308:	08006361 	.word	0x08006361
 800630c:	080063c9 	.word	0x080063c9
 8006310:	0800637d 	.word	0x0800637d
 8006314:	080063c9 	.word	0x080063c9
 8006318:	080063c9 	.word	0x080063c9
 800631c:	080063c9 	.word	0x080063c9
 8006320:	0800639b 	.word	0x0800639b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006324:	f7fe fba2 	bl	8004a6c <HAL_RCC_GetPCLK1Freq>
 8006328:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	085a      	lsrs	r2, r3, #1
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	441a      	add	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	fbb2 f3f3 	udiv	r3, r2, r3
 800633c:	b29b      	uxth	r3, r3
 800633e:	61bb      	str	r3, [r7, #24]
        break;
 8006340:	e045      	b.n	80063ce <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006342:	f7fe fbb5 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 8006346:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	085a      	lsrs	r2, r3, #1
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	441a      	add	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	fbb2 f3f3 	udiv	r3, r2, r3
 800635a:	b29b      	uxth	r3, r3
 800635c:	61bb      	str	r3, [r7, #24]
        break;
 800635e:	e036      	b.n	80063ce <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800636a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	6852      	ldr	r2, [r2, #4]
 8006372:	fbb3 f3f2 	udiv	r3, r3, r2
 8006376:	b29b      	uxth	r3, r3
 8006378:	61bb      	str	r3, [r7, #24]
        break;
 800637a:	e028      	b.n	80063ce <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637c:	f7fe fafe 	bl	800497c <HAL_RCC_GetSysClockFreq>
 8006380:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	085a      	lsrs	r2, r3, #1
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	441a      	add	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	fbb2 f3f3 	udiv	r3, r2, r3
 8006394:	b29b      	uxth	r3, r3
 8006396:	61bb      	str	r3, [r7, #24]
        break;
 8006398:	e019      	b.n	80063ce <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	61bb      	str	r3, [r7, #24]
        break;
 80063b0:	e00d      	b.n	80063ce <UART_SetConfig+0x2d2>
 80063b2:	bf00      	nop
 80063b4:	efff69f3 	.word	0xefff69f3
 80063b8:	40013800 	.word	0x40013800
 80063bc:	40021000 	.word	0x40021000
 80063c0:	40004400 	.word	0x40004400
 80063c4:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	75fb      	strb	r3, [r7, #23]
        break;
 80063cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2b0f      	cmp	r3, #15
 80063d2:	d908      	bls.n	80063e6 <UART_SetConfig+0x2ea>
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063da:	d204      	bcs.n	80063e6 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	60da      	str	r2, [r3, #12]
 80063e4:	e001      	b.n	80063ea <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3720      	adds	r7, #32
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00a      	beq.n	800646e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01a      	beq.n	8006516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064fe:	d10a      	bne.n	8006516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	605a      	str	r2, [r3, #4]
  }
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af02      	add	r7, sp, #8
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006552:	f7fb fac1 	bl	8001ad8 <HAL_GetTick>
 8006556:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0308 	and.w	r3, r3, #8
 8006562:	2b08      	cmp	r3, #8
 8006564:	d10e      	bne.n	8006584 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006566:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f82a 	bl	80065ce <UART_WaitOnFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e020      	b.n	80065c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b04      	cmp	r3, #4
 8006590:	d10e      	bne.n	80065b0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006592:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f814 	bl	80065ce <UART_WaitOnFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e00a      	b.n	80065c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2220      	movs	r2, #32
 80065b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	4613      	mov	r3, r2
 80065dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065de:	e05d      	b.n	800669c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e6:	d059      	beq.n	800669c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065e8:	f7fb fa76 	bl	8001ad8 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d302      	bcc.n	80065fe <UART_WaitOnFlagUntilTimeout+0x30>
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d11b      	bne.n	8006636 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800660c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0201 	bic.w	r2, r2, #1
 800661c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2220      	movs	r2, #32
 8006622:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e042      	b.n	80066bc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d02b      	beq.n	800669c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800664e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006652:	d123      	bne.n	800669c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800665c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800666c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0201 	bic.w	r2, r2, #1
 800667c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2220      	movs	r2, #32
 8006682:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e00f      	b.n	80066bc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69da      	ldr	r2, [r3, #28]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4013      	ands	r3, r2
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	bf0c      	ite	eq
 80066ac:	2301      	moveq	r3, #1
 80066ae:	2300      	movne	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d092      	beq.n	80065e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f7ff fce0 	bl	80060e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006728:	bf00      	nop
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006746:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff fcbd 	bl	80060d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006776:	b480      	push	{r7}
 8006778:	b085      	sub	sp, #20
 800677a:	af00      	add	r7, sp, #0
 800677c:	4603      	mov	r3, r0
 800677e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006788:	2b84      	cmp	r3, #132	; 0x84
 800678a:	d005      	beq.n	8006798 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800678c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	3303      	adds	r3, #3
 8006796:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006798:	68fb      	ldr	r3, [r7, #12]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80067aa:	f000 fad1 	bl	8006d50 <vTaskStartScheduler>
  
  return osOK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80067b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067b6:	b089      	sub	sp, #36	; 0x24
 80067b8:	af04      	add	r7, sp, #16
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d020      	beq.n	8006808 <osThreadCreate+0x54>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d01c      	beq.n	8006808 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685c      	ldr	r4, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681d      	ldr	r5, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691e      	ldr	r6, [r3, #16]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff ffc8 	bl	8006776 <makeFreeRtosPriority>
 80067e6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067f0:	9202      	str	r2, [sp, #8]
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	9100      	str	r1, [sp, #0]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	4632      	mov	r2, r6
 80067fa:	4629      	mov	r1, r5
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 f8ed 	bl	80069dc <xTaskCreateStatic>
 8006802:	4603      	mov	r3, r0
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	e01c      	b.n	8006842 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685c      	ldr	r4, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006814:	b29e      	uxth	r6, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff ffaa 	bl	8006776 <makeFreeRtosPriority>
 8006822:	4602      	mov	r2, r0
 8006824:	f107 030c 	add.w	r3, r7, #12
 8006828:	9301      	str	r3, [sp, #4]
 800682a:	9200      	str	r2, [sp, #0]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	4632      	mov	r2, r6
 8006830:	4629      	mov	r1, r5
 8006832:	4620      	mov	r0, r4
 8006834:	f000 f92b 	bl	8006a8e <xTaskCreate>
 8006838:	4603      	mov	r3, r0
 800683a:	2b01      	cmp	r3, #1
 800683c:	d001      	beq.n	8006842 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800683e:	2300      	movs	r3, #0
 8006840:	e000      	b.n	8006844 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006842:	68fb      	ldr	r3, [r7, #12]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800684c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <osDelay+0x16>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	e000      	b.n	8006864 <osDelay+0x18>
 8006862:	2301      	movs	r3, #1
 8006864:	4618      	mov	r0, r3
 8006866:	f000 fa3f 	bl	8006ce8 <vTaskDelay>
  
  return osOK;
 800686a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f103 0208 	add.w	r2, r3, #8
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f04f 32ff 	mov.w	r2, #4294967295
 800688c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f103 0208 	add.w	r2, r3, #8
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f103 0208 	add.w	r2, r3, #8
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	601a      	str	r2, [r3, #0]
}
 800690a:	bf00      	nop
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006916:	b480      	push	{r7}
 8006918:	b085      	sub	sp, #20
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d103      	bne.n	8006936 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	e00c      	b.n	8006950 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	3308      	adds	r3, #8
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	e002      	b.n	8006944 <vListInsert+0x2e>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	429a      	cmp	r2, r3
 800694e:	d2f6      	bcs.n	800693e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	601a      	str	r2, [r3, #0]
}
 800697c:	bf00      	nop
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6892      	ldr	r2, [r2, #8]
 800699e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6852      	ldr	r2, [r2, #4]
 80069a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d103      	bne.n	80069bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	1e5a      	subs	r2, r3, #1
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08e      	sub	sp, #56	; 0x38
 80069e0:	af04      	add	r7, sp, #16
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d109      	bne.n	8006a04 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	623b      	str	r3, [r7, #32]
 8006a02:	e7fe      	b.n	8006a02 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <xTaskCreateStatic+0x42>
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	61fb      	str	r3, [r7, #28]
 8006a1c:	e7fe      	b.n	8006a1c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a1e:	2354      	movs	r3, #84	; 0x54
 8006a20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b54      	cmp	r3, #84	; 0x54
 8006a26:	d009      	beq.n	8006a3c <xTaskCreateStatic+0x60>
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	e7fe      	b.n	8006a3a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d01e      	beq.n	8006a80 <xTaskCreateStatic+0xa4>
 8006a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d01b      	beq.n	8006a80 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	9303      	str	r3, [sp, #12]
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	9302      	str	r3, [sp, #8]
 8006a62:	f107 0314 	add.w	r3, r7, #20
 8006a66:	9301      	str	r3, [sp, #4]
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f850 	bl	8006b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a7a:	f000 f8cb 	bl	8006c14 <prvAddNewTaskToReadyList>
 8006a7e:	e001      	b.n	8006a84 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a84:	697b      	ldr	r3, [r7, #20]
	}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3728      	adds	r7, #40	; 0x28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b08c      	sub	sp, #48	; 0x30
 8006a92:	af04      	add	r7, sp, #16
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	603b      	str	r3, [r7, #0]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 feb6 	bl	8007814 <pvPortMalloc>
 8006aa8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00e      	beq.n	8006ace <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006ab0:	2054      	movs	r0, #84	; 0x54
 8006ab2:	f000 feaf 	bl	8007814 <pvPortMalloc>
 8006ab6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ac4:	e005      	b.n	8006ad2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ac6:	6978      	ldr	r0, [r7, #20]
 8006ac8:	f000 ff66 	bl	8007998 <vPortFree>
 8006acc:	e001      	b.n	8006ad2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d017      	beq.n	8006b08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ae0:	88fa      	ldrh	r2, [r7, #6]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9303      	str	r3, [sp, #12]
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	9302      	str	r3, [sp, #8]
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	9301      	str	r3, [sp, #4]
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 f80e 	bl	8006b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006afc:	69f8      	ldr	r0, [r7, #28]
 8006afe:	f000 f889 	bl	8006c14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b02:	2301      	movs	r3, #1
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	e002      	b.n	8006b0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b08:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b0e:	69bb      	ldr	r3, [r7, #24]
	}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3720      	adds	r7, #32
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b30:	3b01      	subs	r3, #1
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	f023 0307 	bic.w	r3, r3, #7
 8006b3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d009      	beq.n	8006b5e <prvInitialiseNewTask+0x46>
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e7fe      	b.n	8006b5c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b5e:	2300      	movs	r3, #0
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	e012      	b.n	8006b8a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	4413      	add	r3, r2
 8006b6a:	7819      	ldrb	r1, [r3, #0]
 8006b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	4413      	add	r3, r2
 8006b72:	3334      	adds	r3, #52	; 0x34
 8006b74:	460a      	mov	r2, r1
 8006b76:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d006      	beq.n	8006b92 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	3301      	adds	r3, #1
 8006b88:	61fb      	str	r3, [r7, #28]
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	2b0f      	cmp	r3, #15
 8006b8e:	d9e9      	bls.n	8006b64 <prvInitialiseNewTask+0x4c>
 8006b90:	e000      	b.n	8006b94 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006b92:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	2b06      	cmp	r3, #6
 8006ba0:	d901      	bls.n	8006ba6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ba2:	2306      	movs	r3, #6
 8006ba4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006baa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bb0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7ff fe79 	bl	80068b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	3318      	adds	r3, #24
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff fe74 	bl	80068b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd4:	f1c3 0207 	rsb	r2, r3, #7
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bda:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	2200      	movs	r2, #0
 8006be6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	68f9      	ldr	r1, [r7, #12]
 8006bf4:	69b8      	ldr	r0, [r7, #24]
 8006bf6:	f000 fc07 	bl	8007408 <pxPortInitialiseStack>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c0c:	bf00      	nop
 8006c0e:	3720      	adds	r7, #32
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c1c:	f000 fd1e 	bl	800765c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c20:	4b2a      	ldr	r3, [pc, #168]	; (8006ccc <prvAddNewTaskToReadyList+0xb8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3301      	adds	r3, #1
 8006c26:	4a29      	ldr	r2, [pc, #164]	; (8006ccc <prvAddNewTaskToReadyList+0xb8>)
 8006c28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c2a:	4b29      	ldr	r3, [pc, #164]	; (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c32:	4a27      	ldr	r2, [pc, #156]	; (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c38:	4b24      	ldr	r3, [pc, #144]	; (8006ccc <prvAddNewTaskToReadyList+0xb8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d110      	bne.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c40:	f000 fabc 	bl	80071bc <prvInitialiseTaskLists>
 8006c44:	e00d      	b.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c46:	4b23      	ldr	r3, [pc, #140]	; (8006cd4 <prvAddNewTaskToReadyList+0xc0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d109      	bne.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c4e:	4b20      	ldr	r3, [pc, #128]	; (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d802      	bhi.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c5c:	4a1c      	ldr	r2, [pc, #112]	; (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c62:	4b1d      	ldr	r3, [pc, #116]	; (8006cd8 <prvAddNewTaskToReadyList+0xc4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3301      	adds	r3, #1
 8006c68:	4a1b      	ldr	r2, [pc, #108]	; (8006cd8 <prvAddNewTaskToReadyList+0xc4>)
 8006c6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	2201      	movs	r2, #1
 8006c72:	409a      	lsls	r2, r3
 8006c74:	4b19      	ldr	r3, [pc, #100]	; (8006cdc <prvAddNewTaskToReadyList+0xc8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	4a18      	ldr	r2, [pc, #96]	; (8006cdc <prvAddNewTaskToReadyList+0xc8>)
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4a15      	ldr	r2, [pc, #84]	; (8006ce0 <prvAddNewTaskToReadyList+0xcc>)
 8006c8c:	441a      	add	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3304      	adds	r3, #4
 8006c92:	4619      	mov	r1, r3
 8006c94:	4610      	mov	r0, r2
 8006c96:	f7ff fe1a 	bl	80068ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c9a:	f000 fd0d 	bl	80076b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <prvAddNewTaskToReadyList+0xc0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00e      	beq.n	8006cc4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ca6:	4b0a      	ldr	r3, [pc, #40]	; (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d207      	bcs.n	8006cc4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ce4 <prvAddNewTaskToReadyList+0xd0>)
 8006cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cc4:	bf00      	nop
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	20000388 	.word	0x20000388
 8006cd0:	20000288 	.word	0x20000288
 8006cd4:	20000394 	.word	0x20000394
 8006cd8:	200003a4 	.word	0x200003a4
 8006cdc:	20000390 	.word	0x20000390
 8006ce0:	2000028c 	.word	0x2000028c
 8006ce4:	e000ed04 	.word	0xe000ed04

08006ce8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d016      	beq.n	8006d28 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cfa:	4b13      	ldr	r3, [pc, #76]	; (8006d48 <vTaskDelay+0x60>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d009      	beq.n	8006d16 <vTaskDelay+0x2e>
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	60bb      	str	r3, [r7, #8]
 8006d14:	e7fe      	b.n	8006d14 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006d16:	f000 f879 	bl	8006e0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fb0d 	bl	800733c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d22:	f000 f881 	bl	8006e28 <xTaskResumeAll>
 8006d26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d107      	bne.n	8006d3e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006d2e:	4b07      	ldr	r3, [pc, #28]	; (8006d4c <vTaskDelay+0x64>)
 8006d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d3e:	bf00      	nop
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	200003b0 	.word	0x200003b0
 8006d4c:	e000ed04 	.word	0xe000ed04

08006d50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	; 0x28
 8006d54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d5e:	463a      	mov	r2, r7
 8006d60:	1d39      	adds	r1, r7, #4
 8006d62:	f107 0308 	add.w	r3, r7, #8
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fa f8ea 	bl	8000f40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	9202      	str	r2, [sp, #8]
 8006d74:	9301      	str	r3, [sp, #4]
 8006d76:	2300      	movs	r3, #0
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	460a      	mov	r2, r1
 8006d7e:	491d      	ldr	r1, [pc, #116]	; (8006df4 <vTaskStartScheduler+0xa4>)
 8006d80:	481d      	ldr	r0, [pc, #116]	; (8006df8 <vTaskStartScheduler+0xa8>)
 8006d82:	f7ff fe2b 	bl	80069dc <xTaskCreateStatic>
 8006d86:	4602      	mov	r2, r0
 8006d88:	4b1c      	ldr	r3, [pc, #112]	; (8006dfc <vTaskStartScheduler+0xac>)
 8006d8a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d8c:	4b1b      	ldr	r3, [pc, #108]	; (8006dfc <vTaskStartScheduler+0xac>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d94:	2301      	movs	r3, #1
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	e001      	b.n	8006d9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d115      	bne.n	8006dd0 <vTaskStartScheduler+0x80>
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006db6:	4b12      	ldr	r3, [pc, #72]	; (8006e00 <vTaskStartScheduler+0xb0>)
 8006db8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dbe:	4b11      	ldr	r3, [pc, #68]	; (8006e04 <vTaskStartScheduler+0xb4>)
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006dc4:	4b10      	ldr	r3, [pc, #64]	; (8006e08 <vTaskStartScheduler+0xb8>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dca:	f000 fba9 	bl	8007520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dce:	e00d      	b.n	8006dec <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd6:	d109      	bne.n	8006dec <vTaskStartScheduler+0x9c>
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	e7fe      	b.n	8006dea <vTaskStartScheduler+0x9a>
}
 8006dec:	bf00      	nop
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	08008774 	.word	0x08008774
 8006df8:	0800718d 	.word	0x0800718d
 8006dfc:	200003ac 	.word	0x200003ac
 8006e00:	200003a8 	.word	0x200003a8
 8006e04:	20000394 	.word	0x20000394
 8006e08:	2000038c 	.word	0x2000038c

08006e0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e10:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <vTaskSuspendAll+0x18>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3301      	adds	r3, #1
 8006e16:	4a03      	ldr	r2, [pc, #12]	; (8006e24 <vTaskSuspendAll+0x18>)
 8006e18:	6013      	str	r3, [r2, #0]
}
 8006e1a:	bf00      	nop
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	200003b0 	.word	0x200003b0

08006e28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e36:	4b41      	ldr	r3, [pc, #260]	; (8006f3c <xTaskResumeAll+0x114>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d109      	bne.n	8006e52 <xTaskResumeAll+0x2a>
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	e7fe      	b.n	8006e50 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e52:	f000 fc03 	bl	800765c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e56:	4b39      	ldr	r3, [pc, #228]	; (8006f3c <xTaskResumeAll+0x114>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	4a37      	ldr	r2, [pc, #220]	; (8006f3c <xTaskResumeAll+0x114>)
 8006e5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e60:	4b36      	ldr	r3, [pc, #216]	; (8006f3c <xTaskResumeAll+0x114>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d161      	bne.n	8006f2c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e68:	4b35      	ldr	r3, [pc, #212]	; (8006f40 <xTaskResumeAll+0x118>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d05d      	beq.n	8006f2c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e70:	e02e      	b.n	8006ed0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006e72:	4b34      	ldr	r3, [pc, #208]	; (8006f44 <xTaskResumeAll+0x11c>)
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3318      	adds	r3, #24
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7ff fd82 	bl	8006988 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff fd7d 	bl	8006988 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	2201      	movs	r2, #1
 8006e94:	409a      	lsls	r2, r3
 8006e96:	4b2c      	ldr	r3, [pc, #176]	; (8006f48 <xTaskResumeAll+0x120>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	4a2a      	ldr	r2, [pc, #168]	; (8006f48 <xTaskResumeAll+0x120>)
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4a27      	ldr	r2, [pc, #156]	; (8006f4c <xTaskResumeAll+0x124>)
 8006eae:	441a      	add	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	f7ff fd09 	bl	80068ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec0:	4b23      	ldr	r3, [pc, #140]	; (8006f50 <xTaskResumeAll+0x128>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d302      	bcc.n	8006ed0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006eca:	4b22      	ldr	r3, [pc, #136]	; (8006f54 <xTaskResumeAll+0x12c>)
 8006ecc:	2201      	movs	r2, #1
 8006ece:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ed0:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <xTaskResumeAll+0x11c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1cc      	bne.n	8006e72 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ede:	f000 fa07 	bl	80072f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ee2:	4b1d      	ldr	r3, [pc, #116]	; (8006f58 <xTaskResumeAll+0x130>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d010      	beq.n	8006f10 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006eee:	f000 f837 	bl	8006f60 <xTaskIncrementTick>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006ef8:	4b16      	ldr	r3, [pc, #88]	; (8006f54 <xTaskResumeAll+0x12c>)
 8006efa:	2201      	movs	r2, #1
 8006efc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1f1      	bne.n	8006eee <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006f0a:	4b13      	ldr	r3, [pc, #76]	; (8006f58 <xTaskResumeAll+0x130>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f10:	4b10      	ldr	r3, [pc, #64]	; (8006f54 <xTaskResumeAll+0x12c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d009      	beq.n	8006f2c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f1c:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <xTaskResumeAll+0x134>)
 8006f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f2c:	f000 fbc4 	bl	80076b8 <vPortExitCritical>

	return xAlreadyYielded;
 8006f30:	68bb      	ldr	r3, [r7, #8]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	200003b0 	.word	0x200003b0
 8006f40:	20000388 	.word	0x20000388
 8006f44:	20000348 	.word	0x20000348
 8006f48:	20000390 	.word	0x20000390
 8006f4c:	2000028c 	.word	0x2000028c
 8006f50:	20000288 	.word	0x20000288
 8006f54:	2000039c 	.word	0x2000039c
 8006f58:	20000398 	.word	0x20000398
 8006f5c:	e000ed04 	.word	0xe000ed04

08006f60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f66:	2300      	movs	r3, #0
 8006f68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f6a:	4b50      	ldr	r3, [pc, #320]	; (80070ac <xTaskIncrementTick+0x14c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f040 808c 	bne.w	800708c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f74:	4b4e      	ldr	r3, [pc, #312]	; (80070b0 <xTaskIncrementTick+0x150>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f7c:	4a4c      	ldr	r2, [pc, #304]	; (80070b0 <xTaskIncrementTick+0x150>)
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d11f      	bne.n	8006fc8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f88:	4b4a      	ldr	r3, [pc, #296]	; (80070b4 <xTaskIncrementTick+0x154>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d009      	beq.n	8006fa6 <xTaskIncrementTick+0x46>
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	603b      	str	r3, [r7, #0]
 8006fa4:	e7fe      	b.n	8006fa4 <xTaskIncrementTick+0x44>
 8006fa6:	4b43      	ldr	r3, [pc, #268]	; (80070b4 <xTaskIncrementTick+0x154>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	4b42      	ldr	r3, [pc, #264]	; (80070b8 <xTaskIncrementTick+0x158>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a40      	ldr	r2, [pc, #256]	; (80070b4 <xTaskIncrementTick+0x154>)
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	4a40      	ldr	r2, [pc, #256]	; (80070b8 <xTaskIncrementTick+0x158>)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	4b40      	ldr	r3, [pc, #256]	; (80070bc <xTaskIncrementTick+0x15c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	4a3e      	ldr	r2, [pc, #248]	; (80070bc <xTaskIncrementTick+0x15c>)
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	f000 f994 	bl	80072f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fc8:	4b3d      	ldr	r3, [pc, #244]	; (80070c0 <xTaskIncrementTick+0x160>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d34d      	bcc.n	800706e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fd2:	4b38      	ldr	r3, [pc, #224]	; (80070b4 <xTaskIncrementTick+0x154>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <xTaskIncrementTick+0x80>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e000      	b.n	8006fe2 <xTaskIncrementTick+0x82>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d004      	beq.n	8006ff0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fe6:	4b36      	ldr	r3, [pc, #216]	; (80070c0 <xTaskIncrementTick+0x160>)
 8006fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fec:	601a      	str	r2, [r3, #0]
					break;
 8006fee:	e03e      	b.n	800706e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ff0:	4b30      	ldr	r3, [pc, #192]	; (80070b4 <xTaskIncrementTick+0x154>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	429a      	cmp	r2, r3
 8007006:	d203      	bcs.n	8007010 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007008:	4a2d      	ldr	r2, [pc, #180]	; (80070c0 <xTaskIncrementTick+0x160>)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6013      	str	r3, [r2, #0]
						break;
 800700e:	e02e      	b.n	800706e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	3304      	adds	r3, #4
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff fcb7 	bl	8006988 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	3318      	adds	r3, #24
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff fcae 	bl	8006988 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	2201      	movs	r2, #1
 8007032:	409a      	lsls	r2, r3
 8007034:	4b23      	ldr	r3, [pc, #140]	; (80070c4 <xTaskIncrementTick+0x164>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4313      	orrs	r3, r2
 800703a:	4a22      	ldr	r2, [pc, #136]	; (80070c4 <xTaskIncrementTick+0x164>)
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007042:	4613      	mov	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4a1f      	ldr	r2, [pc, #124]	; (80070c8 <xTaskIncrementTick+0x168>)
 800704c:	441a      	add	r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	3304      	adds	r3, #4
 8007052:	4619      	mov	r1, r3
 8007054:	4610      	mov	r0, r2
 8007056:	f7ff fc3a 	bl	80068ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705e:	4b1b      	ldr	r3, [pc, #108]	; (80070cc <xTaskIncrementTick+0x16c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	429a      	cmp	r2, r3
 8007066:	d3b4      	bcc.n	8006fd2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007068:	2301      	movs	r3, #1
 800706a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800706c:	e7b1      	b.n	8006fd2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800706e:	4b17      	ldr	r3, [pc, #92]	; (80070cc <xTaskIncrementTick+0x16c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	4914      	ldr	r1, [pc, #80]	; (80070c8 <xTaskIncrementTick+0x168>)
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	440b      	add	r3, r1
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d907      	bls.n	8007096 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007086:	2301      	movs	r3, #1
 8007088:	617b      	str	r3, [r7, #20]
 800708a:	e004      	b.n	8007096 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800708c:	4b10      	ldr	r3, [pc, #64]	; (80070d0 <xTaskIncrementTick+0x170>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	4a0f      	ldr	r2, [pc, #60]	; (80070d0 <xTaskIncrementTick+0x170>)
 8007094:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007096:	4b0f      	ldr	r3, [pc, #60]	; (80070d4 <xTaskIncrementTick+0x174>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800709e:	2301      	movs	r3, #1
 80070a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80070a2:	697b      	ldr	r3, [r7, #20]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3718      	adds	r7, #24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	200003b0 	.word	0x200003b0
 80070b0:	2000038c 	.word	0x2000038c
 80070b4:	20000340 	.word	0x20000340
 80070b8:	20000344 	.word	0x20000344
 80070bc:	200003a0 	.word	0x200003a0
 80070c0:	200003a8 	.word	0x200003a8
 80070c4:	20000390 	.word	0x20000390
 80070c8:	2000028c 	.word	0x2000028c
 80070cc:	20000288 	.word	0x20000288
 80070d0:	20000398 	.word	0x20000398
 80070d4:	2000039c 	.word	0x2000039c

080070d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070de:	4b26      	ldr	r3, [pc, #152]	; (8007178 <vTaskSwitchContext+0xa0>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070e6:	4b25      	ldr	r3, [pc, #148]	; (800717c <vTaskSwitchContext+0xa4>)
 80070e8:	2201      	movs	r2, #1
 80070ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070ec:	e03e      	b.n	800716c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80070ee:	4b23      	ldr	r3, [pc, #140]	; (800717c <vTaskSwitchContext+0xa4>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80070f4:	4b22      	ldr	r3, [pc, #136]	; (8007180 <vTaskSwitchContext+0xa8>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	fab3 f383 	clz	r3, r3
 8007100:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007102:	7afb      	ldrb	r3, [r7, #11]
 8007104:	f1c3 031f 	rsb	r3, r3, #31
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	491e      	ldr	r1, [pc, #120]	; (8007184 <vTaskSwitchContext+0xac>)
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4613      	mov	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	440b      	add	r3, r1
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d109      	bne.n	8007132 <vTaskSwitchContext+0x5a>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	607b      	str	r3, [r7, #4]
 8007130:	e7fe      	b.n	8007130 <vTaskSwitchContext+0x58>
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4613      	mov	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4413      	add	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4a11      	ldr	r2, [pc, #68]	; (8007184 <vTaskSwitchContext+0xac>)
 800713e:	4413      	add	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	605a      	str	r2, [r3, #4]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	3308      	adds	r3, #8
 8007154:	429a      	cmp	r2, r3
 8007156:	d104      	bne.n	8007162 <vTaskSwitchContext+0x8a>
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	4a07      	ldr	r2, [pc, #28]	; (8007188 <vTaskSwitchContext+0xb0>)
 800716a:	6013      	str	r3, [r2, #0]
}
 800716c:	bf00      	nop
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	200003b0 	.word	0x200003b0
 800717c:	2000039c 	.word	0x2000039c
 8007180:	20000390 	.word	0x20000390
 8007184:	2000028c 	.word	0x2000028c
 8007188:	20000288 	.word	0x20000288

0800718c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007194:	f000 f852 	bl	800723c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007198:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <prvIdleTask+0x28>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d9f9      	bls.n	8007194 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <prvIdleTask+0x2c>)
 80071a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071b0:	e7f0      	b.n	8007194 <prvIdleTask+0x8>
 80071b2:	bf00      	nop
 80071b4:	2000028c 	.word	0x2000028c
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071c2:	2300      	movs	r3, #0
 80071c4:	607b      	str	r3, [r7, #4]
 80071c6:	e00c      	b.n	80071e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	4613      	mov	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4a12      	ldr	r2, [pc, #72]	; (800721c <prvInitialiseTaskLists+0x60>)
 80071d4:	4413      	add	r3, r2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7ff fb4c 	bl	8006874 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3301      	adds	r3, #1
 80071e0:	607b      	str	r3, [r7, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b06      	cmp	r3, #6
 80071e6:	d9ef      	bls.n	80071c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071e8:	480d      	ldr	r0, [pc, #52]	; (8007220 <prvInitialiseTaskLists+0x64>)
 80071ea:	f7ff fb43 	bl	8006874 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071ee:	480d      	ldr	r0, [pc, #52]	; (8007224 <prvInitialiseTaskLists+0x68>)
 80071f0:	f7ff fb40 	bl	8006874 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071f4:	480c      	ldr	r0, [pc, #48]	; (8007228 <prvInitialiseTaskLists+0x6c>)
 80071f6:	f7ff fb3d 	bl	8006874 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071fa:	480c      	ldr	r0, [pc, #48]	; (800722c <prvInitialiseTaskLists+0x70>)
 80071fc:	f7ff fb3a 	bl	8006874 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007200:	480b      	ldr	r0, [pc, #44]	; (8007230 <prvInitialiseTaskLists+0x74>)
 8007202:	f7ff fb37 	bl	8006874 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007206:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <prvInitialiseTaskLists+0x78>)
 8007208:	4a05      	ldr	r2, [pc, #20]	; (8007220 <prvInitialiseTaskLists+0x64>)
 800720a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800720c:	4b0a      	ldr	r3, [pc, #40]	; (8007238 <prvInitialiseTaskLists+0x7c>)
 800720e:	4a05      	ldr	r2, [pc, #20]	; (8007224 <prvInitialiseTaskLists+0x68>)
 8007210:	601a      	str	r2, [r3, #0]
}
 8007212:	bf00      	nop
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	2000028c 	.word	0x2000028c
 8007220:	20000318 	.word	0x20000318
 8007224:	2000032c 	.word	0x2000032c
 8007228:	20000348 	.word	0x20000348
 800722c:	2000035c 	.word	0x2000035c
 8007230:	20000374 	.word	0x20000374
 8007234:	20000340 	.word	0x20000340
 8007238:	20000344 	.word	0x20000344

0800723c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007242:	e019      	b.n	8007278 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007244:	f000 fa0a 	bl	800765c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007248:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <prvCheckTasksWaitingTermination+0x4c>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3304      	adds	r3, #4
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff fb97 	bl	8006988 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800725a:	4b0c      	ldr	r3, [pc, #48]	; (800728c <prvCheckTasksWaitingTermination+0x50>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3b01      	subs	r3, #1
 8007260:	4a0a      	ldr	r2, [pc, #40]	; (800728c <prvCheckTasksWaitingTermination+0x50>)
 8007262:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007264:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <prvCheckTasksWaitingTermination+0x54>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3b01      	subs	r3, #1
 800726a:	4a09      	ldr	r2, [pc, #36]	; (8007290 <prvCheckTasksWaitingTermination+0x54>)
 800726c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800726e:	f000 fa23 	bl	80076b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f80e 	bl	8007294 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <prvCheckTasksWaitingTermination+0x54>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e1      	bne.n	8007244 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	2000035c 	.word	0x2000035c
 800728c:	20000388 	.word	0x20000388
 8007290:	20000370 	.word	0x20000370

08007294 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d108      	bne.n	80072b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 fb74 	bl	8007998 <vPortFree>
				vPortFree( pxTCB );
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fb71 	bl	8007998 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072b6:	e017      	b.n	80072e8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d103      	bne.n	80072ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fb68 	bl	8007998 <vPortFree>
	}
 80072c8:	e00e      	b.n	80072e8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d009      	beq.n	80072e8 <prvDeleteTCB+0x54>
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	e7fe      	b.n	80072e6 <prvDeleteTCB+0x52>
	}
 80072e8:	bf00      	nop
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072f6:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <prvResetNextTaskUnblockTime+0x44>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <prvResetNextTaskUnblockTime+0x14>
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <prvResetNextTaskUnblockTime+0x16>
 8007304:	2300      	movs	r3, #0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800730a:	4b0b      	ldr	r3, [pc, #44]	; (8007338 <prvResetNextTaskUnblockTime+0x48>)
 800730c:	f04f 32ff 	mov.w	r2, #4294967295
 8007310:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007312:	e008      	b.n	8007326 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007314:	4b07      	ldr	r3, [pc, #28]	; (8007334 <prvResetNextTaskUnblockTime+0x44>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	4a05      	ldr	r2, [pc, #20]	; (8007338 <prvResetNextTaskUnblockTime+0x48>)
 8007324:	6013      	str	r3, [r2, #0]
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20000340 	.word	0x20000340
 8007338:	200003a8 	.word	0x200003a8

0800733c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007346:	4b29      	ldr	r3, [pc, #164]	; (80073ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800734c:	4b28      	ldr	r3, [pc, #160]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3304      	adds	r3, #4
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff fb18 	bl	8006988 <uxListRemove>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10b      	bne.n	8007376 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	2201      	movs	r2, #1
 8007366:	fa02 f303 	lsl.w	r3, r2, r3
 800736a:	43da      	mvns	r2, r3
 800736c:	4b21      	ldr	r3, [pc, #132]	; (80073f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4013      	ands	r3, r2
 8007372:	4a20      	ldr	r2, [pc, #128]	; (80073f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007374:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d10a      	bne.n	8007394 <prvAddCurrentTaskToDelayedList+0x58>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d007      	beq.n	8007394 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007384:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3304      	adds	r3, #4
 800738a:	4619      	mov	r1, r3
 800738c:	481a      	ldr	r0, [pc, #104]	; (80073f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800738e:	f7ff fa9e 	bl	80068ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007392:	e026      	b.n	80073e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4413      	add	r3, r2
 800739a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800739c:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d209      	bcs.n	80073c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073ac:	4b13      	ldr	r3, [pc, #76]	; (80073fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3304      	adds	r3, #4
 80073b6:	4619      	mov	r1, r3
 80073b8:	4610      	mov	r0, r2
 80073ba:	f7ff faac 	bl	8006916 <vListInsert>
}
 80073be:	e010      	b.n	80073e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073c0:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <prvAddCurrentTaskToDelayedList+0xc4>)
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3304      	adds	r3, #4
 80073ca:	4619      	mov	r1, r3
 80073cc:	4610      	mov	r0, r2
 80073ce:	f7ff faa2 	bl	8006916 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073d2:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d202      	bcs.n	80073e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80073dc:	4a09      	ldr	r2, [pc, #36]	; (8007404 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6013      	str	r3, [r2, #0]
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	2000038c 	.word	0x2000038c
 80073f0:	20000288 	.word	0x20000288
 80073f4:	20000390 	.word	0x20000390
 80073f8:	20000374 	.word	0x20000374
 80073fc:	20000344 	.word	0x20000344
 8007400:	20000340 	.word	0x20000340
 8007404:	200003a8 	.word	0x200003a8

08007408 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3b04      	subs	r3, #4
 8007418:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3b04      	subs	r3, #4
 8007426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f023 0201 	bic.w	r2, r3, #1
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3b04      	subs	r3, #4
 8007436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007438:	4a0c      	ldr	r2, [pc, #48]	; (800746c <pxPortInitialiseStack+0x64>)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3b14      	subs	r3, #20
 8007442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3b04      	subs	r3, #4
 800744e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f06f 0202 	mvn.w	r2, #2
 8007456:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3b20      	subs	r3, #32
 800745c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800745e:	68fb      	ldr	r3, [r7, #12]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	08007471 	.word	0x08007471

08007470 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800747a:	4b11      	ldr	r3, [pc, #68]	; (80074c0 <prvTaskExitError+0x50>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007482:	d009      	beq.n	8007498 <prvTaskExitError+0x28>
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	e7fe      	b.n	8007496 <prvTaskExitError+0x26>
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074aa:	bf00      	nop
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0fc      	beq.n	80074ac <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074b2:	bf00      	nop
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	2000000c 	.word	0x2000000c
	...

080074d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <pxCurrentTCBConst2>)
 80074d2:	6819      	ldr	r1, [r3, #0]
 80074d4:	6808      	ldr	r0, [r1, #0]
 80074d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	f380 8809 	msr	PSP, r0
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8811 	msr	BASEPRI, r0
 80074ea:	4770      	bx	lr
 80074ec:	f3af 8000 	nop.w

080074f0 <pxCurrentTCBConst2>:
 80074f0:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop

080074f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074f8:	4808      	ldr	r0, [pc, #32]	; (800751c <prvPortStartFirstTask+0x24>)
 80074fa:	6800      	ldr	r0, [r0, #0]
 80074fc:	6800      	ldr	r0, [r0, #0]
 80074fe:	f380 8808 	msr	MSP, r0
 8007502:	f04f 0000 	mov.w	r0, #0
 8007506:	f380 8814 	msr	CONTROL, r0
 800750a:	b662      	cpsie	i
 800750c:	b661      	cpsie	f
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	df00      	svc	0
 8007518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800751a:	bf00      	nop
 800751c:	e000ed08 	.word	0xe000ed08

08007520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007526:	4b44      	ldr	r3, [pc, #272]	; (8007638 <xPortStartScheduler+0x118>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a44      	ldr	r2, [pc, #272]	; (800763c <xPortStartScheduler+0x11c>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d109      	bne.n	8007544 <xPortStartScheduler+0x24>
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	613b      	str	r3, [r7, #16]
 8007542:	e7fe      	b.n	8007542 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007544:	4b3c      	ldr	r3, [pc, #240]	; (8007638 <xPortStartScheduler+0x118>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a3d      	ldr	r2, [pc, #244]	; (8007640 <xPortStartScheduler+0x120>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d109      	bne.n	8007562 <xPortStartScheduler+0x42>
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	e7fe      	b.n	8007560 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007562:	4b38      	ldr	r3, [pc, #224]	; (8007644 <xPortStartScheduler+0x124>)
 8007564:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	22ff      	movs	r2, #255	; 0xff
 8007572:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800757c:	78fb      	ldrb	r3, [r7, #3]
 800757e:	b2db      	uxtb	r3, r3
 8007580:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007584:	b2da      	uxtb	r2, r3
 8007586:	4b30      	ldr	r3, [pc, #192]	; (8007648 <xPortStartScheduler+0x128>)
 8007588:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800758a:	4b30      	ldr	r3, [pc, #192]	; (800764c <xPortStartScheduler+0x12c>)
 800758c:	2207      	movs	r2, #7
 800758e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007590:	e009      	b.n	80075a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007592:	4b2e      	ldr	r3, [pc, #184]	; (800764c <xPortStartScheduler+0x12c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3b01      	subs	r3, #1
 8007598:	4a2c      	ldr	r2, [pc, #176]	; (800764c <xPortStartScheduler+0x12c>)
 800759a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800759c:	78fb      	ldrb	r3, [r7, #3]
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ae:	2b80      	cmp	r3, #128	; 0x80
 80075b0:	d0ef      	beq.n	8007592 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075b2:	4b26      	ldr	r3, [pc, #152]	; (800764c <xPortStartScheduler+0x12c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f1c3 0307 	rsb	r3, r3, #7
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	d009      	beq.n	80075d2 <xPortStartScheduler+0xb2>
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	60bb      	str	r3, [r7, #8]
 80075d0:	e7fe      	b.n	80075d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075d2:	4b1e      	ldr	r3, [pc, #120]	; (800764c <xPortStartScheduler+0x12c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	4a1c      	ldr	r2, [pc, #112]	; (800764c <xPortStartScheduler+0x12c>)
 80075da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075dc:	4b1b      	ldr	r3, [pc, #108]	; (800764c <xPortStartScheduler+0x12c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075e4:	4a19      	ldr	r2, [pc, #100]	; (800764c <xPortStartScheduler+0x12c>)
 80075e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075f0:	4b17      	ldr	r3, [pc, #92]	; (8007650 <xPortStartScheduler+0x130>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a16      	ldr	r2, [pc, #88]	; (8007650 <xPortStartScheduler+0x130>)
 80075f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075fc:	4b14      	ldr	r3, [pc, #80]	; (8007650 <xPortStartScheduler+0x130>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a13      	ldr	r2, [pc, #76]	; (8007650 <xPortStartScheduler+0x130>)
 8007602:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007606:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007608:	f000 f8d6 	bl	80077b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800760c:	4b11      	ldr	r3, [pc, #68]	; (8007654 <xPortStartScheduler+0x134>)
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007612:	f000 f8f5 	bl	8007800 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007616:	4b10      	ldr	r3, [pc, #64]	; (8007658 <xPortStartScheduler+0x138>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a0f      	ldr	r2, [pc, #60]	; (8007658 <xPortStartScheduler+0x138>)
 800761c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007620:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007622:	f7ff ff69 	bl	80074f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007626:	f7ff fd57 	bl	80070d8 <vTaskSwitchContext>
	prvTaskExitError();
 800762a:	f7ff ff21 	bl	8007470 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	e000ed00 	.word	0xe000ed00
 800763c:	410fc271 	.word	0x410fc271
 8007640:	410fc270 	.word	0x410fc270
 8007644:	e000e400 	.word	0xe000e400
 8007648:	200003b4 	.word	0x200003b4
 800764c:	200003b8 	.word	0x200003b8
 8007650:	e000ed20 	.word	0xe000ed20
 8007654:	2000000c 	.word	0x2000000c
 8007658:	e000ef34 	.word	0xe000ef34

0800765c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007674:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <vPortEnterCritical+0x54>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3301      	adds	r3, #1
 800767a:	4a0d      	ldr	r2, [pc, #52]	; (80076b0 <vPortEnterCritical+0x54>)
 800767c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800767e:	4b0c      	ldr	r3, [pc, #48]	; (80076b0 <vPortEnterCritical+0x54>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d10e      	bne.n	80076a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007686:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <vPortEnterCritical+0x58>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d009      	beq.n	80076a4 <vPortEnterCritical+0x48>
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	603b      	str	r3, [r7, #0]
 80076a2:	e7fe      	b.n	80076a2 <vPortEnterCritical+0x46>
	}
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	2000000c 	.word	0x2000000c
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076be:	4b11      	ldr	r3, [pc, #68]	; (8007704 <vPortExitCritical+0x4c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d109      	bne.n	80076da <vPortExitCritical+0x22>
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	607b      	str	r3, [r7, #4]
 80076d8:	e7fe      	b.n	80076d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80076da:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <vPortExitCritical+0x4c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3b01      	subs	r3, #1
 80076e0:	4a08      	ldr	r2, [pc, #32]	; (8007704 <vPortExitCritical+0x4c>)
 80076e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076e4:	4b07      	ldr	r3, [pc, #28]	; (8007704 <vPortExitCritical+0x4c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d104      	bne.n	80076f6 <vPortExitCritical+0x3e>
 80076ec:	2300      	movs	r3, #0
 80076ee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	2000000c 	.word	0x2000000c
	...

08007710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007710:	f3ef 8009 	mrs	r0, PSP
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	4b15      	ldr	r3, [pc, #84]	; (8007770 <pxCurrentTCBConst>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	f01e 0f10 	tst.w	lr, #16
 8007720:	bf08      	it	eq
 8007722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772a:	6010      	str	r0, [r2, #0]
 800772c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007734:	f380 8811 	msr	BASEPRI, r0
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f7ff fcca 	bl	80070d8 <vTaskSwitchContext>
 8007744:	f04f 0000 	mov.w	r0, #0
 8007748:	f380 8811 	msr	BASEPRI, r0
 800774c:	bc09      	pop	{r0, r3}
 800774e:	6819      	ldr	r1, [r3, #0]
 8007750:	6808      	ldr	r0, [r1, #0]
 8007752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007756:	f01e 0f10 	tst.w	lr, #16
 800775a:	bf08      	it	eq
 800775c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007760:	f380 8809 	msr	PSP, r0
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	f3af 8000 	nop.w

08007770 <pxCurrentTCBConst>:
 8007770:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop

08007778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007790:	f7ff fbe6 	bl	8006f60 <xTaskIncrementTick>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800779a:	4b06      	ldr	r3, [pc, #24]	; (80077b4 <SysTick_Handler+0x3c>)
 800779c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	2300      	movs	r3, #0
 80077a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80077ac:	bf00      	nop
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	e000ed04 	.word	0xe000ed04

080077b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077bc:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <vPortSetupTimerInterrupt+0x34>)
 80077be:	2200      	movs	r2, #0
 80077c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077c2:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <vPortSetupTimerInterrupt+0x38>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077c8:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <vPortSetupTimerInterrupt+0x3c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a0a      	ldr	r2, [pc, #40]	; (80077f8 <vPortSetupTimerInterrupt+0x40>)
 80077ce:	fba2 2303 	umull	r2, r3, r2, r3
 80077d2:	099b      	lsrs	r3, r3, #6
 80077d4:	4a09      	ldr	r2, [pc, #36]	; (80077fc <vPortSetupTimerInterrupt+0x44>)
 80077d6:	3b01      	subs	r3, #1
 80077d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077da:	4b04      	ldr	r3, [pc, #16]	; (80077ec <vPortSetupTimerInterrupt+0x34>)
 80077dc:	2207      	movs	r2, #7
 80077de:	601a      	str	r2, [r3, #0]
}
 80077e0:	bf00      	nop
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	e000e010 	.word	0xe000e010
 80077f0:	e000e018 	.word	0xe000e018
 80077f4:	20000000 	.word	0x20000000
 80077f8:	10624dd3 	.word	0x10624dd3
 80077fc:	e000e014 	.word	0xe000e014

08007800 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007800:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007810 <vPortEnableVFP+0x10>
 8007804:	6801      	ldr	r1, [r0, #0]
 8007806:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800780a:	6001      	str	r1, [r0, #0]
 800780c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800780e:	bf00      	nop
 8007810:	e000ed88 	.word	0xe000ed88

08007814 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08a      	sub	sp, #40	; 0x28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800781c:	2300      	movs	r3, #0
 800781e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007820:	f7ff faf4 	bl	8006e0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007824:	4b57      	ldr	r3, [pc, #348]	; (8007984 <pvPortMalloc+0x170>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800782c:	f000 f90c 	bl	8007a48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007830:	4b55      	ldr	r3, [pc, #340]	; (8007988 <pvPortMalloc+0x174>)
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4013      	ands	r3, r2
 8007838:	2b00      	cmp	r3, #0
 800783a:	f040 808c 	bne.w	8007956 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01c      	beq.n	800787e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007844:	2208      	movs	r2, #8
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4413      	add	r3, r2
 800784a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	2b00      	cmp	r3, #0
 8007854:	d013      	beq.n	800787e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f023 0307 	bic.w	r3, r3, #7
 800785c:	3308      	adds	r3, #8
 800785e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	2b00      	cmp	r3, #0
 8007868:	d009      	beq.n	800787e <pvPortMalloc+0x6a>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	e7fe      	b.n	800787c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d068      	beq.n	8007956 <pvPortMalloc+0x142>
 8007884:	4b41      	ldr	r3, [pc, #260]	; (800798c <pvPortMalloc+0x178>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	429a      	cmp	r2, r3
 800788c:	d863      	bhi.n	8007956 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800788e:	4b40      	ldr	r3, [pc, #256]	; (8007990 <pvPortMalloc+0x17c>)
 8007890:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007892:	4b3f      	ldr	r3, [pc, #252]	; (8007990 <pvPortMalloc+0x17c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007898:	e004      	b.n	80078a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d903      	bls.n	80078b6 <pvPortMalloc+0xa2>
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1f1      	bne.n	800789a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078b6:	4b33      	ldr	r3, [pc, #204]	; (8007984 <pvPortMalloc+0x170>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078bc:	429a      	cmp	r2, r3
 80078be:	d04a      	beq.n	8007956 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2208      	movs	r2, #8
 80078c6:	4413      	add	r3, r2
 80078c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	1ad2      	subs	r2, r2, r3
 80078da:	2308      	movs	r3, #8
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	429a      	cmp	r2, r3
 80078e0:	d91e      	bls.n	8007920 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4413      	add	r3, r2
 80078e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d009      	beq.n	8007908 <pvPortMalloc+0xf4>
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	613b      	str	r3, [r7, #16]
 8007906:	e7fe      	b.n	8007906 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	1ad2      	subs	r2, r2, r3
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800791a:	69b8      	ldr	r0, [r7, #24]
 800791c:	f000 f8f6 	bl	8007b0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007920:	4b1a      	ldr	r3, [pc, #104]	; (800798c <pvPortMalloc+0x178>)
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	4a18      	ldr	r2, [pc, #96]	; (800798c <pvPortMalloc+0x178>)
 800792c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800792e:	4b17      	ldr	r3, [pc, #92]	; (800798c <pvPortMalloc+0x178>)
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	4b18      	ldr	r3, [pc, #96]	; (8007994 <pvPortMalloc+0x180>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	429a      	cmp	r2, r3
 8007938:	d203      	bcs.n	8007942 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800793a:	4b14      	ldr	r3, [pc, #80]	; (800798c <pvPortMalloc+0x178>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a15      	ldr	r2, [pc, #84]	; (8007994 <pvPortMalloc+0x180>)
 8007940:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	4b10      	ldr	r3, [pc, #64]	; (8007988 <pvPortMalloc+0x174>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	431a      	orrs	r2, r3
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007956:	f7ff fa67 	bl	8006e28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	f003 0307 	and.w	r3, r3, #7
 8007960:	2b00      	cmp	r3, #0
 8007962:	d009      	beq.n	8007978 <pvPortMalloc+0x164>
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	60fb      	str	r3, [r7, #12]
 8007976:	e7fe      	b.n	8007976 <pvPortMalloc+0x162>
	return pvReturn;
 8007978:	69fb      	ldr	r3, [r7, #28]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3728      	adds	r7, #40	; 0x28
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	200023cc 	.word	0x200023cc
 8007988:	200023d8 	.word	0x200023d8
 800798c:	200023d0 	.word	0x200023d0
 8007990:	200023c4 	.word	0x200023c4
 8007994:	200023d4 	.word	0x200023d4

08007998 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d046      	beq.n	8007a38 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079aa:	2308      	movs	r3, #8
 80079ac:	425b      	negs	r3, r3
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4413      	add	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	4b20      	ldr	r3, [pc, #128]	; (8007a40 <vPortFree+0xa8>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4013      	ands	r3, r2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d109      	bne.n	80079da <vPortFree+0x42>
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	e7fe      	b.n	80079d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <vPortFree+0x5e>
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	60bb      	str	r3, [r7, #8]
 80079f4:	e7fe      	b.n	80079f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	4b11      	ldr	r3, [pc, #68]	; (8007a40 <vPortFree+0xa8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4013      	ands	r3, r2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d019      	beq.n	8007a38 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d115      	bne.n	8007a38 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <vPortFree+0xa8>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	43db      	mvns	r3, r3
 8007a16:	401a      	ands	r2, r3
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a1c:	f7ff f9f6 	bl	8006e0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	4b07      	ldr	r3, [pc, #28]	; (8007a44 <vPortFree+0xac>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4413      	add	r3, r2
 8007a2a:	4a06      	ldr	r2, [pc, #24]	; (8007a44 <vPortFree+0xac>)
 8007a2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a2e:	6938      	ldr	r0, [r7, #16]
 8007a30:	f000 f86c 	bl	8007b0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a34:	f7ff f9f8 	bl	8006e28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a38:	bf00      	nop
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	200023d8 	.word	0x200023d8
 8007a44:	200023d0 	.word	0x200023d0

08007a48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a4e:	f242 0308 	movw	r3, #8200	; 0x2008
 8007a52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a54:	4b27      	ldr	r3, [pc, #156]	; (8007af4 <prvHeapInit+0xac>)
 8007a56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00c      	beq.n	8007a7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3307      	adds	r3, #7
 8007a66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 0307 	bic.w	r3, r3, #7
 8007a6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	4a1f      	ldr	r2, [pc, #124]	; (8007af4 <prvHeapInit+0xac>)
 8007a78:	4413      	add	r3, r2
 8007a7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a80:	4a1d      	ldr	r2, [pc, #116]	; (8007af8 <prvHeapInit+0xb0>)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a86:	4b1c      	ldr	r3, [pc, #112]	; (8007af8 <prvHeapInit+0xb0>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	4413      	add	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a94:	2208      	movs	r2, #8
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	1a9b      	subs	r3, r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 0307 	bic.w	r3, r3, #7
 8007aa2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4a15      	ldr	r2, [pc, #84]	; (8007afc <prvHeapInit+0xb4>)
 8007aa8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007aaa:	4b14      	ldr	r3, [pc, #80]	; (8007afc <prvHeapInit+0xb4>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ab2:	4b12      	ldr	r3, [pc, #72]	; (8007afc <prvHeapInit+0xb4>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	1ad2      	subs	r2, r2, r3
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ac8:	4b0c      	ldr	r3, [pc, #48]	; (8007afc <prvHeapInit+0xb4>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	4a0a      	ldr	r2, [pc, #40]	; (8007b00 <prvHeapInit+0xb8>)
 8007ad6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	4a09      	ldr	r2, [pc, #36]	; (8007b04 <prvHeapInit+0xbc>)
 8007ade:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ae0:	4b09      	ldr	r3, [pc, #36]	; (8007b08 <prvHeapInit+0xc0>)
 8007ae2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ae6:	601a      	str	r2, [r3, #0]
}
 8007ae8:	bf00      	nop
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	200003bc 	.word	0x200003bc
 8007af8:	200023c4 	.word	0x200023c4
 8007afc:	200023cc 	.word	0x200023cc
 8007b00:	200023d4 	.word	0x200023d4
 8007b04:	200023d0 	.word	0x200023d0
 8007b08:	200023d8 	.word	0x200023d8

08007b0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b14:	4b28      	ldr	r3, [pc, #160]	; (8007bb8 <prvInsertBlockIntoFreeList+0xac>)
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	e002      	b.n	8007b20 <prvInsertBlockIntoFreeList+0x14>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d8f7      	bhi.n	8007b1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	4413      	add	r3, r2
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d108      	bne.n	8007b4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	441a      	add	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	441a      	add	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d118      	bne.n	8007b94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	4b15      	ldr	r3, [pc, #84]	; (8007bbc <prvInsertBlockIntoFreeList+0xb0>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d00d      	beq.n	8007b8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	441a      	add	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	e008      	b.n	8007b9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b8a:	4b0c      	ldr	r3, [pc, #48]	; (8007bbc <prvInsertBlockIntoFreeList+0xb0>)
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	e003      	b.n	8007b9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d002      	beq.n	8007baa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007baa:	bf00      	nop
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	200023c4 	.word	0x200023c4
 8007bbc:	200023cc 	.word	0x200023cc

08007bc0 <__libc_init_array>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	4e0d      	ldr	r6, [pc, #52]	; (8007bf8 <__libc_init_array+0x38>)
 8007bc4:	4c0d      	ldr	r4, [pc, #52]	; (8007bfc <__libc_init_array+0x3c>)
 8007bc6:	1ba4      	subs	r4, r4, r6
 8007bc8:	10a4      	asrs	r4, r4, #2
 8007bca:	2500      	movs	r5, #0
 8007bcc:	42a5      	cmp	r5, r4
 8007bce:	d109      	bne.n	8007be4 <__libc_init_array+0x24>
 8007bd0:	4e0b      	ldr	r6, [pc, #44]	; (8007c00 <__libc_init_array+0x40>)
 8007bd2:	4c0c      	ldr	r4, [pc, #48]	; (8007c04 <__libc_init_array+0x44>)
 8007bd4:	f000 fd6c 	bl	80086b0 <_init>
 8007bd8:	1ba4      	subs	r4, r4, r6
 8007bda:	10a4      	asrs	r4, r4, #2
 8007bdc:	2500      	movs	r5, #0
 8007bde:	42a5      	cmp	r5, r4
 8007be0:	d105      	bne.n	8007bee <__libc_init_array+0x2e>
 8007be2:	bd70      	pop	{r4, r5, r6, pc}
 8007be4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007be8:	4798      	blx	r3
 8007bea:	3501      	adds	r5, #1
 8007bec:	e7ee      	b.n	8007bcc <__libc_init_array+0xc>
 8007bee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bf2:	4798      	blx	r3
 8007bf4:	3501      	adds	r5, #1
 8007bf6:	e7f2      	b.n	8007bde <__libc_init_array+0x1e>
 8007bf8:	08008b84 	.word	0x08008b84
 8007bfc:	08008b84 	.word	0x08008b84
 8007c00:	08008b84 	.word	0x08008b84
 8007c04:	08008b88 	.word	0x08008b88

08007c08 <memset>:
 8007c08:	4402      	add	r2, r0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d100      	bne.n	8007c12 <memset+0xa>
 8007c10:	4770      	bx	lr
 8007c12:	f803 1b01 	strb.w	r1, [r3], #1
 8007c16:	e7f9      	b.n	8007c0c <memset+0x4>

08007c18 <sinf>:
 8007c18:	ee10 3a10 	vmov	r3, s0
 8007c1c:	b507      	push	{r0, r1, r2, lr}
 8007c1e:	4a1d      	ldr	r2, [pc, #116]	; (8007c94 <sinf+0x7c>)
 8007c20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c24:	4293      	cmp	r3, r2
 8007c26:	dc05      	bgt.n	8007c34 <sinf+0x1c>
 8007c28:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007c98 <sinf+0x80>
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	f000 fc41 	bl	80084b4 <__kernel_sinf>
 8007c32:	e004      	b.n	8007c3e <sinf+0x26>
 8007c34:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007c38:	db04      	blt.n	8007c44 <sinf+0x2c>
 8007c3a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007c3e:	b003      	add	sp, #12
 8007c40:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c44:	4668      	mov	r0, sp
 8007c46:	f000 f829 	bl	8007c9c <__ieee754_rem_pio2f>
 8007c4a:	f000 0003 	and.w	r0, r0, #3
 8007c4e:	2801      	cmp	r0, #1
 8007c50:	d008      	beq.n	8007c64 <sinf+0x4c>
 8007c52:	2802      	cmp	r0, #2
 8007c54:	d00d      	beq.n	8007c72 <sinf+0x5a>
 8007c56:	b9b0      	cbnz	r0, 8007c86 <sinf+0x6e>
 8007c58:	2001      	movs	r0, #1
 8007c5a:	eddd 0a01 	vldr	s1, [sp, #4]
 8007c5e:	ed9d 0a00 	vldr	s0, [sp]
 8007c62:	e7e4      	b.n	8007c2e <sinf+0x16>
 8007c64:	eddd 0a01 	vldr	s1, [sp, #4]
 8007c68:	ed9d 0a00 	vldr	s0, [sp]
 8007c6c:	f000 f942 	bl	8007ef4 <__kernel_cosf>
 8007c70:	e7e5      	b.n	8007c3e <sinf+0x26>
 8007c72:	2001      	movs	r0, #1
 8007c74:	eddd 0a01 	vldr	s1, [sp, #4]
 8007c78:	ed9d 0a00 	vldr	s0, [sp]
 8007c7c:	f000 fc1a 	bl	80084b4 <__kernel_sinf>
 8007c80:	eeb1 0a40 	vneg.f32	s0, s0
 8007c84:	e7db      	b.n	8007c3e <sinf+0x26>
 8007c86:	eddd 0a01 	vldr	s1, [sp, #4]
 8007c8a:	ed9d 0a00 	vldr	s0, [sp]
 8007c8e:	f000 f931 	bl	8007ef4 <__kernel_cosf>
 8007c92:	e7f5      	b.n	8007c80 <sinf+0x68>
 8007c94:	3f490fd8 	.word	0x3f490fd8
 8007c98:	00000000 	.word	0x00000000

08007c9c <__ieee754_rem_pio2f>:
 8007c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c9e:	ee10 6a10 	vmov	r6, s0
 8007ca2:	4b86      	ldr	r3, [pc, #536]	; (8007ebc <__ieee754_rem_pio2f+0x220>)
 8007ca4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8007ca8:	429c      	cmp	r4, r3
 8007caa:	b087      	sub	sp, #28
 8007cac:	4605      	mov	r5, r0
 8007cae:	dc05      	bgt.n	8007cbc <__ieee754_rem_pio2f+0x20>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	ed85 0a00 	vstr	s0, [r5]
 8007cb6:	6043      	str	r3, [r0, #4]
 8007cb8:	2000      	movs	r0, #0
 8007cba:	e020      	b.n	8007cfe <__ieee754_rem_pio2f+0x62>
 8007cbc:	4b80      	ldr	r3, [pc, #512]	; (8007ec0 <__ieee754_rem_pio2f+0x224>)
 8007cbe:	429c      	cmp	r4, r3
 8007cc0:	dc38      	bgt.n	8007d34 <__ieee754_rem_pio2f+0x98>
 8007cc2:	2e00      	cmp	r6, #0
 8007cc4:	f024 040f 	bic.w	r4, r4, #15
 8007cc8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8007ec4 <__ieee754_rem_pio2f+0x228>
 8007ccc:	4b7e      	ldr	r3, [pc, #504]	; (8007ec8 <__ieee754_rem_pio2f+0x22c>)
 8007cce:	dd18      	ble.n	8007d02 <__ieee754_rem_pio2f+0x66>
 8007cd0:	429c      	cmp	r4, r3
 8007cd2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007cd6:	bf09      	itett	eq
 8007cd8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8007ecc <__ieee754_rem_pio2f+0x230>
 8007cdc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8007ed0 <__ieee754_rem_pio2f+0x234>
 8007ce0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007ce4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8007ed4 <__ieee754_rem_pio2f+0x238>
 8007ce8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007cec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007cf0:	edc0 6a00 	vstr	s13, [r0]
 8007cf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007cf8:	edc0 7a01 	vstr	s15, [r0, #4]
 8007cfc:	2001      	movs	r0, #1
 8007cfe:	b007      	add	sp, #28
 8007d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d02:	429c      	cmp	r4, r3
 8007d04:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007d08:	bf09      	itett	eq
 8007d0a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8007ecc <__ieee754_rem_pio2f+0x230>
 8007d0e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8007ed0 <__ieee754_rem_pio2f+0x234>
 8007d12:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007d16:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8007ed4 <__ieee754_rem_pio2f+0x238>
 8007d1a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007d1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007d22:	edc0 6a00 	vstr	s13, [r0]
 8007d26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d2a:	edc0 7a01 	vstr	s15, [r0, #4]
 8007d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d32:	e7e4      	b.n	8007cfe <__ieee754_rem_pio2f+0x62>
 8007d34:	4b68      	ldr	r3, [pc, #416]	; (8007ed8 <__ieee754_rem_pio2f+0x23c>)
 8007d36:	429c      	cmp	r4, r3
 8007d38:	dc71      	bgt.n	8007e1e <__ieee754_rem_pio2f+0x182>
 8007d3a:	f000 fc03 	bl	8008544 <fabsf>
 8007d3e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007edc <__ieee754_rem_pio2f+0x240>
 8007d42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007d46:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d4e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007d52:	ee17 0a90 	vmov	r0, s15
 8007d56:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007ec4 <__ieee754_rem_pio2f+0x228>
 8007d5a:	eeb1 7a46 	vneg.f32	s14, s12
 8007d5e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8007d62:	281f      	cmp	r0, #31
 8007d64:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007ed0 <__ieee754_rem_pio2f+0x234>
 8007d68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007d6c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007d70:	ee16 3a90 	vmov	r3, s13
 8007d74:	dc1c      	bgt.n	8007db0 <__ieee754_rem_pio2f+0x114>
 8007d76:	1e47      	subs	r7, r0, #1
 8007d78:	4959      	ldr	r1, [pc, #356]	; (8007ee0 <__ieee754_rem_pio2f+0x244>)
 8007d7a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007d7e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8007d82:	428a      	cmp	r2, r1
 8007d84:	d014      	beq.n	8007db0 <__ieee754_rem_pio2f+0x114>
 8007d86:	602b      	str	r3, [r5, #0]
 8007d88:	ed95 7a00 	vldr	s14, [r5]
 8007d8c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007d90:	2e00      	cmp	r6, #0
 8007d92:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007d96:	ed85 0a01 	vstr	s0, [r5, #4]
 8007d9a:	dab0      	bge.n	8007cfe <__ieee754_rem_pio2f+0x62>
 8007d9c:	eeb1 7a47 	vneg.f32	s14, s14
 8007da0:	eeb1 0a40 	vneg.f32	s0, s0
 8007da4:	ed85 7a00 	vstr	s14, [r5]
 8007da8:	ed85 0a01 	vstr	s0, [r5, #4]
 8007dac:	4240      	negs	r0, r0
 8007dae:	e7a6      	b.n	8007cfe <__ieee754_rem_pio2f+0x62>
 8007db0:	15e4      	asrs	r4, r4, #23
 8007db2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007db6:	1aa2      	subs	r2, r4, r2
 8007db8:	2a08      	cmp	r2, #8
 8007dba:	dde4      	ble.n	8007d86 <__ieee754_rem_pio2f+0xea>
 8007dbc:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007ecc <__ieee754_rem_pio2f+0x230>
 8007dc0:	eef0 6a40 	vmov.f32	s13, s0
 8007dc4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007dc8:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007dcc:	eea7 0a27 	vfma.f32	s0, s14, s15
 8007dd0:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007ed4 <__ieee754_rem_pio2f+0x238>
 8007dd4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8007dd8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007ddc:	eef0 7a40 	vmov.f32	s15, s0
 8007de0:	ee15 3a90 	vmov	r3, s11
 8007de4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007de8:	1aa4      	subs	r4, r4, r2
 8007dea:	2c19      	cmp	r4, #25
 8007dec:	dc04      	bgt.n	8007df8 <__ieee754_rem_pio2f+0x15c>
 8007dee:	edc5 5a00 	vstr	s11, [r5]
 8007df2:	eeb0 0a66 	vmov.f32	s0, s13
 8007df6:	e7c7      	b.n	8007d88 <__ieee754_rem_pio2f+0xec>
 8007df8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007ee4 <__ieee754_rem_pio2f+0x248>
 8007dfc:	eeb0 0a66 	vmov.f32	s0, s13
 8007e00:	eea7 0a25 	vfma.f32	s0, s14, s11
 8007e04:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007e08:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007e0c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007ee8 <__ieee754_rem_pio2f+0x24c>
 8007e10:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8007e14:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007e18:	ed85 7a00 	vstr	s14, [r5]
 8007e1c:	e7b4      	b.n	8007d88 <__ieee754_rem_pio2f+0xec>
 8007e1e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007e22:	db06      	blt.n	8007e32 <__ieee754_rem_pio2f+0x196>
 8007e24:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007e28:	edc0 7a01 	vstr	s15, [r0, #4]
 8007e2c:	edc0 7a00 	vstr	s15, [r0]
 8007e30:	e742      	b.n	8007cb8 <__ieee754_rem_pio2f+0x1c>
 8007e32:	15e2      	asrs	r2, r4, #23
 8007e34:	3a86      	subs	r2, #134	; 0x86
 8007e36:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8007e3a:	ee07 3a90 	vmov	s15, r3
 8007e3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007e42:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8007eec <__ieee754_rem_pio2f+0x250>
 8007e46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007e4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e4e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007e52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007e56:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007e5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007e5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e62:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007e66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007e6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e72:	edcd 7a05 	vstr	s15, [sp, #20]
 8007e76:	d11e      	bne.n	8007eb6 <__ieee754_rem_pio2f+0x21a>
 8007e78:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e80:	bf0c      	ite	eq
 8007e82:	2301      	moveq	r3, #1
 8007e84:	2302      	movne	r3, #2
 8007e86:	491a      	ldr	r1, [pc, #104]	; (8007ef0 <__ieee754_rem_pio2f+0x254>)
 8007e88:	9101      	str	r1, [sp, #4]
 8007e8a:	2102      	movs	r1, #2
 8007e8c:	9100      	str	r1, [sp, #0]
 8007e8e:	a803      	add	r0, sp, #12
 8007e90:	4629      	mov	r1, r5
 8007e92:	f000 f88d 	bl	8007fb0 <__kernel_rem_pio2f>
 8007e96:	2e00      	cmp	r6, #0
 8007e98:	f6bf af31 	bge.w	8007cfe <__ieee754_rem_pio2f+0x62>
 8007e9c:	edd5 7a00 	vldr	s15, [r5]
 8007ea0:	eef1 7a67 	vneg.f32	s15, s15
 8007ea4:	edc5 7a00 	vstr	s15, [r5]
 8007ea8:	edd5 7a01 	vldr	s15, [r5, #4]
 8007eac:	eef1 7a67 	vneg.f32	s15, s15
 8007eb0:	edc5 7a01 	vstr	s15, [r5, #4]
 8007eb4:	e77a      	b.n	8007dac <__ieee754_rem_pio2f+0x110>
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e7e5      	b.n	8007e86 <__ieee754_rem_pio2f+0x1ea>
 8007eba:	bf00      	nop
 8007ebc:	3f490fd8 	.word	0x3f490fd8
 8007ec0:	4016cbe3 	.word	0x4016cbe3
 8007ec4:	3fc90f80 	.word	0x3fc90f80
 8007ec8:	3fc90fd0 	.word	0x3fc90fd0
 8007ecc:	37354400 	.word	0x37354400
 8007ed0:	37354443 	.word	0x37354443
 8007ed4:	2e85a308 	.word	0x2e85a308
 8007ed8:	43490f80 	.word	0x43490f80
 8007edc:	3f22f984 	.word	0x3f22f984
 8007ee0:	080087b4 	.word	0x080087b4
 8007ee4:	2e85a300 	.word	0x2e85a300
 8007ee8:	248d3132 	.word	0x248d3132
 8007eec:	43800000 	.word	0x43800000
 8007ef0:	08008834 	.word	0x08008834

08007ef4 <__kernel_cosf>:
 8007ef4:	ee10 3a10 	vmov	r3, s0
 8007ef8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007efc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007f00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f04:	da05      	bge.n	8007f12 <__kernel_cosf+0x1e>
 8007f06:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007f0a:	ee17 2a90 	vmov	r2, s15
 8007f0e:	2a00      	cmp	r2, #0
 8007f10:	d03b      	beq.n	8007f8a <__kernel_cosf+0x96>
 8007f12:	ee20 6a00 	vmul.f32	s12, s0, s0
 8007f16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007f1a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007f90 <__kernel_cosf+0x9c>
 8007f1e:	4a1d      	ldr	r2, [pc, #116]	; (8007f94 <__kernel_cosf+0xa0>)
 8007f20:	ee66 7a07 	vmul.f32	s15, s12, s14
 8007f24:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8007f98 <__kernel_cosf+0xa4>
 8007f28:	eea6 7a25 	vfma.f32	s14, s12, s11
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8007f9c <__kernel_cosf+0xa8>
 8007f32:	eee7 5a06 	vfma.f32	s11, s14, s12
 8007f36:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007fa0 <__kernel_cosf+0xac>
 8007f3a:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007f3e:	eddf 5a19 	vldr	s11, [pc, #100]	; 8007fa4 <__kernel_cosf+0xb0>
 8007f42:	eee7 5a06 	vfma.f32	s11, s14, s12
 8007f46:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007fa8 <__kernel_cosf+0xb4>
 8007f4a:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007f4e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8007f52:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007f56:	eee6 0a07 	vfma.f32	s1, s12, s14
 8007f5a:	dc04      	bgt.n	8007f66 <__kernel_cosf+0x72>
 8007f5c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8007f60:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8007f64:	4770      	bx	lr
 8007f66:	4a11      	ldr	r2, [pc, #68]	; (8007fac <__kernel_cosf+0xb8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	bfda      	itte	le
 8007f6c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007f70:	ee07 3a10 	vmovle	s14, r3
 8007f74:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8007f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f7c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8007f80:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007f84:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007f88:	4770      	bx	lr
 8007f8a:	eeb0 0a66 	vmov.f32	s0, s13
 8007f8e:	4770      	bx	lr
 8007f90:	ad47d74e 	.word	0xad47d74e
 8007f94:	3e999999 	.word	0x3e999999
 8007f98:	310f74f6 	.word	0x310f74f6
 8007f9c:	b493f27c 	.word	0xb493f27c
 8007fa0:	37d00d01 	.word	0x37d00d01
 8007fa4:	bab60b61 	.word	0xbab60b61
 8007fa8:	3d2aaaab 	.word	0x3d2aaaab
 8007fac:	3f480000 	.word	0x3f480000

08007fb0 <__kernel_rem_pio2f>:
 8007fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb4:	ed2d 8b04 	vpush	{d8-d9}
 8007fb8:	b0d7      	sub	sp, #348	; 0x15c
 8007fba:	469b      	mov	fp, r3
 8007fbc:	460e      	mov	r6, r1
 8007fbe:	4bbe      	ldr	r3, [pc, #760]	; (80082b8 <__kernel_rem_pio2f+0x308>)
 8007fc0:	9964      	ldr	r1, [sp, #400]	; 0x190
 8007fc2:	9002      	str	r0, [sp, #8]
 8007fc4:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8007fc8:	9865      	ldr	r0, [sp, #404]	; 0x194
 8007fca:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80082c8 <__kernel_rem_pio2f+0x318>
 8007fce:	1ed1      	subs	r1, r2, #3
 8007fd0:	2308      	movs	r3, #8
 8007fd2:	fb91 f1f3 	sdiv	r1, r1, r3
 8007fd6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007fda:	f10b 3aff 	add.w	sl, fp, #4294967295
 8007fde:	1c4c      	adds	r4, r1, #1
 8007fe0:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8007fe4:	eba1 050a 	sub.w	r5, r1, sl
 8007fe8:	aa1a      	add	r2, sp, #104	; 0x68
 8007fea:	eb09 070a 	add.w	r7, r9, sl
 8007fee:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8007ff2:	4696      	mov	lr, r2
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	42bb      	cmp	r3, r7
 8007ff8:	dd0f      	ble.n	800801a <__kernel_rem_pio2f+0x6a>
 8007ffa:	af42      	add	r7, sp, #264	; 0x108
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	454a      	cmp	r2, r9
 8008000:	dc27      	bgt.n	8008052 <__kernel_rem_pio2f+0xa2>
 8008002:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8008006:	eb0b 0302 	add.w	r3, fp, r2
 800800a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800800e:	9d02      	ldr	r5, [sp, #8]
 8008010:	eddf 7aad 	vldr	s15, [pc, #692]	; 80082c8 <__kernel_rem_pio2f+0x318>
 8008014:	f04f 0c00 	mov.w	ip, #0
 8008018:	e015      	b.n	8008046 <__kernel_rem_pio2f+0x96>
 800801a:	42dd      	cmn	r5, r3
 800801c:	bf5d      	ittte	pl
 800801e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8008022:	ee07 2a90 	vmovpl	s15, r2
 8008026:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800802a:	eef0 7a47 	vmovmi.f32	s15, s14
 800802e:	ecee 7a01 	vstmia	lr!, {s15}
 8008032:	3301      	adds	r3, #1
 8008034:	e7df      	b.n	8007ff6 <__kernel_rem_pio2f+0x46>
 8008036:	ecf5 6a01 	vldmia	r5!, {s13}
 800803a:	ed33 7a01 	vldmdb	r3!, {s14}
 800803e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008042:	f10c 0c01 	add.w	ip, ip, #1
 8008046:	45d4      	cmp	ip, sl
 8008048:	ddf5      	ble.n	8008036 <__kernel_rem_pio2f+0x86>
 800804a:	ece7 7a01 	vstmia	r7!, {s15}
 800804e:	3201      	adds	r2, #1
 8008050:	e7d5      	b.n	8007ffe <__kernel_rem_pio2f+0x4e>
 8008052:	ab06      	add	r3, sp, #24
 8008054:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008058:	9304      	str	r3, [sp, #16]
 800805a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80082c4 <__kernel_rem_pio2f+0x314>
 800805e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80082c0 <__kernel_rem_pio2f+0x310>
 8008062:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8008066:	9303      	str	r3, [sp, #12]
 8008068:	464d      	mov	r5, r9
 800806a:	ab56      	add	r3, sp, #344	; 0x158
 800806c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8008070:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008074:	3f01      	subs	r7, #1
 8008076:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800807a:	00bf      	lsls	r7, r7, #2
 800807c:	ab56      	add	r3, sp, #344	; 0x158
 800807e:	19da      	adds	r2, r3, r7
 8008080:	3a4c      	subs	r2, #76	; 0x4c
 8008082:	2300      	movs	r3, #0
 8008084:	1ae9      	subs	r1, r5, r3
 8008086:	2900      	cmp	r1, #0
 8008088:	dc4c      	bgt.n	8008124 <__kernel_rem_pio2f+0x174>
 800808a:	4620      	mov	r0, r4
 800808c:	f000 faa4 	bl	80085d8 <scalbnf>
 8008090:	eeb0 8a40 	vmov.f32	s16, s0
 8008094:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008098:	ee28 0a00 	vmul.f32	s0, s16, s0
 800809c:	f000 fa5a 	bl	8008554 <floorf>
 80080a0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80080a4:	eea0 8a67 	vfms.f32	s16, s0, s15
 80080a8:	2c00      	cmp	r4, #0
 80080aa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80080ae:	edcd 7a01 	vstr	s15, [sp, #4]
 80080b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080b6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80080ba:	dd48      	ble.n	800814e <__kernel_rem_pio2f+0x19e>
 80080bc:	1e69      	subs	r1, r5, #1
 80080be:	ab06      	add	r3, sp, #24
 80080c0:	f1c4 0008 	rsb	r0, r4, #8
 80080c4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80080c8:	9a01      	ldr	r2, [sp, #4]
 80080ca:	fa4c f300 	asr.w	r3, ip, r0
 80080ce:	441a      	add	r2, r3
 80080d0:	4083      	lsls	r3, r0
 80080d2:	9201      	str	r2, [sp, #4]
 80080d4:	ebac 0203 	sub.w	r2, ip, r3
 80080d8:	ab06      	add	r3, sp, #24
 80080da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80080de:	f1c4 0307 	rsb	r3, r4, #7
 80080e2:	fa42 f803 	asr.w	r8, r2, r3
 80080e6:	f1b8 0f00 	cmp.w	r8, #0
 80080ea:	dd41      	ble.n	8008170 <__kernel_rem_pio2f+0x1c0>
 80080ec:	9b01      	ldr	r3, [sp, #4]
 80080ee:	2000      	movs	r0, #0
 80080f0:	3301      	adds	r3, #1
 80080f2:	9301      	str	r3, [sp, #4]
 80080f4:	4601      	mov	r1, r0
 80080f6:	4285      	cmp	r5, r0
 80080f8:	dc6d      	bgt.n	80081d6 <__kernel_rem_pio2f+0x226>
 80080fa:	2c00      	cmp	r4, #0
 80080fc:	dd04      	ble.n	8008108 <__kernel_rem_pio2f+0x158>
 80080fe:	2c01      	cmp	r4, #1
 8008100:	d07e      	beq.n	8008200 <__kernel_rem_pio2f+0x250>
 8008102:	2c02      	cmp	r4, #2
 8008104:	f000 8086 	beq.w	8008214 <__kernel_rem_pio2f+0x264>
 8008108:	f1b8 0f02 	cmp.w	r8, #2
 800810c:	d130      	bne.n	8008170 <__kernel_rem_pio2f+0x1c0>
 800810e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008112:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008116:	b359      	cbz	r1, 8008170 <__kernel_rem_pio2f+0x1c0>
 8008118:	4620      	mov	r0, r4
 800811a:	f000 fa5d 	bl	80085d8 <scalbnf>
 800811e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008122:	e025      	b.n	8008170 <__kernel_rem_pio2f+0x1c0>
 8008124:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008128:	a806      	add	r0, sp, #24
 800812a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800812e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008132:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008136:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800813a:	ee10 1a10 	vmov	r1, s0
 800813e:	ed32 0a01 	vldmdb	r2!, {s0}
 8008142:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8008146:	ee37 0a80 	vadd.f32	s0, s15, s0
 800814a:	3301      	adds	r3, #1
 800814c:	e79a      	b.n	8008084 <__kernel_rem_pio2f+0xd4>
 800814e:	d106      	bne.n	800815e <__kernel_rem_pio2f+0x1ae>
 8008150:	1e6b      	subs	r3, r5, #1
 8008152:	aa06      	add	r2, sp, #24
 8008154:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008158:	ea4f 2822 	mov.w	r8, r2, asr #8
 800815c:	e7c3      	b.n	80080e6 <__kernel_rem_pio2f+0x136>
 800815e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008162:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800816a:	da31      	bge.n	80081d0 <__kernel_rem_pio2f+0x220>
 800816c:	f04f 0800 	mov.w	r8, #0
 8008170:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008178:	f040 80a8 	bne.w	80082cc <__kernel_rem_pio2f+0x31c>
 800817c:	1e6b      	subs	r3, r5, #1
 800817e:	4618      	mov	r0, r3
 8008180:	2200      	movs	r2, #0
 8008182:	4548      	cmp	r0, r9
 8008184:	da4d      	bge.n	8008222 <__kernel_rem_pio2f+0x272>
 8008186:	2a00      	cmp	r2, #0
 8008188:	f000 8087 	beq.w	800829a <__kernel_rem_pio2f+0x2ea>
 800818c:	aa06      	add	r2, sp, #24
 800818e:	3c08      	subs	r4, #8
 8008190:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008194:	2900      	cmp	r1, #0
 8008196:	f000 808d 	beq.w	80082b4 <__kernel_rem_pio2f+0x304>
 800819a:	4620      	mov	r0, r4
 800819c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80081a0:	9302      	str	r3, [sp, #8]
 80081a2:	f000 fa19 	bl	80085d8 <scalbnf>
 80081a6:	9b02      	ldr	r3, [sp, #8]
 80081a8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80082c4 <__kernel_rem_pio2f+0x314>
 80081ac:	0099      	lsls	r1, r3, #2
 80081ae:	aa42      	add	r2, sp, #264	; 0x108
 80081b0:	1850      	adds	r0, r2, r1
 80081b2:	1d05      	adds	r5, r0, #4
 80081b4:	461c      	mov	r4, r3
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	f280 80b8 	bge.w	800832c <__kernel_rem_pio2f+0x37c>
 80081bc:	2500      	movs	r5, #0
 80081be:	1b5c      	subs	r4, r3, r5
 80081c0:	2c00      	cmp	r4, #0
 80081c2:	f2c0 80d8 	blt.w	8008376 <__kernel_rem_pio2f+0x3c6>
 80081c6:	4f3d      	ldr	r7, [pc, #244]	; (80082bc <__kernel_rem_pio2f+0x30c>)
 80081c8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80082c8 <__kernel_rem_pio2f+0x318>
 80081cc:	2400      	movs	r4, #0
 80081ce:	e0c6      	b.n	800835e <__kernel_rem_pio2f+0x3ae>
 80081d0:	f04f 0802 	mov.w	r8, #2
 80081d4:	e78a      	b.n	80080ec <__kernel_rem_pio2f+0x13c>
 80081d6:	ab06      	add	r3, sp, #24
 80081d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80081dc:	b949      	cbnz	r1, 80081f2 <__kernel_rem_pio2f+0x242>
 80081de:	b12b      	cbz	r3, 80081ec <__kernel_rem_pio2f+0x23c>
 80081e0:	aa06      	add	r2, sp, #24
 80081e2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80081e6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80081ea:	2301      	movs	r3, #1
 80081ec:	3001      	adds	r0, #1
 80081ee:	4619      	mov	r1, r3
 80081f0:	e781      	b.n	80080f6 <__kernel_rem_pio2f+0x146>
 80081f2:	aa06      	add	r2, sp, #24
 80081f4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80081f8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80081fc:	460b      	mov	r3, r1
 80081fe:	e7f5      	b.n	80081ec <__kernel_rem_pio2f+0x23c>
 8008200:	1e68      	subs	r0, r5, #1
 8008202:	ab06      	add	r3, sp, #24
 8008204:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800820c:	aa06      	add	r2, sp, #24
 800820e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008212:	e779      	b.n	8008108 <__kernel_rem_pio2f+0x158>
 8008214:	1e68      	subs	r0, r5, #1
 8008216:	ab06      	add	r3, sp, #24
 8008218:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800821c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008220:	e7f4      	b.n	800820c <__kernel_rem_pio2f+0x25c>
 8008222:	a906      	add	r1, sp, #24
 8008224:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008228:	3801      	subs	r0, #1
 800822a:	430a      	orrs	r2, r1
 800822c:	e7a9      	b.n	8008182 <__kernel_rem_pio2f+0x1d2>
 800822e:	f10c 0c01 	add.w	ip, ip, #1
 8008232:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008236:	2a00      	cmp	r2, #0
 8008238:	d0f9      	beq.n	800822e <__kernel_rem_pio2f+0x27e>
 800823a:	eb0b 0305 	add.w	r3, fp, r5
 800823e:	aa1a      	add	r2, sp, #104	; 0x68
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	1898      	adds	r0, r3, r2
 8008244:	3004      	adds	r0, #4
 8008246:	1c69      	adds	r1, r5, #1
 8008248:	3704      	adds	r7, #4
 800824a:	2200      	movs	r2, #0
 800824c:	4465      	add	r5, ip
 800824e:	9005      	str	r0, [sp, #20]
 8008250:	428d      	cmp	r5, r1
 8008252:	f6ff af0a 	blt.w	800806a <__kernel_rem_pio2f+0xba>
 8008256:	a81a      	add	r0, sp, #104	; 0x68
 8008258:	eb02 0c03 	add.w	ip, r2, r3
 800825c:	4484      	add	ip, r0
 800825e:	9803      	ldr	r0, [sp, #12]
 8008260:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008264:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8008268:	9001      	str	r0, [sp, #4]
 800826a:	ee07 0a90 	vmov	s15, r0
 800826e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008272:	9805      	ldr	r0, [sp, #20]
 8008274:	edcc 7a00 	vstr	s15, [ip]
 8008278:	eddf 7a13 	vldr	s15, [pc, #76]	; 80082c8 <__kernel_rem_pio2f+0x318>
 800827c:	eb00 0802 	add.w	r8, r0, r2
 8008280:	f04f 0c00 	mov.w	ip, #0
 8008284:	45d4      	cmp	ip, sl
 8008286:	dd0c      	ble.n	80082a2 <__kernel_rem_pio2f+0x2f2>
 8008288:	eb02 0c07 	add.w	ip, r2, r7
 800828c:	a842      	add	r0, sp, #264	; 0x108
 800828e:	4484      	add	ip, r0
 8008290:	edcc 7a01 	vstr	s15, [ip, #4]
 8008294:	3101      	adds	r1, #1
 8008296:	3204      	adds	r2, #4
 8008298:	e7da      	b.n	8008250 <__kernel_rem_pio2f+0x2a0>
 800829a:	9b04      	ldr	r3, [sp, #16]
 800829c:	f04f 0c01 	mov.w	ip, #1
 80082a0:	e7c7      	b.n	8008232 <__kernel_rem_pio2f+0x282>
 80082a2:	ecfe 6a01 	vldmia	lr!, {s13}
 80082a6:	ed38 7a01 	vldmdb	r8!, {s14}
 80082aa:	f10c 0c01 	add.w	ip, ip, #1
 80082ae:	eee6 7a87 	vfma.f32	s15, s13, s14
 80082b2:	e7e7      	b.n	8008284 <__kernel_rem_pio2f+0x2d4>
 80082b4:	3b01      	subs	r3, #1
 80082b6:	e769      	b.n	800818c <__kernel_rem_pio2f+0x1dc>
 80082b8:	08008b78 	.word	0x08008b78
 80082bc:	08008b4c 	.word	0x08008b4c
 80082c0:	43800000 	.word	0x43800000
 80082c4:	3b800000 	.word	0x3b800000
 80082c8:	00000000 	.word	0x00000000
 80082cc:	4260      	negs	r0, r4
 80082ce:	eeb0 0a48 	vmov.f32	s0, s16
 80082d2:	f000 f981 	bl	80085d8 <scalbnf>
 80082d6:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80082c0 <__kernel_rem_pio2f+0x310>
 80082da:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80082de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e2:	db1a      	blt.n	800831a <__kernel_rem_pio2f+0x36a>
 80082e4:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80082c4 <__kernel_rem_pio2f+0x314>
 80082e8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80082ec:	aa06      	add	r2, sp, #24
 80082ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082f2:	a906      	add	r1, sp, #24
 80082f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082f8:	3408      	adds	r4, #8
 80082fa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80082fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008302:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008306:	ee10 3a10 	vmov	r3, s0
 800830a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800830e:	1c6b      	adds	r3, r5, #1
 8008310:	ee17 2a90 	vmov	r2, s15
 8008314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008318:	e73f      	b.n	800819a <__kernel_rem_pio2f+0x1ea>
 800831a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800831e:	aa06      	add	r2, sp, #24
 8008320:	ee10 3a10 	vmov	r3, s0
 8008324:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008328:	462b      	mov	r3, r5
 800832a:	e736      	b.n	800819a <__kernel_rem_pio2f+0x1ea>
 800832c:	aa06      	add	r2, sp, #24
 800832e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8008332:	9202      	str	r2, [sp, #8]
 8008334:	ee07 2a90 	vmov	s15, r2
 8008338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800833c:	3c01      	subs	r4, #1
 800833e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008342:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008346:	ed65 7a01 	vstmdb	r5!, {s15}
 800834a:	e734      	b.n	80081b6 <__kernel_rem_pio2f+0x206>
 800834c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8008350:	ecf7 6a01 	vldmia	r7!, {s13}
 8008354:	ed9c 7a00 	vldr	s14, [ip]
 8008358:	eee6 7a87 	vfma.f32	s15, s13, s14
 800835c:	3401      	adds	r4, #1
 800835e:	454c      	cmp	r4, r9
 8008360:	dc01      	bgt.n	8008366 <__kernel_rem_pio2f+0x3b6>
 8008362:	42a5      	cmp	r5, r4
 8008364:	daf2      	bge.n	800834c <__kernel_rem_pio2f+0x39c>
 8008366:	aa56      	add	r2, sp, #344	; 0x158
 8008368:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800836c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8008370:	3501      	adds	r5, #1
 8008372:	3804      	subs	r0, #4
 8008374:	e723      	b.n	80081be <__kernel_rem_pio2f+0x20e>
 8008376:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008378:	2a03      	cmp	r2, #3
 800837a:	d84d      	bhi.n	8008418 <__kernel_rem_pio2f+0x468>
 800837c:	e8df f002 	tbb	[pc, r2]
 8008380:	021f1f3e 	.word	0x021f1f3e
 8008384:	aa56      	add	r2, sp, #344	; 0x158
 8008386:	4411      	add	r1, r2
 8008388:	399c      	subs	r1, #156	; 0x9c
 800838a:	4608      	mov	r0, r1
 800838c:	461c      	mov	r4, r3
 800838e:	2c00      	cmp	r4, #0
 8008390:	dc5f      	bgt.n	8008452 <__kernel_rem_pio2f+0x4a2>
 8008392:	4608      	mov	r0, r1
 8008394:	461c      	mov	r4, r3
 8008396:	2c01      	cmp	r4, #1
 8008398:	dc6b      	bgt.n	8008472 <__kernel_rem_pio2f+0x4c2>
 800839a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80082c8 <__kernel_rem_pio2f+0x318>
 800839e:	2b01      	cmp	r3, #1
 80083a0:	dc77      	bgt.n	8008492 <__kernel_rem_pio2f+0x4e2>
 80083a2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80083a6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80083aa:	f1b8 0f00 	cmp.w	r8, #0
 80083ae:	d176      	bne.n	800849e <__kernel_rem_pio2f+0x4ee>
 80083b0:	edc6 6a00 	vstr	s13, [r6]
 80083b4:	ed86 7a01 	vstr	s14, [r6, #4]
 80083b8:	edc6 7a02 	vstr	s15, [r6, #8]
 80083bc:	e02c      	b.n	8008418 <__kernel_rem_pio2f+0x468>
 80083be:	aa56      	add	r2, sp, #344	; 0x158
 80083c0:	4411      	add	r1, r2
 80083c2:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80082c8 <__kernel_rem_pio2f+0x318>
 80083c6:	399c      	subs	r1, #156	; 0x9c
 80083c8:	4618      	mov	r0, r3
 80083ca:	2800      	cmp	r0, #0
 80083cc:	da32      	bge.n	8008434 <__kernel_rem_pio2f+0x484>
 80083ce:	f1b8 0f00 	cmp.w	r8, #0
 80083d2:	d035      	beq.n	8008440 <__kernel_rem_pio2f+0x490>
 80083d4:	eef1 7a47 	vneg.f32	s15, s14
 80083d8:	edc6 7a00 	vstr	s15, [r6]
 80083dc:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80083e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083e4:	a82f      	add	r0, sp, #188	; 0xbc
 80083e6:	2101      	movs	r1, #1
 80083e8:	428b      	cmp	r3, r1
 80083ea:	da2c      	bge.n	8008446 <__kernel_rem_pio2f+0x496>
 80083ec:	f1b8 0f00 	cmp.w	r8, #0
 80083f0:	d001      	beq.n	80083f6 <__kernel_rem_pio2f+0x446>
 80083f2:	eef1 7a67 	vneg.f32	s15, s15
 80083f6:	edc6 7a01 	vstr	s15, [r6, #4]
 80083fa:	e00d      	b.n	8008418 <__kernel_rem_pio2f+0x468>
 80083fc:	aa56      	add	r2, sp, #344	; 0x158
 80083fe:	4411      	add	r1, r2
 8008400:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80082c8 <__kernel_rem_pio2f+0x318>
 8008404:	399c      	subs	r1, #156	; 0x9c
 8008406:	2b00      	cmp	r3, #0
 8008408:	da0e      	bge.n	8008428 <__kernel_rem_pio2f+0x478>
 800840a:	f1b8 0f00 	cmp.w	r8, #0
 800840e:	d001      	beq.n	8008414 <__kernel_rem_pio2f+0x464>
 8008410:	eef1 7a67 	vneg.f32	s15, s15
 8008414:	edc6 7a00 	vstr	s15, [r6]
 8008418:	9b01      	ldr	r3, [sp, #4]
 800841a:	f003 0007 	and.w	r0, r3, #7
 800841e:	b057      	add	sp, #348	; 0x15c
 8008420:	ecbd 8b04 	vpop	{d8-d9}
 8008424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008428:	ed31 7a01 	vldmdb	r1!, {s14}
 800842c:	3b01      	subs	r3, #1
 800842e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008432:	e7e8      	b.n	8008406 <__kernel_rem_pio2f+0x456>
 8008434:	ed71 7a01 	vldmdb	r1!, {s15}
 8008438:	3801      	subs	r0, #1
 800843a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800843e:	e7c4      	b.n	80083ca <__kernel_rem_pio2f+0x41a>
 8008440:	eef0 7a47 	vmov.f32	s15, s14
 8008444:	e7c8      	b.n	80083d8 <__kernel_rem_pio2f+0x428>
 8008446:	ecb0 7a01 	vldmia	r0!, {s14}
 800844a:	3101      	adds	r1, #1
 800844c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008450:	e7ca      	b.n	80083e8 <__kernel_rem_pio2f+0x438>
 8008452:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008456:	ed70 6a01 	vldmdb	r0!, {s13}
 800845a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800845e:	3c01      	subs	r4, #1
 8008460:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008464:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846c:	edc0 7a00 	vstr	s15, [r0]
 8008470:	e78d      	b.n	800838e <__kernel_rem_pio2f+0x3de>
 8008472:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008476:	ed70 6a01 	vldmdb	r0!, {s13}
 800847a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800847e:	3c01      	subs	r4, #1
 8008480:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008484:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800848c:	edc0 7a00 	vstr	s15, [r0]
 8008490:	e781      	b.n	8008396 <__kernel_rem_pio2f+0x3e6>
 8008492:	ed31 7a01 	vldmdb	r1!, {s14}
 8008496:	3b01      	subs	r3, #1
 8008498:	ee77 7a87 	vadd.f32	s15, s15, s14
 800849c:	e77f      	b.n	800839e <__kernel_rem_pio2f+0x3ee>
 800849e:	eef1 6a66 	vneg.f32	s13, s13
 80084a2:	eeb1 7a47 	vneg.f32	s14, s14
 80084a6:	edc6 6a00 	vstr	s13, [r6]
 80084aa:	ed86 7a01 	vstr	s14, [r6, #4]
 80084ae:	eef1 7a67 	vneg.f32	s15, s15
 80084b2:	e781      	b.n	80083b8 <__kernel_rem_pio2f+0x408>

080084b4 <__kernel_sinf>:
 80084b4:	ee10 3a10 	vmov	r3, s0
 80084b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80084c0:	da04      	bge.n	80084cc <__kernel_sinf+0x18>
 80084c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80084c6:	ee17 3a90 	vmov	r3, s15
 80084ca:	b35b      	cbz	r3, 8008524 <__kernel_sinf+0x70>
 80084cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80084d0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008528 <__kernel_sinf+0x74>
 80084d4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800852c <__kernel_sinf+0x78>
 80084d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80084dc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008530 <__kernel_sinf+0x7c>
 80084e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80084e4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008534 <__kernel_sinf+0x80>
 80084e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80084ec:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008538 <__kernel_sinf+0x84>
 80084f0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80084f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80084f8:	b930      	cbnz	r0, 8008508 <__kernel_sinf+0x54>
 80084fa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800853c <__kernel_sinf+0x88>
 80084fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008502:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008506:	4770      	bx	lr
 8008508:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800850c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008510:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008514:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008518:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008540 <__kernel_sinf+0x8c>
 800851c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008520:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	2f2ec9d3 	.word	0x2f2ec9d3
 800852c:	b2d72f34 	.word	0xb2d72f34
 8008530:	3638ef1b 	.word	0x3638ef1b
 8008534:	b9500d01 	.word	0xb9500d01
 8008538:	3c088889 	.word	0x3c088889
 800853c:	be2aaaab 	.word	0xbe2aaaab
 8008540:	3e2aaaab 	.word	0x3e2aaaab

08008544 <fabsf>:
 8008544:	ee10 3a10 	vmov	r3, s0
 8008548:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800854c:	ee00 3a10 	vmov	s0, r3
 8008550:	4770      	bx	lr
	...

08008554 <floorf>:
 8008554:	ee10 3a10 	vmov	r3, s0
 8008558:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800855c:	0dca      	lsrs	r2, r1, #23
 800855e:	3a7f      	subs	r2, #127	; 0x7f
 8008560:	2a16      	cmp	r2, #22
 8008562:	dc2a      	bgt.n	80085ba <floorf+0x66>
 8008564:	2a00      	cmp	r2, #0
 8008566:	da11      	bge.n	800858c <floorf+0x38>
 8008568:	eddf 7a18 	vldr	s15, [pc, #96]	; 80085cc <floorf+0x78>
 800856c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008570:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008578:	dd05      	ble.n	8008586 <floorf+0x32>
 800857a:	2b00      	cmp	r3, #0
 800857c:	da23      	bge.n	80085c6 <floorf+0x72>
 800857e:	4a14      	ldr	r2, [pc, #80]	; (80085d0 <floorf+0x7c>)
 8008580:	2900      	cmp	r1, #0
 8008582:	bf18      	it	ne
 8008584:	4613      	movne	r3, r2
 8008586:	ee00 3a10 	vmov	s0, r3
 800858a:	4770      	bx	lr
 800858c:	4911      	ldr	r1, [pc, #68]	; (80085d4 <floorf+0x80>)
 800858e:	4111      	asrs	r1, r2
 8008590:	420b      	tst	r3, r1
 8008592:	d0fa      	beq.n	800858a <floorf+0x36>
 8008594:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80085cc <floorf+0x78>
 8008598:	ee30 0a27 	vadd.f32	s0, s0, s15
 800859c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80085a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a4:	ddef      	ble.n	8008586 <floorf+0x32>
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	bfbe      	ittt	lt
 80085aa:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80085ae:	fa40 f202 	asrlt.w	r2, r0, r2
 80085b2:	189b      	addlt	r3, r3, r2
 80085b4:	ea23 0301 	bic.w	r3, r3, r1
 80085b8:	e7e5      	b.n	8008586 <floorf+0x32>
 80085ba:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80085be:	d3e4      	bcc.n	800858a <floorf+0x36>
 80085c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80085c4:	4770      	bx	lr
 80085c6:	2300      	movs	r3, #0
 80085c8:	e7dd      	b.n	8008586 <floorf+0x32>
 80085ca:	bf00      	nop
 80085cc:	7149f2ca 	.word	0x7149f2ca
 80085d0:	bf800000 	.word	0xbf800000
 80085d4:	007fffff 	.word	0x007fffff

080085d8 <scalbnf>:
 80085d8:	b508      	push	{r3, lr}
 80085da:	ee10 2a10 	vmov	r2, s0
 80085de:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80085e2:	ed2d 8b02 	vpush	{d8}
 80085e6:	eef0 0a40 	vmov.f32	s1, s0
 80085ea:	d004      	beq.n	80085f6 <scalbnf+0x1e>
 80085ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80085f0:	d306      	bcc.n	8008600 <scalbnf+0x28>
 80085f2:	ee70 0a00 	vadd.f32	s1, s0, s0
 80085f6:	ecbd 8b02 	vpop	{d8}
 80085fa:	eeb0 0a60 	vmov.f32	s0, s1
 80085fe:	bd08      	pop	{r3, pc}
 8008600:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008604:	d21c      	bcs.n	8008640 <scalbnf+0x68>
 8008606:	4b1f      	ldr	r3, [pc, #124]	; (8008684 <scalbnf+0xac>)
 8008608:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008688 <scalbnf+0xb0>
 800860c:	4298      	cmp	r0, r3
 800860e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8008612:	db10      	blt.n	8008636 <scalbnf+0x5e>
 8008614:	ee10 2a90 	vmov	r2, s1
 8008618:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800861c:	3b19      	subs	r3, #25
 800861e:	4403      	add	r3, r0
 8008620:	2bfe      	cmp	r3, #254	; 0xfe
 8008622:	dd0f      	ble.n	8008644 <scalbnf+0x6c>
 8008624:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800868c <scalbnf+0xb4>
 8008628:	eeb0 0a48 	vmov.f32	s0, s16
 800862c:	f000 f834 	bl	8008698 <copysignf>
 8008630:	ee60 0a08 	vmul.f32	s1, s0, s16
 8008634:	e7df      	b.n	80085f6 <scalbnf+0x1e>
 8008636:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008690 <scalbnf+0xb8>
 800863a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800863e:	e7da      	b.n	80085f6 <scalbnf+0x1e>
 8008640:	0ddb      	lsrs	r3, r3, #23
 8008642:	e7ec      	b.n	800861e <scalbnf+0x46>
 8008644:	2b00      	cmp	r3, #0
 8008646:	dd06      	ble.n	8008656 <scalbnf+0x7e>
 8008648:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800864c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008650:	ee00 3a90 	vmov	s1, r3
 8008654:	e7cf      	b.n	80085f6 <scalbnf+0x1e>
 8008656:	f113 0f16 	cmn.w	r3, #22
 800865a:	da06      	bge.n	800866a <scalbnf+0x92>
 800865c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008660:	4298      	cmp	r0, r3
 8008662:	dcdf      	bgt.n	8008624 <scalbnf+0x4c>
 8008664:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8008690 <scalbnf+0xb8>
 8008668:	e7de      	b.n	8008628 <scalbnf+0x50>
 800866a:	3319      	adds	r3, #25
 800866c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008670:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008674:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008694 <scalbnf+0xbc>
 8008678:	ee07 3a10 	vmov	s14, r3
 800867c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008680:	e7b9      	b.n	80085f6 <scalbnf+0x1e>
 8008682:	bf00      	nop
 8008684:	ffff3cb0 	.word	0xffff3cb0
 8008688:	4c000000 	.word	0x4c000000
 800868c:	7149f2ca 	.word	0x7149f2ca
 8008690:	0da24260 	.word	0x0da24260
 8008694:	33000000 	.word	0x33000000

08008698 <copysignf>:
 8008698:	ee10 3a10 	vmov	r3, s0
 800869c:	ee10 2a90 	vmov	r2, s1
 80086a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80086a8:	4313      	orrs	r3, r2
 80086aa:	ee00 3a10 	vmov	s0, r3
 80086ae:	4770      	bx	lr

080086b0 <_init>:
 80086b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b2:	bf00      	nop
 80086b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b6:	bc08      	pop	{r3}
 80086b8:	469e      	mov	lr, r3
 80086ba:	4770      	bx	lr

080086bc <_fini>:
 80086bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086be:	bf00      	nop
 80086c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c2:	bc08      	pop	{r3}
 80086c4:	469e      	mov	lr, r3
 80086c6:	4770      	bx	lr
