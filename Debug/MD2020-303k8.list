
MD2020-303k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007270  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007400  08007400  00017400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007490  08007490  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007490  08007490  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007490  08007490  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d4  20000010  080074a8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011e4  080074a8  000211e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001902a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038bb  00000000  00000000  0003906a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a0  00000000  00000000  0003c928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c8  00000000  00000000  0003dec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001af76  00000000  00000000  0003f290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012c10  00000000  00000000  0005a206  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c53b  00000000  00000000  0006ce16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00109351  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058cc  00000000  00000000  001093cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073e8 	.word	0x080073e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080073e8 	.word	0x080073e8

080001d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b08a      	sub	sp, #40	; 0x28
 80001d4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80001d6:	f107 031c 	add.w	r3, r7, #28
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]
 80001ee:	611a      	str	r2, [r3, #16]
 80001f0:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80001f2:	4b2e      	ldr	r3, [pc, #184]	; (80002ac <MX_ADC1_Init+0xdc>)
 80001f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001fa:	4b2c      	ldr	r3, [pc, #176]	; (80002ac <MX_ADC1_Init+0xdc>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000200:	4b2a      	ldr	r3, [pc, #168]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000206:	4b29      	ldr	r3, [pc, #164]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000208:	2200      	movs	r2, #0
 800020a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <MX_ADC1_Init+0xdc>)
 800020e:	2200      	movs	r2, #0
 8000210:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000212:	4b26      	ldr	r3, [pc, #152]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000214:	2200      	movs	r2, #0
 8000216:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800021a:	4b24      	ldr	r3, [pc, #144]	; (80002ac <MX_ADC1_Init+0xdc>)
 800021c:	2200      	movs	r2, #0
 800021e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000220:	4b22      	ldr	r3, [pc, #136]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000222:	2201      	movs	r2, #1
 8000224:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000226:	4b21      	ldr	r3, [pc, #132]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000228:	2200      	movs	r2, #0
 800022a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800022c:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <MX_ADC1_Init+0xdc>)
 800022e:	2201      	movs	r2, #1
 8000230:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000232:	4b1e      	ldr	r3, [pc, #120]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000234:	2200      	movs	r2, #0
 8000236:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800023a:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <MX_ADC1_Init+0xdc>)
 800023c:	2204      	movs	r2, #4
 800023e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000240:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000242:	2200      	movs	r2, #0
 8000244:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000246:	4b19      	ldr	r3, [pc, #100]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000248:	2200      	movs	r2, #0
 800024a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800024c:	4817      	ldr	r0, [pc, #92]	; (80002ac <MX_ADC1_Init+0xdc>)
 800024e:	f000 ff21 	bl	8001094 <HAL_ADC_Init>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000258:	f000 fba8 	bl	80009ac <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800025c:	2300      	movs	r3, #0
 800025e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000260:	f107 031c 	add.w	r3, r7, #28
 8000264:	4619      	mov	r1, r3
 8000266:	4811      	ldr	r0, [pc, #68]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000268:	f002 f8ce 	bl	8002408 <HAL_ADCEx_MultiModeConfigChannel>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000272:	f000 fb9b 	bl	80009ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000276:	2304      	movs	r3, #4
 8000278:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800027a:	2301      	movs	r3, #1
 800027c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000282:	2301      	movs	r3, #1
 8000284:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4619      	mov	r1, r3
 8000292:	4806      	ldr	r0, [pc, #24]	; (80002ac <MX_ADC1_Init+0xdc>)
 8000294:	f001 fad8 	bl	8001848 <HAL_ADC_ConfigChannel>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800029e:	f000 fb85 	bl	80009ac <Error_Handler>
  }

}
 80002a2:	bf00      	nop
 80002a4:	3728      	adds	r7, #40	; 0x28
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20001020 	.word	0x20001020

080002b0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	; 0x40
 80002b4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80002b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]
 80002c6:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80002c8:	463b      	mov	r3, r7
 80002ca:	2228      	movs	r2, #40	; 0x28
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f007 f882 	bl	80073d8 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 80002d4:	4b3f      	ldr	r3, [pc, #252]	; (80003d4 <MX_ADC2_Init+0x124>)
 80002d6:	4a40      	ldr	r2, [pc, #256]	; (80003d8 <MX_ADC2_Init+0x128>)
 80002d8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002da:	4b3e      	ldr	r3, [pc, #248]	; (80003d4 <MX_ADC2_Init+0x124>)
 80002dc:	2200      	movs	r2, #0
 80002de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80002e0:	4b3c      	ldr	r3, [pc, #240]	; (80003d4 <MX_ADC2_Init+0x124>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002e6:	4b3b      	ldr	r3, [pc, #236]	; (80003d4 <MX_ADC2_Init+0x124>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <MX_ADC2_Init+0x124>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80002f2:	4b38      	ldr	r3, [pc, #224]	; (80003d4 <MX_ADC2_Init+0x124>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002fa:	4b36      	ldr	r3, [pc, #216]	; (80003d4 <MX_ADC2_Init+0x124>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000300:	4b34      	ldr	r3, [pc, #208]	; (80003d4 <MX_ADC2_Init+0x124>)
 8000302:	2201      	movs	r2, #1
 8000304:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000306:	4b33      	ldr	r3, [pc, #204]	; (80003d4 <MX_ADC2_Init+0x124>)
 8000308:	2200      	movs	r2, #0
 800030a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800030c:	4b31      	ldr	r3, [pc, #196]	; (80003d4 <MX_ADC2_Init+0x124>)
 800030e:	2201      	movs	r2, #1
 8000310:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000312:	4b30      	ldr	r3, [pc, #192]	; (80003d4 <MX_ADC2_Init+0x124>)
 8000314:	2200      	movs	r2, #0
 8000316:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800031a:	4b2e      	ldr	r3, [pc, #184]	; (80003d4 <MX_ADC2_Init+0x124>)
 800031c:	2204      	movs	r2, #4
 800031e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000320:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <MX_ADC2_Init+0x124>)
 8000322:	2200      	movs	r2, #0
 8000324:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000326:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <MX_ADC2_Init+0x124>)
 8000328:	2200      	movs	r2, #0
 800032a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800032c:	4829      	ldr	r0, [pc, #164]	; (80003d4 <MX_ADC2_Init+0x124>)
 800032e:	f000 feb1 	bl	8001094 <HAL_ADC_Init>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000338:	f000 fb38 	bl	80009ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800033c:	2301      	movs	r3, #1
 800033e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000340:	2301      	movs	r3, #1
 8000342:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000344:	2300      	movs	r3, #0
 8000346:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000348:	2300      	movs	r3, #0
 800034a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800034c:	2300      	movs	r3, #0
 800034e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.Offset = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000354:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000358:	4619      	mov	r1, r3
 800035a:	481e      	ldr	r0, [pc, #120]	; (80003d4 <MX_ADC2_Init+0x124>)
 800035c:	f001 fa74 	bl	8001848 <HAL_ADC_ConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000366:	f000 fb21 	bl	80009ac <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800036a:	2301      	movs	r3, #1
 800036c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800036e:	2301      	movs	r3, #1
 8000370:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000376:	2302      	movs	r3, #2
 8000378:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800037a:	2301      	movs	r3, #1
 800037c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800037e:	2340      	movs	r3, #64	; 0x40
 8000380:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T3_TRGO;
 8000382:	2330      	movs	r3, #48	; 0x30
 8000384:	623b      	str	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000386:	2300      	movs	r3, #0
 8000388:	777b      	strb	r3, [r7, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800038a:	2300      	movs	r3, #0
 800038c:	773b      	strb	r3, [r7, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 800038e:	2300      	movs	r3, #0
 8000390:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.InjectedOffset = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800039a:	463b      	mov	r3, r7
 800039c:	4619      	mov	r1, r3
 800039e:	480d      	ldr	r0, [pc, #52]	; (80003d4 <MX_ADC2_Init+0x124>)
 80003a0:	f001 fd14 	bl	8001dcc <HAL_ADCEx_InjectedConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC2_Init+0xfe>
  {
    Error_Handler();
 80003aa:	f000 faff 	bl	80009ac <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80003ae:	2302      	movs	r3, #2
 80003b0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80003b2:	2302      	movs	r3, #2
 80003b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80003b6:	463b      	mov	r3, r7
 80003b8:	4619      	mov	r1, r3
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <MX_ADC2_Init+0x124>)
 80003bc:	f001 fd06 	bl	8001dcc <HAL_ADCEx_InjectedConfigChannel>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_ADC2_Init+0x11a>
  {
    Error_Handler();
 80003c6:	f000 faf1 	bl	80009ac <Error_Handler>
  }

}
 80003ca:	bf00      	nop
 80003cc:	3740      	adds	r7, #64	; 0x40
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000fd0 	.word	0x20000fd0
 80003d8:	50000100 	.word	0x50000100

080003dc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08c      	sub	sp, #48	; 0x30
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e4:	f107 031c 	add.w	r3, r7, #28
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003fc:	d136      	bne.n	800046c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80003fe:	4b3b      	ldr	r3, [pc, #236]	; (80004ec <HAL_ADC_MspInit+0x110>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	3301      	adds	r3, #1
 8000404:	4a39      	ldr	r2, [pc, #228]	; (80004ec <HAL_ADC_MspInit+0x110>)
 8000406:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000408:	4b38      	ldr	r3, [pc, #224]	; (80004ec <HAL_ADC_MspInit+0x110>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d10b      	bne.n	8000428 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000410:	4b37      	ldr	r3, [pc, #220]	; (80004f0 <HAL_ADC_MspInit+0x114>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a36      	ldr	r2, [pc, #216]	; (80004f0 <HAL_ADC_MspInit+0x114>)
 8000416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041a:	6153      	str	r3, [r2, #20]
 800041c:	4b34      	ldr	r3, [pc, #208]	; (80004f0 <HAL_ADC_MspInit+0x114>)
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000424:	61bb      	str	r3, [r7, #24]
 8000426:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b31      	ldr	r3, [pc, #196]	; (80004f0 <HAL_ADC_MspInit+0x114>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a30      	ldr	r2, [pc, #192]	; (80004f0 <HAL_ADC_MspInit+0x114>)
 800042e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000432:	6153      	str	r3, [r2, #20]
 8000434:	4b2e      	ldr	r3, [pc, #184]	; (80004f0 <HAL_ADC_MspInit+0x114>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800043c:	617b      	str	r3, [r7, #20]
 800043e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = POT_Pin;
 8000440:	2308      	movs	r3, #8
 8000442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000444:	2303      	movs	r3, #3
 8000446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(POT_GPIO_Port, &GPIO_InitStruct);
 800044c:	f107 031c 	add.w	r3, r7, #28
 8000450:	4619      	mov	r1, r3
 8000452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000456:	f002 fd4b 	bl	8002ef0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2105      	movs	r1, #5
 800045e:	2012      	movs	r0, #18
 8000460:	f002 fcde 	bl	8002e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000464:	2012      	movs	r0, #18
 8000466:	f002 fcf7 	bl	8002e58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800046a:	e03a      	b.n	80004e2 <HAL_ADC_MspInit+0x106>
  else if(adcHandle->Instance==ADC2)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a20      	ldr	r2, [pc, #128]	; (80004f4 <HAL_ADC_MspInit+0x118>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d135      	bne.n	80004e2 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000476:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <HAL_ADC_MspInit+0x110>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	3301      	adds	r3, #1
 800047c:	4a1b      	ldr	r2, [pc, #108]	; (80004ec <HAL_ADC_MspInit+0x110>)
 800047e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000480:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <HAL_ADC_MspInit+0x110>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d10b      	bne.n	80004a0 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000488:	4b19      	ldr	r3, [pc, #100]	; (80004f0 <HAL_ADC_MspInit+0x114>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	4a18      	ldr	r2, [pc, #96]	; (80004f0 <HAL_ADC_MspInit+0x114>)
 800048e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000492:	6153      	str	r3, [r2, #20]
 8000494:	4b16      	ldr	r3, [pc, #88]	; (80004f0 <HAL_ADC_MspInit+0x114>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049c:	613b      	str	r3, [r7, #16]
 800049e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <HAL_ADC_MspInit+0x114>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <HAL_ADC_MspInit+0x114>)
 80004a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004aa:	6153      	str	r3, [r2, #20]
 80004ac:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <HAL_ADC_MspInit+0x114>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Current_Pin|Voltage_Pin;
 80004b8:	2330      	movs	r3, #48	; 0x30
 80004ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004bc:	2303      	movs	r3, #3
 80004be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	f107 031c 	add.w	r3, r7, #28
 80004c8:	4619      	mov	r1, r3
 80004ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ce:	f002 fd0f 	bl	8002ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2105      	movs	r1, #5
 80004d6:	2012      	movs	r0, #18
 80004d8:	f002 fca2 	bl	8002e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80004dc:	2012      	movs	r0, #18
 80004de:	f002 fcbb 	bl	8002e58 <HAL_NVIC_EnableIRQ>
}
 80004e2:	bf00      	nop
 80004e4:	3730      	adds	r7, #48	; 0x30
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	2000002c 	.word	0x2000002c
 80004f0:	40021000 	.word	0x40021000
 80004f4:	50000100 	.word	0x50000100

080004f8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_CAN_Init+0x64>)
 80004fe:	4a18      	ldr	r2, [pc, #96]	; (8000560 <MX_CAN_Init+0x68>)
 8000500:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000502:	4b16      	ldr	r3, [pc, #88]	; (800055c <MX_CAN_Init+0x64>)
 8000504:	2202      	movs	r2, #2
 8000506:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_CAN_Init+0x64>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <MX_CAN_Init+0x64>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_CAN_Init+0x64>)
 8000516:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800051a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_CAN_Init+0x64>)
 800051e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000522:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <MX_CAN_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <MX_CAN_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <MX_CAN_Init+0x64>)
 8000532:	2200      	movs	r2, #0
 8000534:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <MX_CAN_Init+0x64>)
 8000538:	2200      	movs	r2, #0
 800053a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <MX_CAN_Init+0x64>)
 800053e:	2200      	movs	r2, #0
 8000540:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <MX_CAN_Init+0x64>)
 8000544:	2200      	movs	r2, #0
 8000546:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <MX_CAN_Init+0x64>)
 800054a:	f002 f882 	bl	8002652 <HAL_CAN_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000554:	f000 fa2a 	bl	80009ac <Error_Handler>
  }

}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20001070 	.word	0x20001070
 8000560:	40006400 	.word	0x40006400

08000564 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	; 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a24      	ldr	r2, [pc, #144]	; (8000614 <HAL_CAN_MspInit+0xb0>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d141      	bne.n	800060a <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000586:	4b24      	ldr	r3, [pc, #144]	; (8000618 <HAL_CAN_MspInit+0xb4>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a23      	ldr	r2, [pc, #140]	; (8000618 <HAL_CAN_MspInit+0xb4>)
 800058c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b21      	ldr	r3, [pc, #132]	; (8000618 <HAL_CAN_MspInit+0xb4>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <HAL_CAN_MspInit+0xb4>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a1d      	ldr	r2, [pc, #116]	; (8000618 <HAL_CAN_MspInit+0xb4>)
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <HAL_CAN_MspInit+0xb4>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c4:	2303      	movs	r3, #3
 80005c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80005c8:	2309      	movs	r3, #9
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d6:	f002 fc8b 	bl	8002ef0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 5, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2105      	movs	r1, #5
 80005de:	2013      	movs	r0, #19
 80005e0:	f002 fc1e 	bl	8002e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 80005e4:	2013      	movs	r0, #19
 80005e6:	f002 fc37 	bl	8002e58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 5, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2105      	movs	r1, #5
 80005ee:	2014      	movs	r0, #20
 80005f0:	f002 fc16 	bl	8002e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80005f4:	2014      	movs	r0, #20
 80005f6:	f002 fc2f 	bl	8002e58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 5, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2105      	movs	r1, #5
 80005fe:	2015      	movs	r0, #21
 8000600:	f002 fc0e 	bl	8002e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000604:	2015      	movs	r0, #21
 8000606:	f002 fc27 	bl	8002e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800060a:	bf00      	nop
 800060c:	3728      	adds	r7, #40	; 0x28
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40006400 	.word	0x40006400
 8000618:	40021000 	.word	0x40021000

0800061c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	4a07      	ldr	r2, [pc, #28]	; (8000648 <vApplicationGetIdleTaskMemory+0x2c>)
 800062c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	4a06      	ldr	r2, [pc, #24]	; (800064c <vApplicationGetIdleTaskMemory+0x30>)
 8000632:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000030 	.word	0x20000030
 800064c:	20000084 	.word	0x20000084

08000650 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000650:	b5b0      	push	{r4, r5, r7, lr}
 8000652:	b08e      	sub	sp, #56	; 0x38
 8000654:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_FREERTOS_Init+0x58>)
 8000658:	f107 041c 	add.w	r4, r7, #28
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f005 fc89 	bl	8005f88 <osThreadCreate>
 8000676:	4602      	mov	r2, r0
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_FREERTOS_Init+0x5c>)
 800067a:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadDef(controlTask, StartControlTask, osPriorityHigh, 0, 128);
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_FREERTOS_Init+0x60>)
 800067e:	463c      	mov	r4, r7
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 800068e:	463b      	mov	r3, r7
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f005 fc78 	bl	8005f88 <osThreadCreate>
 8000698:	4602      	mov	r2, r0
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_FREERTOS_Init+0x64>)
 800069c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800069e:	bf00      	nop
 80006a0:	3738      	adds	r7, #56	; 0x38
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bdb0      	pop	{r4, r5, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	0800740c 	.word	0x0800740c
 80006ac:	20001098 	.word	0x20001098
 80006b0:	08007434 	.word	0x08007434
 80006b4:	2000109c 	.word	0x2000109c

080006b8 <StartDefaultTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	int counter = -4;
 80006c0:	f06f 0303 	mvn.w	r3, #3
 80006c4:	60fb      	str	r3, [r7, #12]
	for (;;) {
		GPIO_Show_Speed(counter);
 80006c6:	68f8      	ldr	r0, [r7, #12]
 80006c8:	f000 f86e 	bl	80007a8 <GPIO_Show_Speed>
		counter++;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3301      	adds	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
		if (counter > 5)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2b05      	cmp	r3, #5
 80006d6:	dd02      	ble.n	80006de <StartDefaultTask+0x26>
			counter = -4;
 80006d8:	f06f 0303 	mvn.w	r3, #3
 80006dc:	60fb      	str	r3, [r7, #12]
		osDelay(10000);
 80006de:	f242 7010 	movw	r0, #10000	; 0x2710
 80006e2:	f005 fc9d 	bl	8006020 <osDelay>
		GPIO_Show_Speed(counter);
 80006e6:	e7ee      	b.n	80006c6 <StartDefaultTask+0xe>

080006e8 <StartControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlTask */
void StartControlTask(void const * argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f005 fc95 	bl	8006020 <osDelay>
 80006f6:	e7fb      	b.n	80006f0 <StartControlTask+0x8>

080006f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070e:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <MX_GPIO_Init+0xa8>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a23      	ldr	r2, [pc, #140]	; (80007a0 <MX_GPIO_Init+0xa8>)
 8000714:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000718:	6153      	str	r3, [r2, #20]
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_GPIO_Init+0xa8>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_GPIO_Init+0xa8>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a1d      	ldr	r2, [pc, #116]	; (80007a0 <MX_GPIO_Init+0xa8>)
 800072c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_GPIO_Init+0xa8>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_GPIO_Init+0xa8>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <MX_GPIO_Init+0xa8>)
 8000744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000748:	6153      	str	r3, [r2, #20]
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_GPIO_Init+0xa8>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A2C8_Pin|D2D8_Pin|D3D9_Pin|D4D10_Pin 
 8000756:	2200      	movs	r2, #0
 8000758:	21f8      	movs	r1, #248	; 0xf8
 800075a:	4812      	ldr	r0, [pc, #72]	; (80007a4 <MX_GPIO_Init+0xac>)
 800075c:	f002 fd3a 	bl	80031d4 <HAL_GPIO_WritePin>
                          |D5D11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = p1_Pin|p2_Pin|p3_Pin;
 8000760:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f002 fbba 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = A2C8_Pin|D2D8_Pin|D3D9_Pin|D4D10_Pin 
 800077c:	23f8      	movs	r3, #248	; 0xf8
 800077e:	60fb      	str	r3, [r7, #12]
                          |D5D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0xac>)
 8000794:	f002 fbac 	bl	8002ef0 <HAL_GPIO_Init>

}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000400 	.word	0x48000400

080007a8 <GPIO_Show_Speed>:

/* USER CODE BEGIN 2 */
void GPIO_Show_Speed(int speed){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	if(0<speed){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	dd34      	ble.n	8000820 <GPIO_Show_Speed+0x78>
		HAL_GPIO_WritePin(A2C8_GPIO_Port, A2C8_Pin, 1);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2108      	movs	r1, #8
 80007ba:	4837      	ldr	r0, [pc, #220]	; (8000898 <GPIO_Show_Speed+0xf0>)
 80007bc:	f002 fd0a 	bl	80031d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2D8_GPIO_Port, LEDPINS[0], !(0<speed));
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	b299      	uxth	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bfd4      	ite	le
 80007ca:	2301      	movle	r3, #1
 80007cc:	2300      	movgt	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	461a      	mov	r2, r3
 80007d2:	4831      	ldr	r0, [pc, #196]	; (8000898 <GPIO_Show_Speed+0xf0>)
 80007d4:	f002 fcfe 	bl	80031d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2D8_GPIO_Port, LEDPINS[1], !(1<speed));
 80007d8:	2340      	movs	r3, #64	; 0x40
 80007da:	b299      	uxth	r1, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	bfd4      	ite	le
 80007e2:	2301      	movle	r3, #1
 80007e4:	2300      	movgt	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461a      	mov	r2, r3
 80007ea:	482b      	ldr	r0, [pc, #172]	; (8000898 <GPIO_Show_Speed+0xf0>)
 80007ec:	f002 fcf2 	bl	80031d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2D8_GPIO_Port, LEDPINS[2], !(2<speed));
 80007f0:	2320      	movs	r3, #32
 80007f2:	b299      	uxth	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	bfd4      	ite	le
 80007fa:	2301      	movle	r3, #1
 80007fc:	2300      	movgt	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	461a      	mov	r2, r3
 8000802:	4825      	ldr	r0, [pc, #148]	; (8000898 <GPIO_Show_Speed+0xf0>)
 8000804:	f002 fce6 	bl	80031d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2D8_GPIO_Port, LEDPINS[3], !(3<speed));
 8000808:	2310      	movs	r3, #16
 800080a:	b299      	uxth	r1, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b03      	cmp	r3, #3
 8000810:	bfd4      	ite	le
 8000812:	2301      	movle	r3, #1
 8000814:	2300      	movgt	r3, #0
 8000816:	b2db      	uxtb	r3, r3
 8000818:	461a      	mov	r2, r3
 800081a:	481f      	ldr	r0, [pc, #124]	; (8000898 <GPIO_Show_Speed+0xf0>)
 800081c:	f002 fcda 	bl	80031d4 <HAL_GPIO_WritePin>
	}
	if(speed<=0){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	dc34      	bgt.n	8000890 <GPIO_Show_Speed+0xe8>
		HAL_GPIO_WritePin(A2C8_GPIO_Port, A2C8_Pin, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2108      	movs	r1, #8
 800082a:	481b      	ldr	r0, [pc, #108]	; (8000898 <GPIO_Show_Speed+0xf0>)
 800082c:	f002 fcd2 	bl	80031d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2D8_GPIO_Port, LEDPINS[0], speed<-0);
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	b299      	uxth	r1, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	0fdb      	lsrs	r3, r3, #31
 8000838:	b2db      	uxtb	r3, r3
 800083a:	461a      	mov	r2, r3
 800083c:	4816      	ldr	r0, [pc, #88]	; (8000898 <GPIO_Show_Speed+0xf0>)
 800083e:	f002 fcc9 	bl	80031d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2D8_GPIO_Port, LEDPINS[1], speed<-1);
 8000842:	2340      	movs	r3, #64	; 0x40
 8000844:	b299      	uxth	r1, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800084c:	bfb4      	ite	lt
 800084e:	2301      	movlt	r3, #1
 8000850:	2300      	movge	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	4810      	ldr	r0, [pc, #64]	; (8000898 <GPIO_Show_Speed+0xf0>)
 8000858:	f002 fcbc 	bl	80031d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2D8_GPIO_Port, LEDPINS[2], speed<-2);
 800085c:	2320      	movs	r3, #32
 800085e:	b299      	uxth	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f113 0f02 	cmn.w	r3, #2
 8000866:	bfb4      	ite	lt
 8000868:	2301      	movlt	r3, #1
 800086a:	2300      	movge	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	461a      	mov	r2, r3
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <GPIO_Show_Speed+0xf0>)
 8000872:	f002 fcaf 	bl	80031d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2D8_GPIO_Port, LEDPINS[3], speed<-3);
 8000876:	2310      	movs	r3, #16
 8000878:	b299      	uxth	r1, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f113 0f03 	cmn.w	r3, #3
 8000880:	bfb4      	ite	lt
 8000882:	2301      	movlt	r3, #1
 8000884:	2300      	movge	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	461a      	mov	r2, r3
 800088a:	4803      	ldr	r0, [pc, #12]	; (8000898 <GPIO_Show_Speed+0xf0>)
 800088c:	f002 fca2 	bl	80031d4 <HAL_GPIO_WritePin>
	}
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	48000400 	.word	0x48000400

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a0:	f000 fba4 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a4:	f000 f813 	bl	80008ce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a8:	f7ff ff26 	bl	80006f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008ac:	f7ff fc90 	bl	80001d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008b0:	f7ff fcfe 	bl	80002b0 <MX_ADC2_Init>
  MX_CAN_Init();
 80008b4:	f7ff fe20 	bl	80004f8 <MX_CAN_Init>
  MX_TIM2_Init();
 80008b8:	f000 f96e 	bl	8000b98 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008bc:	f000 f9c0 	bl	8000c40 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80008c0:	f000 faee 	bl	8000ea0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80008c4:	f7ff fec4 	bl	8000650 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80008c8:	f005 fb57 	bl	8005f7a <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <main+0x30>

080008ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b096      	sub	sp, #88	; 0x58
 80008d2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008d8:	2228      	movs	r2, #40	; 0x28
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f006 fd7b 	bl	80073d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
 8000900:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000902:	2301      	movs	r3, #1
 8000904:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800090c:	2301      	movs	r3, #1
 800090e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000910:	2301      	movs	r3, #1
 8000912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000914:	2302      	movs	r3, #2
 8000916:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800091e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000922:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000928:	4618      	mov	r0, r3
 800092a:	f002 fc6b 	bl	8003204 <HAL_RCC_OscConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000934:	f000 f83a 	bl	80009ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	230f      	movs	r3, #15
 800093a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	2102      	movs	r1, #2
 8000954:	4618      	mov	r0, r3
 8000956:	f003 fb5d 	bl	8004014 <HAL_RCC_ClockConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000960:	f000 f824 	bl	80009ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4618      	mov	r0, r3
 8000972:	f003 fdb9 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800097c:	f000 f816 	bl	80009ac <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3758      	adds	r7, #88	; 0x58
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d101      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800099a:	f000 fb3d 	bl	8001018 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40014800 	.word	0x40014800

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_MspInit+0x4c>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6193      	str	r3, [r2, #24]
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_MspInit+0x4c>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_MspInit+0x4c>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	61d3      	str	r3, [r2, #28]
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	210f      	movs	r1, #15
 80009f6:	f06f 0001 	mvn.w	r0, #1
 80009fa:	f002 fa11 	bl	8002e20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0); 
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	201a      	movs	r0, #26
 8000a22:	f002 f9fd 	bl	8002e20 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn); 
 8000a26:	201a      	movs	r0, #26
 8000a28:	f002 fa16 	bl	8002e58 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <HAL_InitTick+0x9c>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <HAL_InitTick+0x9c>)
 8000a32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <HAL_InitTick+0x9c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a44:	f107 0210 	add.w	r2, r7, #16
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 fd18 	bl	8004484 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a54:	f003 fcf4 	bl	8004440 <HAL_RCC_GetPCLK2Freq>
 8000a58:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5c:	4a13      	ldr	r2, [pc, #76]	; (8000aac <HAL_InitTick+0xa0>)
 8000a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a62:	0c9b      	lsrs	r3, r3, #18
 8000a64:	3b01      	subs	r3, #1
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_InitTick+0xa4>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <HAL_InitTick+0xa8>)
 8000a6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_InitTick+0xa4>)
 8000a70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a74:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_InitTick+0xa4>)
 8000a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_InitTick+0xa4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_InitTick+0xa4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <HAL_InitTick+0xa4>)
 8000a8a:	f003 fe53 	bl	8004734 <HAL_TIM_Base_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d104      	bne.n	8000a9e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000a94:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <HAL_InitTick+0xa4>)
 8000a96:	f003 fe83 	bl	80047a0 <HAL_TIM_Base_Start_IT>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3730      	adds	r7, #48	; 0x30
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	431bde83 	.word	0x431bde83
 8000ab0:	200010a0 	.word	0x200010a0
 8000ab4:	40014800 	.word	0x40014800

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <ADC1_2_IRQHandler+0x14>)
 8000af2:	f000 fc61 	bl	80013b8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <ADC1_2_IRQHandler+0x18>)
 8000af8:	f000 fc5e 	bl	80013b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20001020 	.word	0x20001020
 8000b04:	20000fd0 	.word	0x20000fd0

08000b08 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <CAN_TX_IRQHandler+0x10>)
 8000b0e:	f001 fe9b 	bl	8002848 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20001070 	.word	0x20001070

08000b1c <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <CAN_RX0_IRQHandler+0x10>)
 8000b22:	f001 fe91 	bl	8002848 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20001070 	.word	0x20001070

08000b30 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <CAN_RX1_IRQHandler+0x10>)
 8000b36:	f001 fe87 	bl	8002848 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20001070 	.word	0x20001070

08000b44 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000b4a:	f003 ff10 	bl	800496e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200010a0 	.word	0x200010a0

08000b58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <USART2_IRQHandler+0x10>)
 8000b5e:	f004 fd5d 	bl	800561c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20001160 	.word	0x20001160

08000b6c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <SystemInit+0x28>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <SystemInit+0x28>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <SystemInit+0x28>)
 8000b82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b86:	609a      	str	r2, [r3, #8]
#endif
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	2224      	movs	r2, #36	; 0x24
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f006 fc16 	bl	80073d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bac:	463b      	mov	r3, r7
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_TIM2_Init+0xa4>)
 8000bb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_TIM2_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_TIM2_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_TIM2_Init+0xa4>)
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_TIM2_Init+0xa4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_TIM2_Init+0xa4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bde:	2303      	movs	r3, #3
 8000be0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000be2:	2302      	movs	r3, #2
 8000be4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000be6:	2301      	movs	r3, #1
 8000be8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 3;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	4619      	mov	r1, r3
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_TIM2_Init+0xa4>)
 8000c0a:	f003 fe1e 	bl	800484a <HAL_TIM_Encoder_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000c14:	f7ff feca 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_TIM2_Init+0xa4>)
 8000c26:	f004 fc1f 	bl	8005468 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000c30:	f7ff febc 	bl	80009ac <Error_Handler>
  }

}
 8000c34:	bf00      	nop
 8000c36:	3730      	adds	r7, #48	; 0x30
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20001120 	.word	0x20001120

08000c40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c52:	463b      	mov	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]
 8000c62:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000c64:	4b32      	ldr	r3, [pc, #200]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000c66:	4a33      	ldr	r2, [pc, #204]	; (8000d34 <MX_TIM3_Init+0xf4>)
 8000c68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c6a:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c70:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000c72:	2220      	movs	r2, #32
 8000c74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 8000c76:	4b2e      	ldr	r3, [pc, #184]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000c78:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000c7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7e:	4b2c      	ldr	r3, [pc, #176]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c84:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c8a:	4829      	ldr	r0, [pc, #164]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000c8c:	f003 fdb2 	bl	80047f4 <HAL_TIM_PWM_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c96:	f7ff fe89 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4821      	ldr	r0, [pc, #132]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000caa:	f004 fbdd 	bl	8005468 <HAL_TIMEx_MasterConfigSynchronization>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000cb4:	f7ff fe7a 	bl	80009ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb8:	2360      	movs	r3, #96	; 0x60
 8000cba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4818      	ldr	r0, [pc, #96]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000cd0:	f003 ff6c 	bl	8004bac <HAL_TIM_PWM_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000cda:	f7ff fe67 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4812      	ldr	r0, [pc, #72]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000ce6:	f003 ff61 	bl	8004bac <HAL_TIM_PWM_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000cf0:	f7ff fe5c 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000cfc:	f003 ff56 	bl	8004bac <HAL_TIM_PWM_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000d06:	f7ff fe51 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	220c      	movs	r2, #12
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4807      	ldr	r0, [pc, #28]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000d12:	f003 ff4b 	bl	8004bac <HAL_TIM_PWM_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000d1c:	f7ff fe46 	bl	80009ac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000d20:	4803      	ldr	r0, [pc, #12]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000d22:	f000 f869 	bl	8000df8 <HAL_TIM_MspPostInit>

}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200010e0 	.word	0x200010e0
 8000d34:	40000400 	.word	0x40000400

08000d38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d58:	d128      	bne.n	8000dac <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	61d3      	str	r3, [r2, #28]
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da8:	f002 f8a2 	bl	8002ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	; 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_TIM_PWM_MspInit+0x38>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d10b      	bne.n	8000de2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40000400 	.word	0x40000400
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a1f      	ldr	r2, [pc, #124]	; (8000e94 <HAL_TIM_MspPostInit+0x9c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d138      	bne.n	8000e8c <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <HAL_TIM_MspPostInit+0xa0>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <HAL_TIM_MspPostInit+0xa0>)
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e24:	6153      	str	r3, [r2, #20]
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <HAL_TIM_MspPostInit+0xa0>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_TIM_MspPostInit+0xa0>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <HAL_TIM_MspPostInit+0xa0>)
 8000e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_TIM_MspPostInit+0xa0>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e4a:	23c0      	movs	r3, #192	; 0xc0
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f002 f842 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <HAL_TIM_MspPostInit+0xa4>)
 8000e88:	f002 f832 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40000400 	.word	0x40000400
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	48000400 	.word	0x48000400

08000ea0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ea6:	4a15      	ldr	r2, [pc, #84]	; (8000efc <MX_USART2_UART_Init+0x5c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ee4:	f004 fb4c 	bl	8005580 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eee:	f7ff fd5d 	bl	80009ac <Error_Handler>
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20001160 	.word	0x20001160
 8000efc:	40004400 	.word	0x40004400

08000f00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <HAL_UART_MspInit+0x90>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d131      	bne.n	8000f86 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <HAL_UART_MspInit+0x94>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <HAL_UART_MspInit+0x94>)
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_UART_MspInit+0x94>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_UART_MspInit+0x94>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <HAL_UART_MspInit+0x94>)
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	6153      	str	r3, [r2, #20]
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <HAL_UART_MspInit+0x94>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8000f52:	f248 0304 	movw	r3, #32772	; 0x8004
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f64:	2307      	movs	r3, #7
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f001 ffbd 	bl	8002ef0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2105      	movs	r1, #5
 8000f7a:	2026      	movs	r0, #38	; 0x26
 8000f7c:	f001 ff50 	bl	8002e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f80:	2026      	movs	r0, #38	; 0x26
 8000f82:	f001 ff69 	bl	8002e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40004400 	.word	0x40004400
 8000f94:	40021000 	.word	0x40021000

08000f98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f9e:	e003      	b.n	8000fa8 <LoopCopyDataInit>

08000fa0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fa2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fa4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fa6:	3104      	adds	r1, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fa8:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fb0:	d3f6      	bcc.n	8000fa0 <CopyDataInit>
	ldr	r2, =_sbss
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fb4:	e002      	b.n	8000fbc <LoopFillZerobss>

08000fb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fb8:	f842 3b04 	str.w	r3, [r2], #4

08000fbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <LoopForever+0x16>)
	cmp	r2, r3
 8000fbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fc0:	d3f9      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fc2:	f7ff fdd3 	bl	8000b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f006 f9e3 	bl	8007390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fca:	f7ff fc67 	bl	800089c <main>

08000fce <LoopForever>:

LoopForever:
    b LoopForever
 8000fce:	e7fe      	b.n	8000fce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fd0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000fd4:	08007498 	.word	0x08007498
	ldr	r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fdc:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000fe0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000fe4:	200011e4 	.word	0x200011e4

08000fe8 <CAN_SCE_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <CAN_SCE_IRQHandler>
	...

08000fec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_Init+0x28>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <HAL_Init+0x28>)
 8000ff6:	f043 0310 	orr.w	r3, r3, #16
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f001 ff04 	bl	8002e0a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fd02 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001008:	f7ff fcd8 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40022000 	.word	0x40022000

08001018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008
 800103c:	200011e0 	.word	0x200011e0

08001040 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;  
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200011e0 	.word	0x200011e0

08001058 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b09a      	sub	sp, #104	; 0x68
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e172      	b.n	800139a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d176      	bne.n	80011b4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d152      	bne.n	8001174 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff f977 	bl	80003dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d13b      	bne.n	8001174 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f001 fa49 	bl	8002594 <ADC_Disable>
 8001102:	4603      	mov	r3, r0
 8001104:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	2b00      	cmp	r3, #0
 8001112:	d12f      	bne.n	8001174 <HAL_ADC_Init+0xe0>
 8001114:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001118:	2b00      	cmp	r3, #0
 800111a:	d12b      	bne.n	8001174 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001124:	f023 0302 	bic.w	r3, r3, #2
 8001128:	f043 0202 	orr.w	r2, r3, #2
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800113e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800114e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001150:	4b94      	ldr	r3, [pc, #592]	; (80013a4 <HAL_ADC_Init+0x310>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a94      	ldr	r2, [pc, #592]	; (80013a8 <HAL_ADC_Init+0x314>)
 8001156:	fba2 2303 	umull	r2, r3, r2, r3
 800115a:	0c9a      	lsrs	r2, r3, #18
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001166:	e002      	b.n	800116e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3b01      	subs	r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f9      	bne.n	8001168 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d007      	beq.n	8001192 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800118c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001190:	d110      	bne.n	80011b4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f023 0312 	bic.w	r3, r3, #18
 800119a:	f043 0210 	orr.w	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f043 0201 	orr.w	r2, r3, #1
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f040 80df 	bne.w	8001380 <HAL_ADC_Init+0x2ec>
 80011c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 80da 	bne.w	8001380 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f040 80d2 	bne.w	8001380 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011e4:	f043 0202 	orr.w	r2, r3, #2
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011ec:	4b6f      	ldr	r3, [pc, #444]	; (80013ac <HAL_ADC_Init+0x318>)
 80011ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011f8:	d102      	bne.n	8001200 <HAL_ADC_Init+0x16c>
 80011fa:	4b6d      	ldr	r3, [pc, #436]	; (80013b0 <HAL_ADC_Init+0x31c>)
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	e002      	b.n	8001206 <HAL_ADC_Init+0x172>
 8001200:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001204:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b01      	cmp	r3, #1
 8001212:	d108      	bne.n	8001226 <HAL_ADC_Init+0x192>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b01      	cmp	r3, #1
 8001220:	d101      	bne.n	8001226 <HAL_ADC_Init+0x192>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <HAL_ADC_Init+0x194>
 8001226:	2300      	movs	r3, #0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d11c      	bne.n	8001266 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800122c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800122e:	2b00      	cmp	r3, #0
 8001230:	d010      	beq.n	8001254 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d107      	bne.n	800124e <HAL_ADC_Init+0x1ba>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b01      	cmp	r3, #1
 8001248:	d101      	bne.n	800124e <HAL_ADC_Init+0x1ba>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_ADC_Init+0x1bc>
 800124e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001250:	2b00      	cmp	r3, #0
 8001252:	d108      	bne.n	8001266 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	431a      	orrs	r2, r3
 8001262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001264:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	7e5b      	ldrb	r3, [r3, #25]
 800126a:	035b      	lsls	r3, r3, #13
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001270:	2a01      	cmp	r2, #1
 8001272:	d002      	beq.n	800127a <HAL_ADC_Init+0x1e6>
 8001274:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001278:	e000      	b.n	800127c <HAL_ADC_Init+0x1e8>
 800127a:	2200      	movs	r2, #0
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4313      	orrs	r3, r2
 800128a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800128c:	4313      	orrs	r3, r2
 800128e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d11b      	bne.n	80012d2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7e5b      	ldrb	r3, [r3, #25]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	3b01      	subs	r3, #1
 80012a8:	045a      	lsls	r2, r3, #17
 80012aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012ac:	4313      	orrs	r3, r2
 80012ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b2:	663b      	str	r3, [r7, #96]	; 0x60
 80012b4:	e00d      	b.n	80012d2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80012be:	f043 0220 	orr.w	r2, r3, #32
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f043 0201 	orr.w	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d007      	beq.n	80012ea <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	4313      	orrs	r3, r2
 80012e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012e6:	4313      	orrs	r3, r2
 80012e8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d114      	bne.n	8001322 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001306:	f023 0302 	bic.w	r3, r3, #2
 800130a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7e1b      	ldrb	r3, [r3, #24]
 8001310:	039a      	lsls	r2, r3, #14
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4313      	orrs	r3, r2
 800131c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800131e:	4313      	orrs	r3, r2
 8001320:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <HAL_ADC_Init+0x320>)
 800132a:	4013      	ands	r3, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001332:	430b      	orrs	r3, r1
 8001334:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d10c      	bne.n	8001358 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	f023 010f 	bic.w	r1, r3, #15
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	1e5a      	subs	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	631a      	str	r2, [r3, #48]	; 0x30
 8001356:	e007      	b.n	8001368 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 020f 	bic.w	r2, r2, #15
 8001366:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f023 0303 	bic.w	r3, r3, #3
 8001376:	f043 0201 	orr.w	r2, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
 800137e:	e00a      	b.n	8001396 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f023 0312 	bic.w	r3, r3, #18
 8001388:	f043 0210 	orr.w	r2, r3, #16
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001390:	2301      	movs	r3, #1
 8001392:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001396:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800139a:	4618      	mov	r0, r3
 800139c:	3768      	adds	r7, #104	; 0x68
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000000 	.word	0x20000000
 80013a8:	431bde83 	.word	0x431bde83
 80013ac:	50000300 	.word	0x50000300
 80013b0:	50000100 	.word	0x50000100
 80013b4:	fff0c007 	.word	0xfff0c007

080013b8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d106      	bne.n	80013e8 <HAL_ADC_IRQHandler+0x30>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d00d      	beq.n	8001404 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d17a      	bne.n	80014ec <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b08      	cmp	r3, #8
 8001402:	d173      	bne.n	80014ec <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	2b00      	cmp	r3, #0
 800140e:	d105      	bne.n	800141c <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800141c:	4b88      	ldr	r3, [pc, #544]	; (8001640 <HAL_ADC_IRQHandler+0x288>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	2b00      	cmp	r3, #0
 8001426:	d010      	beq.n	800144a <HAL_ADC_IRQHandler+0x92>
 8001428:	4b85      	ldr	r3, [pc, #532]	; (8001640 <HAL_ADC_IRQHandler+0x288>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	2b05      	cmp	r3, #5
 8001432:	d00a      	beq.n	800144a <HAL_ADC_IRQHandler+0x92>
 8001434:	4b82      	ldr	r3, [pc, #520]	; (8001640 <HAL_ADC_IRQHandler+0x288>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 031f 	and.w	r3, r3, #31
 800143c:	2b09      	cmp	r3, #9
 800143e:	d004      	beq.n	800144a <HAL_ADC_IRQHandler+0x92>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001448:	d104      	bne.n	8001454 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	e003      	b.n	800145c <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001454:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001466:	2b00      	cmp	r3, #0
 8001468:	d139      	bne.n	80014de <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001470:	2b00      	cmp	r3, #0
 8001472:	d134      	bne.n	80014de <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b08      	cmp	r3, #8
 8001480:	d12d      	bne.n	80014de <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d11a      	bne.n	80014c6 <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 020c 	bic.w	r2, r2, #12
 800149e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d112      	bne.n	80014de <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	641a      	str	r2, [r3, #64]	; 0x40
 80014c4:	e00b      	b.n	80014de <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f043 0210 	orr.w	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f043 0201 	orr.w	r2, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fdba 	bl	8001058 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	220c      	movs	r2, #12
 80014ea:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	2b20      	cmp	r3, #32
 80014f8:	d106      	bne.n	8001508 <HAL_ADC_IRQHandler+0x150>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	2b20      	cmp	r3, #32
 8001506:	d00f      	beq.n	8001528 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001512:	2b40      	cmp	r3, #64	; 0x40
 8001514:	f040 80a9 	bne.w	800166a <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001522:	2b40      	cmp	r3, #64	; 0x40
 8001524:	f040 80a1 	bne.w	800166a <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001534:	4b42      	ldr	r3, [pc, #264]	; (8001640 <HAL_ADC_IRQHandler+0x288>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	2b00      	cmp	r3, #0
 800153e:	d010      	beq.n	8001562 <HAL_ADC_IRQHandler+0x1aa>
 8001540:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <HAL_ADC_IRQHandler+0x288>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	2b05      	cmp	r3, #5
 800154a:	d00a      	beq.n	8001562 <HAL_ADC_IRQHandler+0x1aa>
 800154c:	4b3c      	ldr	r3, [pc, #240]	; (8001640 <HAL_ADC_IRQHandler+0x288>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 031f 	and.w	r3, r3, #31
 8001554:	2b09      	cmp	r3, #9
 8001556:	d004      	beq.n	8001562 <HAL_ADC_IRQHandler+0x1aa>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001560:	d104      	bne.n	800156c <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	e003      	b.n	8001574 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800156c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d010      	beq.n	80015a4 <HAL_ADC_IRQHandler+0x1ec>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8001588:	2b00      	cmp	r3, #0
 800158a:	d167      	bne.n	800165c <HAL_ADC_IRQHandler+0x2a4>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8001596:	2b00      	cmp	r3, #0
 8001598:	d160      	bne.n	800165c <HAL_ADC_IRQHandler+0x2a4>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d15b      	bne.n	800165c <HAL_ADC_IRQHandler+0x2a4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ae:	2b40      	cmp	r3, #64	; 0x40
 80015b0:	d154      	bne.n	800165c <HAL_ADC_IRQHandler+0x2a4>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80015b2:	4b23      	ldr	r3, [pc, #140]	; (8001640 <HAL_ADC_IRQHandler+0x288>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d010      	beq.n	80015e0 <HAL_ADC_IRQHandler+0x228>
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_ADC_IRQHandler+0x288>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d00a      	beq.n	80015e0 <HAL_ADC_IRQHandler+0x228>
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_ADC_IRQHandler+0x288>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	2b07      	cmp	r3, #7
 80015d4:	d004      	beq.n	80015e0 <HAL_ADC_IRQHandler+0x228>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015de:	d104      	bne.n	80015ea <HAL_ADC_IRQHandler+0x232>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	e003      	b.n	80015f2 <HAL_ADC_IRQHandler+0x23a>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80015ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d12f      	bne.n	800165c <HAL_ADC_IRQHandler+0x2a4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d11c      	bne.n	8001644 <HAL_ADC_IRQHandler+0x28c>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001618:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d114      	bne.n	800165c <HAL_ADC_IRQHandler+0x2a4>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f043 0201 	orr.w	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
 800163e:	e00d      	b.n	800165c <HAL_ADC_IRQHandler+0x2a4>
 8001640:	50000300 	.word	0x50000300
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f043 0210 	orr.w	r2, r3, #16
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001654:	f043 0201 	orr.w	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f8cb 	bl	80017f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2260      	movs	r2, #96	; 0x60
 8001668:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001674:	2b80      	cmp	r3, #128	; 0x80
 8001676:	d113      	bne.n	80016a0 <HAL_ADC_IRQHandler+0x2e8>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001682:	2b80      	cmp	r3, #128	; 0x80
 8001684:	d10c      	bne.n	80016a0 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fcea 	bl	800106c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2280      	movs	r2, #128	; 0x80
 800169e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ae:	d115      	bne.n	80016dc <HAL_ADC_IRQHandler+0x324>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016be:	d10d      	bne.n	80016dc <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f8a7 	bl	8001820 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016da:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ea:	d115      	bne.n	8001718 <HAL_ADC_IRQHandler+0x360>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016fa:	d10d      	bne.n	8001718 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f893 	bl	8001834 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001716:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2b10      	cmp	r3, #16
 8001724:	d13d      	bne.n	80017a2 <HAL_ADC_IRQHandler+0x3ea>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	2b10      	cmp	r3, #16
 8001732:	d136      	bne.n	80017a2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001738:	2b01      	cmp	r3, #1
 800173a:	d102      	bne.n	8001742 <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 800173c:	2301      	movs	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e019      	b.n	8001776 <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <HAL_ADC_IRQHandler+0x43c>)
 8001744:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b01      	cmp	r3, #1
 800175e:	d10a      	bne.n	8001776 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 8001760:	2301      	movs	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	e007      	b.n	8001776 <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 8001772:	2301      	movs	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d10e      	bne.n	800179a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178c:	f043 0202 	orr.w	r2, r3, #2
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fc73 	bl	8001080 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2210      	movs	r2, #16
 80017a0:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b0:	d11b      	bne.n	80017ea <HAL_ADC_IRQHandler+0x432>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c0:	d113      	bne.n	80017ea <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f043 0208 	orr.w	r2, r3, #8
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f811 	bl	800180c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	50000300 	.word	0x50000300

080017f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001848:	b480      	push	{r7}
 800184a:	b09b      	sub	sp, #108	; 0x6c
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_ADC_ConfigChannel+0x22>
 8001866:	2302      	movs	r3, #2
 8001868:	e2a5      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x56e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	f040 8289 	bne.w	8001d94 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b04      	cmp	r3, #4
 8001888:	d81c      	bhi.n	80018c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	461a      	mov	r2, r3
 800189e:	231f      	movs	r3, #31
 80018a0:	4093      	lsls	r3, r2
 80018a2:	43db      	mvns	r3, r3
 80018a4:	4019      	ands	r1, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	631a      	str	r2, [r3, #48]	; 0x30
 80018c2:	e063      	b.n	800198c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b09      	cmp	r3, #9
 80018ca:	d81e      	bhi.n	800190a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	3b1e      	subs	r3, #30
 80018e0:	221f      	movs	r2, #31
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	4019      	ands	r1, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	3b1e      	subs	r3, #30
 80018fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	635a      	str	r2, [r3, #52]	; 0x34
 8001908:	e040      	b.n	800198c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b0e      	cmp	r3, #14
 8001910:	d81e      	bhi.n	8001950 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	3b3c      	subs	r3, #60	; 0x3c
 8001926:	221f      	movs	r2, #31
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	4019      	ands	r1, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	3b3c      	subs	r3, #60	; 0x3c
 8001942:	fa00 f203 	lsl.w	r2, r0, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	639a      	str	r2, [r3, #56]	; 0x38
 800194e:	e01d      	b.n	800198c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	3b5a      	subs	r3, #90	; 0x5a
 8001964:	221f      	movs	r2, #31
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	4019      	ands	r1, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	3b5a      	subs	r3, #90	; 0x5a
 8001980:	fa00 f203 	lsl.w	r2, r0, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 80e5 	bne.w	8001b66 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	d91c      	bls.n	80019de <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6999      	ldr	r1, [r3, #24]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	3b1e      	subs	r3, #30
 80019b6:	2207      	movs	r2, #7
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	4019      	ands	r1, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	6898      	ldr	r0, [r3, #8]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	3b1e      	subs	r3, #30
 80019d0:	fa00 f203 	lsl.w	r2, r0, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	619a      	str	r2, [r3, #24]
 80019dc:	e019      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6959      	ldr	r1, [r3, #20]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	2207      	movs	r2, #7
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4019      	ands	r1, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6898      	ldr	r0, [r3, #8]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	fa00 f203 	lsl.w	r2, r0, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	08db      	lsrs	r3, r3, #3
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d84f      	bhi.n	8001ad4 <HAL_ADC_ConfigChannel+0x28c>
 8001a34:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <HAL_ADC_ConfigChannel+0x1f4>)
 8001a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3a:	bf00      	nop
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001a6f 	.word	0x08001a6f
 8001a44:	08001a91 	.word	0x08001a91
 8001a48:	08001ab3 	.word	0x08001ab3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a52:	4b9e      	ldr	r3, [pc, #632]	; (8001ccc <HAL_ADC_ConfigChannel+0x484>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	0691      	lsls	r1, r2, #26
 8001a5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a6a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a6c:	e07e      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a74:	4b95      	ldr	r3, [pc, #596]	; (8001ccc <HAL_ADC_ConfigChannel+0x484>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	0691      	lsls	r1, r2, #26
 8001a7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a80:	430a      	orrs	r2, r1
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a8c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a8e:	e06d      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a96:	4b8d      	ldr	r3, [pc, #564]	; (8001ccc <HAL_ADC_ConfigChannel+0x484>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	0691      	lsls	r1, r2, #26
 8001aa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001aae:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ab0:	e05c      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ab8:	4b84      	ldr	r3, [pc, #528]	; (8001ccc <HAL_ADC_ConfigChannel+0x484>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	0691      	lsls	r1, r2, #26
 8001ac2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ad0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ad2:	e04b      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	069b      	lsls	r3, r3, #26
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d107      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001af6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	069b      	lsls	r3, r3, #26
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d107      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b1a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	069b      	lsls	r3, r3, #26
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d107      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b3e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	069b      	lsls	r3, r3, #26
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d10a      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b62:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b64:	e001      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001b66:	bf00      	nop
 8001b68:	e000      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x324>
      break;
 8001b6a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d108      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x344>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x344>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x346>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 810b 	bne.w	8001daa <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d00f      	beq.n	8001bbc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001bba:	e049      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b09      	cmp	r3, #9
 8001bdc:	d91c      	bls.n	8001c18 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6999      	ldr	r1, [r3, #24]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	3b1b      	subs	r3, #27
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	4019      	ands	r1, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6898      	ldr	r0, [r3, #8]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	3b1b      	subs	r3, #27
 8001c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	619a      	str	r2, [r3, #24]
 8001c16:	e01b      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6959      	ldr	r1, [r3, #20]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	4019      	ands	r1, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6898      	ldr	r0, [r3, #8]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	fa00 f203 	lsl.w	r2, r0, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <HAL_ADC_ConfigChannel+0x488>)
 8001c52:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d105      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d015      	beq.n	8001c94 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c6c:	2b11      	cmp	r3, #17
 8001c6e:	d105      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00b      	beq.n	8001c94 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c80:	2b12      	cmp	r3, #18
 8001c82:	f040 8092 	bne.w	8001daa <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f040 808b 	bne.w	8001daa <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c9c:	d102      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x45c>
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_ADC_ConfigChannel+0x48c>)
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	e002      	b.n	8001caa <HAL_ADC_ConfigChannel+0x462>
 8001ca4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ca8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10f      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x490>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d108      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x490>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e007      	b.n	8001cda <HAL_ADC_ConfigChannel+0x492>
 8001cca:	bf00      	nop
 8001ccc:	83fff000 	.word	0x83fff000
 8001cd0:	50000300 	.word	0x50000300
 8001cd4:	50000100 	.word	0x50000100
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d150      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cde:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d010      	beq.n	8001d06 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d107      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x4b8>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x4b8>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x4ba>
 8001d00:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d13c      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d11d      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x502>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d16:	d118      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d22:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_ADC_ConfigChannel+0x57c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a27      	ldr	r2, [pc, #156]	; (8001dc8 <HAL_ADC_ConfigChannel+0x580>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	0c9a      	lsrs	r2, r3, #18
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d3a:	e002      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f9      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d48:	e02e      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b11      	cmp	r3, #17
 8001d50:	d10b      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x522>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d5a:	d106      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d66:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d68:	e01e      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b12      	cmp	r3, #18
 8001d70:	d11a      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d7c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d7e:	e013      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f043 0220 	orr.w	r2, r3, #32
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d92:	e00a      	b.n	8001daa <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f043 0220 	orr.w	r2, r3, #32
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001da6:	e000      	b.n	8001daa <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001da8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001db2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	376c      	adds	r7, #108	; 0x6c
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	431bde83 	.word	0x431bde83

08001dcc <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b09d      	sub	sp, #116	; 0x74
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_ADCEx_InjectedConfigChannel+0x26>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e2ff      	b.n	80023f2 <HAL_ADCEx_InjectedConfigChannel+0x626>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d132      	bne.n	8001e70 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d124      	bne.n	8001e5c <HAL_ADCEx_InjectedConfigChannel+0x90>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d00c      	beq.n	8001e34 <HAL_ADCEx_InjectedConfigChannel+0x68>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	021a      	lsls	r2, r3, #8
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e32:	e005      	b.n	8001e40 <HAL_ADCEx_InjectedConfigChannel+0x74>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e46:	4b9c      	ldr	r3, [pc, #624]	; (80020b8 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001e50:	430b      	orrs	r3, r1
 8001e52:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e58:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001e5a:	e060      	b.n	8001f1e <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f043 0220 	orr.w	r2, r3, #32
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001e6e:	e056      	b.n	8001f1e <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d121      	bne.n	8001ebc <HAL_ADCEx_InjectedConfigChannel+0xf0>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	699a      	ldr	r2, [r3, #24]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d00e      	beq.n	8001eac <HAL_ADCEx_InjectedConfigChannel+0xe0>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	1e59      	subs	r1, r3, #1
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4319      	orrs	r1, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	430b      	orrs	r3, r1
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	649a      	str	r2, [r3, #72]	; 0x48
 8001eaa:	e007      	b.n	8001ebc <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	3302      	adds	r3, #2
 8001ece:	221f      	movs	r2, #31
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4019      	ands	r1, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	3302      	adds	r3, #2
 8001eea:	fa00 f303 	lsl.w	r3, r0, r3
 8001eee:	ea41 0203 	orr.w	r2, r1, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	1e5a      	subs	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10a      	bne.n	8001f1e <HAL_ADCEx_InjectedConfigChannel+0x152>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f0e:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	430b      	orrs	r3, r1
 8001f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d12d      	bne.n	8001f88 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	7f5b      	ldrb	r3, [r3, #29]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d110      	bne.n	8001f56 <HAL_ADCEx_InjectedConfigChannel+0x18a>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	7f9b      	ldrb	r3, [r3, #30]
 8001f42:	055a      	lsls	r2, r3, #21
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	7f1b      	ldrb	r3, [r3, #28]
 8001f48:	051b      	lsls	r3, r3, #20
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	e018      	b.n	8001f88 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	7f9b      	ldrb	r3, [r3, #30]
 8001f64:	055a      	lsls	r2, r3, #21
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7f1b      	ldrb	r3, [r3, #28]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d108      	bne.n	8001f88 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f043 0220 	orr.w	r2, r3, #32
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 8110 	bne.w	80021b8 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d10c      	bne.n	8001fba <HAL_ADCEx_InjectedConfigChannel+0x1ee>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	7f5b      	ldrb	r3, [r3, #29]
 8001fae:	065a      	lsls	r2, r3, #25
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	e014      	b.n	8001fe4 <HAL_ADCEx_InjectedConfigChannel+0x218>
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001fc8:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	7f5b      	ldrb	r3, [r3, #29]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d108      	bne.n	8001fe4 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f043 0220 	orr.w	r2, r3, #32
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b09      	cmp	r3, #9
 8001fea:	d91c      	bls.n	8002026 <HAL_ADCEx_InjectedConfigChannel+0x25a>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6999      	ldr	r1, [r3, #24]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b1e      	subs	r3, #30
 8001ffe:	2207      	movs	r2, #7
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	4019      	ands	r1, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6898      	ldr	r0, [r3, #8]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	3b1e      	subs	r3, #30
 8002018:	fa00 f203 	lsl.w	r2, r0, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	619a      	str	r2, [r3, #24]
 8002024:	e019      	b.n	800205a <HAL_ADCEx_InjectedConfigChannel+0x28e>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6959      	ldr	r1, [r3, #20]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	2207      	movs	r2, #7
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	4019      	ands	r1, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	6898      	ldr	r0, [r3, #8]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	fa00 f203 	lsl.w	r2, r0, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	08db      	lsrs	r3, r3, #3
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	3b01      	subs	r3, #1
 8002078:	2b03      	cmp	r3, #3
 800207a:	d854      	bhi.n	8002126 <HAL_ADCEx_InjectedConfigChannel+0x35a>
 800207c:	a201      	add	r2, pc, #4	; (adr r2, 8002084 <HAL_ADCEx_InjectedConfigChannel+0x2b8>)
 800207e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002082:	bf00      	nop
 8002084:	08002095 	.word	0x08002095
 8002088:	080020c1 	.word	0x080020c1
 800208c:	080020e3 	.word	0x080020e3
 8002090:	08002105 	.word	0x08002105
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 800209c:	4013      	ands	r3, r2
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	0691      	lsls	r1, r2, #26
 80020a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80020a6:	430a      	orrs	r2, r1
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020b2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80020b4:	e083      	b.n	80021be <HAL_ADCEx_InjectedConfigChannel+0x3f2>
 80020b6:	bf00      	nop
 80020b8:	82082000 	.word	0x82082000
 80020bc:	83fff000 	.word	0x83fff000
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020c6:	4b9f      	ldr	r3, [pc, #636]	; (8002344 <HAL_ADCEx_InjectedConfigChannel+0x578>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	0691      	lsls	r1, r2, #26
 80020d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80020d2:	430a      	orrs	r2, r1
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020de:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80020e0:	e06d      	b.n	80021be <HAL_ADCEx_InjectedConfigChannel+0x3f2>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020e8:	4b96      	ldr	r3, [pc, #600]	; (8002344 <HAL_ADCEx_InjectedConfigChannel+0x578>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	0691      	lsls	r1, r2, #26
 80020f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80020f4:	430a      	orrs	r2, r1
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002100:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002102:	e05c      	b.n	80021be <HAL_ADCEx_InjectedConfigChannel+0x3f2>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800210a:	4b8e      	ldr	r3, [pc, #568]	; (8002344 <HAL_ADCEx_InjectedConfigChannel+0x578>)
 800210c:	4013      	ands	r3, r2
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	0691      	lsls	r1, r2, #26
 8002114:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002116:	430a      	orrs	r2, r1
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002122:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002124:	e04b      	b.n	80021be <HAL_ADCEx_InjectedConfigChannel+0x3f2>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	069b      	lsls	r3, r3, #26
 8002136:	429a      	cmp	r2, r3
 8002138:	d107      	bne.n	800214a <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002148:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002150:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	069b      	lsls	r3, r3, #26
 800215a:	429a      	cmp	r2, r3
 800215c:	d107      	bne.n	800216e <HAL_ADCEx_InjectedConfigChannel+0x3a2>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800216c:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002174:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	069b      	lsls	r3, r3, #26
 800217e:	429a      	cmp	r2, r3
 8002180:	d107      	bne.n	8002192 <HAL_ADCEx_InjectedConfigChannel+0x3c6>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002190:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002198:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	069b      	lsls	r3, r3, #26
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d10a      	bne.n	80021bc <HAL_ADCEx_InjectedConfigChannel+0x3f0>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021b4:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80021b6:	e001      	b.n	80021bc <HAL_ADCEx_InjectedConfigChannel+0x3f0>
    }
    
  }
 80021b8:	bf00      	nop
 80021ba:	e000      	b.n	80021be <HAL_ADCEx_InjectedConfigChannel+0x3f2>
      break;
 80021bc:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d108      	bne.n	80021de <HAL_ADCEx_InjectedConfigChannel+0x412>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_ADCEx_InjectedConfigChannel+0x412>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_ADCEx_InjectedConfigChannel+0x414>
 80021de:	2300      	movs	r3, #0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f040 8100 	bne.w	80023e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d00f      	beq.n	800220e <HAL_ADCEx_InjectedConfigChannel+0x442>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2201      	movs	r2, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43da      	mvns	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	400a      	ands	r2, r1
 8002208:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800220c:	e049      	b.n	80022a2 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2201      	movs	r2, #1
 800221c:	409a      	lsls	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b09      	cmp	r3, #9
 800222e:	d91c      	bls.n	800226a <HAL_ADCEx_InjectedConfigChannel+0x49e>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6999      	ldr	r1, [r3, #24]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	3b1b      	subs	r3, #27
 8002242:	2207      	movs	r2, #7
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	4019      	ands	r1, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6898      	ldr	r0, [r3, #8]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	3b1b      	subs	r3, #27
 800225c:	fa00 f203 	lsl.w	r2, r0, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	619a      	str	r2, [r3, #24]
 8002268:	e01b      	b.n	80022a2 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6959      	ldr	r1, [r3, #20]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	2207      	movs	r2, #7
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	4019      	ands	r1, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6898      	ldr	r0, [r3, #8]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	fa00 f203 	lsl.w	r2, r0, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <HAL_ADCEx_InjectedConfigChannel+0x57c>)
 80022a4:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d105      	bne.n	80022ba <HAL_ADCEx_InjectedConfigChannel+0x4ee>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80022ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d015      	beq.n	80022e6 <HAL_ADCEx_InjectedConfigChannel+0x51a>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80022be:	2b11      	cmp	r3, #17
 80022c0:	d105      	bne.n	80022ce <HAL_ADCEx_InjectedConfigChannel+0x502>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80022c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00b      	beq.n	80022e6 <HAL_ADCEx_InjectedConfigChannel+0x51a>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80022d2:	2b12      	cmp	r3, #18
 80022d4:	f040 8087 	bne.w	80023e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80022d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f040 8080 	bne.w	80023e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ee:	d102      	bne.n	80022f6 <HAL_ADCEx_InjectedConfigChannel+0x52a>
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_ADCEx_InjectedConfigChannel+0x580>)
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	e002      	b.n	80022fc <HAL_ADCEx_InjectedConfigChannel+0x530>
 80022f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022fa:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d108      	bne.n	800231c <HAL_ADCEx_InjectedConfigChannel+0x550>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_ADCEx_InjectedConfigChannel+0x550>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_ADCEx_InjectedConfigChannel+0x552>
 800231c:	2300      	movs	r3, #0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d156      	bne.n	80023d0 <HAL_ADCEx_InjectedConfigChannel+0x604>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002322:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002324:	2b00      	cmp	r3, #0
 8002326:	d016      	beq.n	8002356 <HAL_ADCEx_InjectedConfigChannel+0x58a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d10d      	bne.n	8002350 <HAL_ADCEx_InjectedConfigChannel+0x584>
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b01      	cmp	r3, #1
 800233e:	d107      	bne.n	8002350 <HAL_ADCEx_InjectedConfigChannel+0x584>
 8002340:	2301      	movs	r3, #1
 8002342:	e006      	b.n	8002352 <HAL_ADCEx_InjectedConfigChannel+0x586>
 8002344:	83fff000 	.word	0x83fff000
 8002348:	50000300 	.word	0x50000300
 800234c:	50000100 	.word	0x50000100
 8002350:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002352:	2b00      	cmp	r3, #0
 8002354:	d13c      	bne.n	80023d0 <HAL_ADCEx_InjectedConfigChannel+0x604>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b10      	cmp	r3, #16
 800235c:	d11d      	bne.n	800239a <HAL_ADCEx_InjectedConfigChannel+0x5ce>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002366:	d118      	bne.n	800239a <HAL_ADCEx_InjectedConfigChannel+0x5ce>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002372:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002374:	4b22      	ldr	r3, [pc, #136]	; (8002400 <HAL_ADCEx_InjectedConfigChannel+0x634>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a22      	ldr	r2, [pc, #136]	; (8002404 <HAL_ADCEx_InjectedConfigChannel+0x638>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	0c9a      	lsrs	r2, r3, #18
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800238a:	e002      	b.n	8002392 <HAL_ADCEx_InjectedConfigChannel+0x5c6>
          {
            wait_loop_index--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3b01      	subs	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f9      	bne.n	800238c <HAL_ADCEx_InjectedConfigChannel+0x5c0>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002398:	e024      	b.n	80023e4 <HAL_ADCEx_InjectedConfigChannel+0x618>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b11      	cmp	r3, #17
 80023a0:	d10b      	bne.n	80023ba <HAL_ADCEx_InjectedConfigChannel+0x5ee>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023aa:	d106      	bne.n	80023ba <HAL_ADCEx_InjectedConfigChannel+0x5ee>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80023ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80023b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023b6:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023b8:	e014      	b.n	80023e4 <HAL_ADCEx_InjectedConfigChannel+0x618>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b12      	cmp	r3, #18
 80023c0:	d110      	bne.n	80023e4 <HAL_ADCEx_InjectedConfigChannel+0x618>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80023c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023cc:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023ce:	e009      	b.n	80023e4 <HAL_ADCEx_InjectedConfigChannel+0x618>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80023e2:	e000      	b.n	80023e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023e4:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3774      	adds	r7, #116	; 0x74
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000000 	.word	0x20000000
 8002404:	431bde83 	.word	0x431bde83

08002408 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002408:	b480      	push	{r7}
 800240a:	b099      	sub	sp, #100	; 0x64
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002420:	d102      	bne.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002422:	4b5a      	ldr	r3, [pc, #360]	; (800258c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	e002      	b.n	800242e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002428:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800242c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0a2      	b.n	800257e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002442:	2302      	movs	r3, #2
 8002444:	e09b      	b.n	800257e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d17f      	bne.n	800255c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d179      	bne.n	800255c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002468:	4b49      	ldr	r3, [pc, #292]	; (8002590 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800246a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d040      	beq.n	80024f6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002486:	035b      	lsls	r3, r3, #13
 8002488:	430b      	orrs	r3, r1
 800248a:	431a      	orrs	r2, r3
 800248c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800248e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d108      	bne.n	80024b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80024b0:	2300      	movs	r3, #0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d15c      	bne.n	8002570 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80024d2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d14b      	bne.n	8002570 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80024d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024e0:	f023 030f 	bic.w	r3, r3, #15
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	6811      	ldr	r1, [r2, #0]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	6892      	ldr	r2, [r2, #8]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	431a      	orrs	r2, r3
 80024f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024f4:	e03c      	b.n	8002570 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002500:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d108      	bne.n	8002522 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002522:	2300      	movs	r3, #0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d123      	bne.n	8002570 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d107      	bne.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002544:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002546:	2b00      	cmp	r3, #0
 8002548:	d112      	bne.n	8002570 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800254a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002552:	f023 030f 	bic.w	r3, r3, #15
 8002556:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002558:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800255a:	e009      	b.n	8002570 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f043 0220 	orr.w	r2, r3, #32
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800256e:	e000      	b.n	8002572 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002570:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800257a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800257e:	4618      	mov	r0, r3
 8002580:	3764      	adds	r7, #100	; 0x64
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	50000100 	.word	0x50000100
 8002590:	50000300 	.word	0x50000300

08002594 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d108      	bne.n	80025c0 <ADC_Disable+0x2c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <ADC_Disable+0x2c>
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <ADC_Disable+0x2e>
 80025c0:	2300      	movs	r3, #0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d040      	beq.n	8002648 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030d 	and.w	r3, r3, #13
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d10f      	bne.n	80025f4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0202 	orr.w	r2, r2, #2
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2203      	movs	r2, #3
 80025ea:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80025ec:	f7fe fd28 	bl	8001040 <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025f2:	e022      	b.n	800263a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f043 0210 	orr.w	r2, r3, #16
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e01c      	b.n	800264a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002610:	f7fe fd16 	bl	8001040 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d90d      	bls.n	800263a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f043 0210 	orr.w	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e007      	b.n	800264a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d0e3      	beq.n	8002610 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0ed      	b.n	8002840 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7fd ff77 	bl	8000564 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0202 	bic.w	r2, r2, #2
 8002684:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002686:	f7fe fcdb 	bl	8001040 <HAL_GetTick>
 800268a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800268c:	e012      	b.n	80026b4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800268e:	f7fe fcd7 	bl	8001040 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b0a      	cmp	r3, #10
 800269a:	d90b      	bls.n	80026b4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2205      	movs	r2, #5
 80026ac:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0c5      	b.n	8002840 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1e5      	bne.n	800268e <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026d2:	f7fe fcb5 	bl	8001040 <HAL_GetTick>
 80026d6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026d8:	e012      	b.n	8002700 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026da:	f7fe fcb1 	bl	8001040 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b0a      	cmp	r3, #10
 80026e6:	d90b      	bls.n	8002700 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2205      	movs	r2, #5
 80026f8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e09f      	b.n	8002840 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0e5      	beq.n	80026da <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7e1b      	ldrb	r3, [r3, #24]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d108      	bne.n	8002728 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e007      	b.n	8002738 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002736:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7e5b      	ldrb	r3, [r3, #25]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d108      	bne.n	8002752 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e007      	b.n	8002762 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002760:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	7e9b      	ldrb	r3, [r3, #26]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d108      	bne.n	800277c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0220 	orr.w	r2, r2, #32
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e007      	b.n	800278c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0220 	bic.w	r2, r2, #32
 800278a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7edb      	ldrb	r3, [r3, #27]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d108      	bne.n	80027a6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0210 	bic.w	r2, r2, #16
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e007      	b.n	80027b6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0210 	orr.w	r2, r2, #16
 80027b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7f1b      	ldrb	r3, [r3, #28]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d108      	bne.n	80027d0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0208 	orr.w	r2, r2, #8
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	e007      	b.n	80027e0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0208 	bic.w	r2, r2, #8
 80027de:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	7f5b      	ldrb	r3, [r3, #29]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d108      	bne.n	80027fa <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0204 	orr.w	r2, r2, #4
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	e007      	b.n	800280a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0204 	bic.w	r2, r2, #4
 8002808:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	ea42 0103 	orr.w	r1, r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	1e5a      	subs	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d07c      	beq.n	8002988 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d023      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2201      	movs	r2, #1
 800289e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f97d 	bl	8002baa <HAL_CAN_TxMailbox0CompleteCallback>
 80028b0:	e016      	b.n	80028e0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
 80028c4:	e00c      	b.n	80028e0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d004      	beq.n	80028da <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
 80028d8:	e002      	b.n	80028e0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f983 	bl	8002be6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d024      	beq.n	8002934 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f95d 	bl	8002bbe <HAL_CAN_TxMailbox1CompleteCallback>
 8002904:	e016      	b.n	8002934 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290c:	2b00      	cmp	r3, #0
 800290e:	d004      	beq.n	800291a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
 8002918:	e00c      	b.n	8002934 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	e002      	b.n	8002934 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f963 	bl	8002bfa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d024      	beq.n	8002988 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002946:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f93d 	bl	8002bd2 <HAL_CAN_TxMailbox2CompleteCallback>
 8002958:	e016      	b.n	8002988 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
 800296c:	e00c      	b.n	8002988 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	e002      	b.n	8002988 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f943 	bl	8002c0e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00c      	beq.n	80029ac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b00      	cmp	r3, #0
 800299a:	d007      	beq.n	80029ac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2210      	movs	r2, #16
 80029aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d006      	beq.n	80029ce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2208      	movs	r2, #8
 80029c6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f934 	bl	8002c36 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f91b 	bl	8002c22 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d006      	beq.n	8002a32 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2208      	movs	r2, #8
 8002a2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f916 	bl	8002c5e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d009      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f8fd 	bl	8002c4a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d006      	beq.n	8002a72 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2210      	movs	r2, #16
 8002a6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f900 	bl	8002c72 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00b      	beq.n	8002a94 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d006      	beq.n	8002a94 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f8f9 	bl	8002c86 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d075      	beq.n	8002b8a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d06c      	beq.n	8002b82 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d03d      	beq.n	8002b82 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d038      	beq.n	8002b82 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b16:	2b30      	cmp	r3, #48	; 0x30
 8002b18:	d017      	beq.n	8002b4a <HAL_CAN_IRQHandler+0x302>
 8002b1a:	2b30      	cmp	r3, #48	; 0x30
 8002b1c:	d804      	bhi.n	8002b28 <HAL_CAN_IRQHandler+0x2e0>
 8002b1e:	2b10      	cmp	r3, #16
 8002b20:	d009      	beq.n	8002b36 <HAL_CAN_IRQHandler+0x2ee>
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d00c      	beq.n	8002b40 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b26:	e024      	b.n	8002b72 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002b28:	2b50      	cmp	r3, #80	; 0x50
 8002b2a:	d018      	beq.n	8002b5e <HAL_CAN_IRQHandler+0x316>
 8002b2c:	2b60      	cmp	r3, #96	; 0x60
 8002b2e:	d01b      	beq.n	8002b68 <HAL_CAN_IRQHandler+0x320>
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d00f      	beq.n	8002b54 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002b34:	e01d      	b.n	8002b72 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	f043 0308 	orr.w	r3, r3, #8
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b3e:	e018      	b.n	8002b72 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	f043 0310 	orr.w	r3, r3, #16
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b48:	e013      	b.n	8002b72 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	f043 0320 	orr.w	r3, r3, #32
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b52:	e00e      	b.n	8002b72 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b5c:	e009      	b.n	8002b72 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b66:	e004      	b.n	8002b72 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b70:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699a      	ldr	r2, [r3, #24]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b80:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2204      	movs	r2, #4
 8002b88:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f87c 	bl	8002c9a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3728      	adds	r7, #40	; 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce2:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	60d3      	str	r3, [r2, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <__NVIC_GetPriorityGrouping+0x18>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	f003 0307 	and.w	r3, r3, #7
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	db0b      	blt.n	8002d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	4907      	ldr	r1, [pc, #28]	; (8002d4c <__NVIC_EnableIRQ+0x38>)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2001      	movs	r0, #1
 8002d36:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000e100 	.word	0xe000e100

08002d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	6039      	str	r1, [r7, #0]
 8002d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	db0a      	blt.n	8002d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	490c      	ldr	r1, [pc, #48]	; (8002d9c <__NVIC_SetPriority+0x4c>)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	0112      	lsls	r2, r2, #4
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	440b      	add	r3, r1
 8002d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d78:	e00a      	b.n	8002d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4908      	ldr	r1, [pc, #32]	; (8002da0 <__NVIC_SetPriority+0x50>)
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	3b04      	subs	r3, #4
 8002d88:	0112      	lsls	r2, r2, #4
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	761a      	strb	r2, [r3, #24]
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000e100 	.word	0xe000e100
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f1c3 0307 	rsb	r3, r3, #7
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	bf28      	it	cs
 8002dc2:	2304      	movcs	r3, #4
 8002dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	d902      	bls.n	8002dd4 <NVIC_EncodePriority+0x30>
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3b03      	subs	r3, #3
 8002dd2:	e000      	b.n	8002dd6 <NVIC_EncodePriority+0x32>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43da      	mvns	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	401a      	ands	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dec:	f04f 31ff 	mov.w	r1, #4294967295
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	43d9      	mvns	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfc:	4313      	orrs	r3, r2
         );
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3724      	adds	r7, #36	; 0x24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff ff4c 	bl	8002cb0 <__NVIC_SetPriorityGrouping>
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e32:	f7ff ff61 	bl	8002cf8 <__NVIC_GetPriorityGrouping>
 8002e36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	6978      	ldr	r0, [r7, #20]
 8002e3e:	f7ff ffb1 	bl	8002da4 <NVIC_EncodePriority>
 8002e42:	4602      	mov	r2, r0
 8002e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ff80 	bl	8002d50 <__NVIC_SetPriority>
}
 8002e50:	bf00      	nop
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff ff54 	bl	8002d14 <__NVIC_EnableIRQ>
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d005      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
 8002e94:	e027      	b.n	8002ee6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 020e 	bic.w	r2, r2, #14
 8002ea4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
    } 
  }
  return status;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efe:	e14e      	b.n	800319e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8140 	beq.w	8003198 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x38>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b12      	cmp	r3, #18
 8002f26:	d123      	bne.n	8002f70 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	6939      	ldr	r1, [r7, #16]
 8002f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d00b      	beq.n	8002fc4 <HAL_GPIO_Init+0xd4>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d007      	beq.n	8002fc4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fb8:	2b11      	cmp	r3, #17
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b12      	cmp	r3, #18
 8002fc2:	d130      	bne.n	8003026 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f003 0201 	and.w	r2, r3, #1
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	2203      	movs	r2, #3
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4013      	ands	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 809a 	beq.w	8003198 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003064:	4b55      	ldr	r3, [pc, #340]	; (80031bc <HAL_GPIO_Init+0x2cc>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	4a54      	ldr	r2, [pc, #336]	; (80031bc <HAL_GPIO_Init+0x2cc>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6193      	str	r3, [r2, #24]
 8003070:	4b52      	ldr	r3, [pc, #328]	; (80031bc <HAL_GPIO_Init+0x2cc>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800307c:	4a50      	ldr	r2, [pc, #320]	; (80031c0 <HAL_GPIO_Init+0x2d0>)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	3302      	adds	r3, #2
 8003084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003088:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	220f      	movs	r2, #15
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030a6:	d013      	beq.n	80030d0 <HAL_GPIO_Init+0x1e0>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a46      	ldr	r2, [pc, #280]	; (80031c4 <HAL_GPIO_Init+0x2d4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00d      	beq.n	80030cc <HAL_GPIO_Init+0x1dc>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a45      	ldr	r2, [pc, #276]	; (80031c8 <HAL_GPIO_Init+0x2d8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d007      	beq.n	80030c8 <HAL_GPIO_Init+0x1d8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a44      	ldr	r2, [pc, #272]	; (80031cc <HAL_GPIO_Init+0x2dc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d101      	bne.n	80030c4 <HAL_GPIO_Init+0x1d4>
 80030c0:	2303      	movs	r3, #3
 80030c2:	e006      	b.n	80030d2 <HAL_GPIO_Init+0x1e2>
 80030c4:	2305      	movs	r3, #5
 80030c6:	e004      	b.n	80030d2 <HAL_GPIO_Init+0x1e2>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e002      	b.n	80030d2 <HAL_GPIO_Init+0x1e2>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_GPIO_Init+0x1e2>
 80030d0:	2300      	movs	r3, #0
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	f002 0203 	and.w	r2, r2, #3
 80030d8:	0092      	lsls	r2, r2, #2
 80030da:	4093      	lsls	r3, r2
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030e2:	4937      	ldr	r1, [pc, #220]	; (80031c0 <HAL_GPIO_Init+0x2d0>)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f0:	4b37      	ldr	r3, [pc, #220]	; (80031d0 <HAL_GPIO_Init+0x2e0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003114:	4a2e      	ldr	r2, [pc, #184]	; (80031d0 <HAL_GPIO_Init+0x2e0>)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800311a:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <HAL_GPIO_Init+0x2e0>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	43db      	mvns	r3, r3
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4013      	ands	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800313e:	4a24      	ldr	r2, [pc, #144]	; (80031d0 <HAL_GPIO_Init+0x2e0>)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003144:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <HAL_GPIO_Init+0x2e0>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	43db      	mvns	r3, r3
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003168:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <HAL_GPIO_Init+0x2e0>)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800316e:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <HAL_GPIO_Init+0x2e0>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	43db      	mvns	r3, r3
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003192:	4a0f      	ldr	r2, [pc, #60]	; (80031d0 <HAL_GPIO_Init+0x2e0>)
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	3301      	adds	r3, #1
 800319c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f47f aea9 	bne.w	8002f00 <HAL_GPIO_Init+0x10>
  }
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40010000 	.word	0x40010000
 80031c4:	48000400 	.word	0x48000400
 80031c8:	48000800 	.word	0x48000800
 80031cc:	48000c00 	.word	0x48000c00
 80031d0:	40010400 	.word	0x40010400

080031d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	807b      	strh	r3, [r7, #2]
 80031e0:	4613      	mov	r3, r2
 80031e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e4:	787b      	ldrb	r3, [r7, #1]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ea:	887a      	ldrh	r2, [r7, #2]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031f0:	e002      	b.n	80031f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031f2:	887a      	ldrh	r2, [r7, #2]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800320a:	af00      	add	r7, sp, #0
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003210:	1d3b      	adds	r3, r7, #4
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	f000 bef4 	b.w	8004006 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321e:	1d3b      	adds	r3, r7, #4
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 816a 	beq.w	8003502 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800322e:	4bb3      	ldr	r3, [pc, #716]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	2b04      	cmp	r3, #4
 8003238:	d00c      	beq.n	8003254 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800323a:	4bb0      	ldr	r3, [pc, #704]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	2b08      	cmp	r3, #8
 8003244:	d159      	bne.n	80032fa <HAL_RCC_OscConfig+0xf6>
 8003246:	4bad      	ldr	r3, [pc, #692]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003252:	d152      	bne.n	80032fa <HAL_RCC_OscConfig+0xf6>
 8003254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003258:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003268:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	d102      	bne.n	8003286 <HAL_RCC_OscConfig+0x82>
 8003280:	4b9e      	ldr	r3, [pc, #632]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	e015      	b.n	80032b2 <HAL_RCC_OscConfig+0xae>
 8003286:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800328a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800329a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800329e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80032a2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80032ae:	4b93      	ldr	r3, [pc, #588]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80032ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80032be:	fa92 f2a2 	rbit	r2, r2
 80032c2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80032c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80032ca:	fab2 f282 	clz	r2, r2
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	f042 0220 	orr.w	r2, r2, #32
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	f002 021f 	and.w	r2, r2, #31
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f202 	lsl.w	r2, r1, r2
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 810c 	beq.w	8003500 <HAL_RCC_OscConfig+0x2fc>
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f040 8106 	bne.w	8003500 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f000 be86 	b.w	8004006 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d106      	bne.n	8003314 <HAL_RCC_OscConfig+0x110>
 8003306:	4b7d      	ldr	r3, [pc, #500]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a7c      	ldr	r2, [pc, #496]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e030      	b.n	8003376 <HAL_RCC_OscConfig+0x172>
 8003314:	1d3b      	adds	r3, r7, #4
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x134>
 800331e:	4b77      	ldr	r3, [pc, #476]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a76      	ldr	r2, [pc, #472]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b74      	ldr	r3, [pc, #464]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a73      	ldr	r2, [pc, #460]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e01e      	b.n	8003376 <HAL_RCC_OscConfig+0x172>
 8003338:	1d3b      	adds	r3, r7, #4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003342:	d10c      	bne.n	800335e <HAL_RCC_OscConfig+0x15a>
 8003344:	4b6d      	ldr	r3, [pc, #436]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a6c      	ldr	r2, [pc, #432]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 800334a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b6a      	ldr	r3, [pc, #424]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a69      	ldr	r2, [pc, #420]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	e00b      	b.n	8003376 <HAL_RCC_OscConfig+0x172>
 800335e:	4b67      	ldr	r3, [pc, #412]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a66      	ldr	r2, [pc, #408]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	4b64      	ldr	r3, [pc, #400]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a63      	ldr	r2, [pc, #396]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003374:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003376:	4b61      	ldr	r3, [pc, #388]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	f023 020f 	bic.w	r2, r3, #15
 800337e:	1d3b      	adds	r3, r7, #4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	495d      	ldr	r1, [pc, #372]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003386:	4313      	orrs	r3, r2
 8003388:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800338a:	1d3b      	adds	r3, r7, #4
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d059      	beq.n	8003448 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fd fe54 	bl	8001040 <HAL_GetTick>
 8003398:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339c:	e00a      	b.n	80033b4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800339e:	f7fd fe4f 	bl	8001040 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d902      	bls.n	80033b4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	f000 be29 	b.w	8004006 <HAL_RCC_OscConfig+0xe02>
 80033b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80033c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d102      	bne.n	80033e6 <HAL_RCC_OscConfig+0x1e2>
 80033e0:	4b46      	ldr	r3, [pc, #280]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x20e>
 80033e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003402:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003416:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800341a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800341e:	fa92 f2a2 	rbit	r2, r2
 8003422:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003426:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800342a:	fab2 f282 	clz	r2, r2
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	f042 0220 	orr.w	r2, r2, #32
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	f002 021f 	and.w	r2, r2, #31
 800343a:	2101      	movs	r1, #1
 800343c:	fa01 f202 	lsl.w	r2, r1, r2
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0ab      	beq.n	800339e <HAL_RCC_OscConfig+0x19a>
 8003446:	e05c      	b.n	8003502 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fd fdfa 	bl	8001040 <HAL_GetTick>
 800344c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003450:	e00a      	b.n	8003468 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003452:	f7fd fdf5 	bl	8001040 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d902      	bls.n	8003468 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	f000 bdcf 	b.w	8004006 <HAL_RCC_OscConfig+0xe02>
 8003468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800346c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800347c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d102      	bne.n	800349a <HAL_RCC_OscConfig+0x296>
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	e015      	b.n	80034c6 <HAL_RCC_OscConfig+0x2c2>
 800349a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800349e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80034ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80034b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80034c2:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_RCC_OscConfig+0x2f8>)
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80034ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80034d2:	fa92 f2a2 	rbit	r2, r2
 80034d6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80034da:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80034de:	fab2 f282 	clz	r2, r2
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	f042 0220 	orr.w	r2, r2, #32
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	f002 021f 	and.w	r2, r2, #31
 80034ee:	2101      	movs	r1, #1
 80034f0:	fa01 f202 	lsl.w	r2, r1, r2
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ab      	bne.n	8003452 <HAL_RCC_OscConfig+0x24e>
 80034fa:	e002      	b.n	8003502 <HAL_RCC_OscConfig+0x2fe>
 80034fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003502:	1d3b      	adds	r3, r7, #4
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 816f 	beq.w	80037f0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003512:	4bd0      	ldr	r3, [pc, #832]	; (8003854 <HAL_RCC_OscConfig+0x650>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00b      	beq.n	8003536 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800351e:	4bcd      	ldr	r3, [pc, #820]	; (8003854 <HAL_RCC_OscConfig+0x650>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b08      	cmp	r3, #8
 8003528:	d16c      	bne.n	8003604 <HAL_RCC_OscConfig+0x400>
 800352a:	4bca      	ldr	r3, [pc, #808]	; (8003854 <HAL_RCC_OscConfig+0x650>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d166      	bne.n	8003604 <HAL_RCC_OscConfig+0x400>
 8003536:	2302      	movs	r3, #2
 8003538:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003548:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d102      	bne.n	8003566 <HAL_RCC_OscConfig+0x362>
 8003560:	4bbc      	ldr	r3, [pc, #752]	; (8003854 <HAL_RCC_OscConfig+0x650>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	e013      	b.n	800358e <HAL_RCC_OscConfig+0x38a>
 8003566:	2302      	movs	r3, #2
 8003568:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003578:	2302      	movs	r3, #2
 800357a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800357e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800358a:	4bb2      	ldr	r3, [pc, #712]	; (8003854 <HAL_RCC_OscConfig+0x650>)
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2202      	movs	r2, #2
 8003590:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003594:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003598:	fa92 f2a2 	rbit	r2, r2
 800359c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80035a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80035a4:	fab2 f282 	clz	r2, r2
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	f042 0220 	orr.w	r2, r2, #32
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	f002 021f 	and.w	r2, r2, #31
 80035b4:	2101      	movs	r1, #1
 80035b6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <HAL_RCC_OscConfig+0x3cc>
 80035c0:	1d3b      	adds	r3, r7, #4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d002      	beq.n	80035d0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f000 bd1b 	b.w	8004006 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d0:	4ba0      	ldr	r3, [pc, #640]	; (8003854 <HAL_RCC_OscConfig+0x650>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d8:	1d3b      	adds	r3, r7, #4
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	21f8      	movs	r1, #248	; 0xf8
 80035e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035e8:	fa91 f1a1 	rbit	r1, r1
 80035ec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80035f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80035f4:	fab1 f181 	clz	r1, r1
 80035f8:	b2c9      	uxtb	r1, r1
 80035fa:	408b      	lsls	r3, r1
 80035fc:	4995      	ldr	r1, [pc, #596]	; (8003854 <HAL_RCC_OscConfig+0x650>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003602:	e0f5      	b.n	80037f0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003604:	1d3b      	adds	r3, r7, #4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8085 	beq.w	800371a <HAL_RCC_OscConfig+0x516>
 8003610:	2301      	movs	r3, #1
 8003612:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003622:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003630:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	461a      	mov	r2, r3
 8003638:	2301      	movs	r3, #1
 800363a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fd fd00 	bl	8001040 <HAL_GetTick>
 8003640:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003646:	f7fd fcfb 	bl	8001040 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d902      	bls.n	800365c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	f000 bcd5 	b.w	8004006 <HAL_RCC_OscConfig+0xe02>
 800365c:	2302      	movs	r3, #2
 800365e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800366e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d102      	bne.n	800368c <HAL_RCC_OscConfig+0x488>
 8003686:	4b73      	ldr	r3, [pc, #460]	; (8003854 <HAL_RCC_OscConfig+0x650>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	e013      	b.n	80036b4 <HAL_RCC_OscConfig+0x4b0>
 800368c:	2302      	movs	r3, #2
 800368e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003696:	fa93 f3a3 	rbit	r3, r3
 800369a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800369e:	2302      	movs	r3, #2
 80036a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80036b0:	4b68      	ldr	r3, [pc, #416]	; (8003854 <HAL_RCC_OscConfig+0x650>)
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	2202      	movs	r2, #2
 80036b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80036ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80036be:	fa92 f2a2 	rbit	r2, r2
 80036c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80036c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80036ca:	fab2 f282 	clz	r2, r2
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	f042 0220 	orr.w	r2, r2, #32
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	f002 021f 	and.w	r2, r2, #31
 80036da:	2101      	movs	r1, #1
 80036dc:	fa01 f202 	lsl.w	r2, r1, r2
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0af      	beq.n	8003646 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e6:	4b5b      	ldr	r3, [pc, #364]	; (8003854 <HAL_RCC_OscConfig+0x650>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ee:	1d3b      	adds	r3, r7, #4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	21f8      	movs	r1, #248	; 0xf8
 80036f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80036fe:	fa91 f1a1 	rbit	r1, r1
 8003702:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003706:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800370a:	fab1 f181 	clz	r1, r1
 800370e:	b2c9      	uxtb	r1, r1
 8003710:	408b      	lsls	r3, r1
 8003712:	4950      	ldr	r1, [pc, #320]	; (8003854 <HAL_RCC_OscConfig+0x650>)
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]
 8003718:	e06a      	b.n	80037f0 <HAL_RCC_OscConfig+0x5ec>
 800371a:	2301      	movs	r3, #1
 800371c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800372c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800373a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	461a      	mov	r2, r3
 8003742:	2300      	movs	r3, #0
 8003744:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fd fc7b 	bl	8001040 <HAL_GetTick>
 800374a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	e00a      	b.n	8003766 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003750:	f7fd fc76 	bl	8001040 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d902      	bls.n	8003766 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	f000 bc50 	b.w	8004006 <HAL_RCC_OscConfig+0xe02>
 8003766:	2302      	movs	r3, #2
 8003768:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377c:	fab3 f383 	clz	r3, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	d102      	bne.n	8003796 <HAL_RCC_OscConfig+0x592>
 8003790:	4b30      	ldr	r3, [pc, #192]	; (8003854 <HAL_RCC_OscConfig+0x650>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	e013      	b.n	80037be <HAL_RCC_OscConfig+0x5ba>
 8003796:	2302      	movs	r3, #2
 8003798:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80037a8:	2302      	movs	r3, #2
 80037aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80037ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80037ba:	4b26      	ldr	r3, [pc, #152]	; (8003854 <HAL_RCC_OscConfig+0x650>)
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2202      	movs	r2, #2
 80037c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80037c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80037c8:	fa92 f2a2 	rbit	r2, r2
 80037cc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80037d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80037d4:	fab2 f282 	clz	r2, r2
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	f042 0220 	orr.w	r2, r2, #32
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	f002 021f 	and.w	r2, r2, #31
 80037e4:	2101      	movs	r1, #1
 80037e6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1af      	bne.n	8003750 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80da 	beq.w	80039b4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003800:	1d3b      	adds	r3, r7, #4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d069      	beq.n	80038de <HAL_RCC_OscConfig+0x6da>
 800380a:	2301      	movs	r3, #1
 800380c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003814:	fa93 f3a3 	rbit	r3, r3
 8003818:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800381c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003820:	fab3 f383 	clz	r3, r3
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCC_OscConfig+0x654>)
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	461a      	mov	r2, r3
 8003830:	2301      	movs	r3, #1
 8003832:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003834:	f7fd fc04 	bl	8001040 <HAL_GetTick>
 8003838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383c:	e00e      	b.n	800385c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800383e:	f7fd fbff 	bl	8001040 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d906      	bls.n	800385c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e3d9      	b.n	8004006 <HAL_RCC_OscConfig+0xe02>
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	10908120 	.word	0x10908120
 800385c:	2302      	movs	r3, #2
 800385e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800386e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003872:	2202      	movs	r2, #2
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	fa93 f2a3 	rbit	r2, r3
 8003880:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800388a:	2202      	movs	r2, #2
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fa93 f2a3 	rbit	r2, r3
 8003898:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800389c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389e:	4ba5      	ldr	r3, [pc, #660]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 80038a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80038a6:	2102      	movs	r1, #2
 80038a8:	6019      	str	r1, [r3, #0]
 80038aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	fa93 f1a3 	rbit	r1, r3
 80038b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80038b8:	6019      	str	r1, [r3, #0]
  return result;
 80038ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	fab3 f383 	clz	r3, r3
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	2101      	movs	r1, #1
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0b0      	beq.n	800383e <HAL_RCC_OscConfig+0x63a>
 80038dc:	e06a      	b.n	80039b4 <HAL_RCC_OscConfig+0x7b0>
 80038de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	fa93 f2a3 	rbit	r2, r3
 80038f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80038f4:	601a      	str	r2, [r3, #0]
  return result;
 80038f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80038fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	4b8c      	ldr	r3, [pc, #560]	; (8003b38 <HAL_RCC_OscConfig+0x934>)
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	461a      	mov	r2, r3
 800390c:	2300      	movs	r3, #0
 800390e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003910:	f7fd fb96 	bl	8001040 <HAL_GetTick>
 8003914:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003918:	e009      	b.n	800392e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800391a:	f7fd fb91 	bl	8001040 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e36b      	b.n	8004006 <HAL_RCC_OscConfig+0xe02>
 800392e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003932:	2202      	movs	r2, #2
 8003934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	fa93 f2a3 	rbit	r2, r3
 8003940:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800394a:	2202      	movs	r2, #2
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	fa93 f2a3 	rbit	r2, r3
 8003958:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003962:	2202      	movs	r2, #2
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	fa93 f2a3 	rbit	r2, r3
 8003970:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003974:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003976:	4b6f      	ldr	r3, [pc, #444]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800397a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800397e:	2102      	movs	r1, #2
 8003980:	6019      	str	r1, [r3, #0]
 8003982:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	fa93 f1a3 	rbit	r1, r3
 800398c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003990:	6019      	str	r1, [r3, #0]
  return result;
 8003992:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	fab3 f383 	clz	r3, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	2101      	movs	r1, #1
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1b2      	bne.n	800391a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b4:	1d3b      	adds	r3, r7, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 8158 	beq.w	8003c74 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ca:	4b5a      	ldr	r3, [pc, #360]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d112      	bne.n	80039fc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d6:	4b57      	ldr	r3, [pc, #348]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	4a56      	ldr	r2, [pc, #344]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 80039dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e0:	61d3      	str	r3, [r2, #28]
 80039e2:	4b54      	ldr	r3, [pc, #336]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80039ea:	f107 0308 	add.w	r3, r7, #8
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f107 0308 	add.w	r3, r7, #8
 80039f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fc:	4b4f      	ldr	r3, [pc, #316]	; (8003b3c <HAL_RCC_OscConfig+0x938>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d11a      	bne.n	8003a3e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a08:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <HAL_RCC_OscConfig+0x938>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a4b      	ldr	r2, [pc, #300]	; (8003b3c <HAL_RCC_OscConfig+0x938>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a12:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a14:	f7fd fb14 	bl	8001040 <HAL_GetTick>
 8003a18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1c:	e009      	b.n	8003a32 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1e:	f7fd fb0f 	bl	8001040 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	; 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e2e9      	b.n	8004006 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a32:	4b42      	ldr	r3, [pc, #264]	; (8003b3c <HAL_RCC_OscConfig+0x938>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0ef      	beq.n	8003a1e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a3e:	1d3b      	adds	r3, r7, #4
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d106      	bne.n	8003a56 <HAL_RCC_OscConfig+0x852>
 8003a48:	4b3a      	ldr	r3, [pc, #232]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4a39      	ldr	r2, [pc, #228]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6213      	str	r3, [r2, #32]
 8003a54:	e02f      	b.n	8003ab6 <HAL_RCC_OscConfig+0x8b2>
 8003a56:	1d3b      	adds	r3, r7, #4
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10c      	bne.n	8003a7a <HAL_RCC_OscConfig+0x876>
 8003a60:	4b34      	ldr	r3, [pc, #208]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	4a33      	ldr	r2, [pc, #204]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	6213      	str	r3, [r2, #32]
 8003a6c:	4b31      	ldr	r3, [pc, #196]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4a30      	ldr	r2, [pc, #192]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003a72:	f023 0304 	bic.w	r3, r3, #4
 8003a76:	6213      	str	r3, [r2, #32]
 8003a78:	e01d      	b.n	8003ab6 <HAL_RCC_OscConfig+0x8b2>
 8003a7a:	1d3b      	adds	r3, r7, #4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	d10c      	bne.n	8003a9e <HAL_RCC_OscConfig+0x89a>
 8003a84:	4b2b      	ldr	r3, [pc, #172]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	4a2a      	ldr	r2, [pc, #168]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003a8a:	f043 0304 	orr.w	r3, r3, #4
 8003a8e:	6213      	str	r3, [r2, #32]
 8003a90:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4a27      	ldr	r2, [pc, #156]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6213      	str	r3, [r2, #32]
 8003a9c:	e00b      	b.n	8003ab6 <HAL_RCC_OscConfig+0x8b2>
 8003a9e:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	4a24      	ldr	r2, [pc, #144]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	6213      	str	r3, [r2, #32]
 8003aaa:	4b22      	ldr	r3, [pc, #136]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	4a21      	ldr	r2, [pc, #132]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003ab0:	f023 0304 	bic.w	r3, r3, #4
 8003ab4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d06b      	beq.n	8003b98 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac0:	f7fd fabe 	bl	8001040 <HAL_GetTick>
 8003ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac8:	e00b      	b.n	8003ae2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fd fab9 	bl	8001040 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e291      	b.n	8004006 <HAL_RCC_OscConfig+0xe02>
 8003ae2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	fa93 f2a3 	rbit	r2, r3
 8003af4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003afe:	2202      	movs	r2, #2
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	fa93 f2a3 	rbit	r2, r3
 8003b0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b10:	601a      	str	r2, [r3, #0]
  return result;
 8003b12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d109      	bne.n	8003b40 <HAL_RCC_OscConfig+0x93c>
 8003b2c:	4b01      	ldr	r3, [pc, #4]	; (8003b34 <HAL_RCC_OscConfig+0x930>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	e014      	b.n	8003b5c <HAL_RCC_OscConfig+0x958>
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000
 8003b38:	10908120 	.word	0x10908120
 8003b3c:	40007000 	.word	0x40007000
 8003b40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b44:	2202      	movs	r2, #2
 8003b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	fa93 f2a3 	rbit	r2, r3
 8003b52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	4bbb      	ldr	r3, [pc, #748]	; (8003e48 <HAL_RCC_OscConfig+0xc44>)
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b60:	2102      	movs	r1, #2
 8003b62:	6011      	str	r1, [r2, #0]
 8003b64:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	fa92 f1a2 	rbit	r1, r2
 8003b6e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003b72:	6011      	str	r1, [r2, #0]
  return result;
 8003b74:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	fab2 f282 	clz	r2, r2
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	f002 021f 	and.w	r2, r2, #31
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d099      	beq.n	8003aca <HAL_RCC_OscConfig+0x8c6>
 8003b96:	e063      	b.n	8003c60 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b98:	f7fd fa52 	bl	8001040 <HAL_GetTick>
 8003b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba0:	e00b      	b.n	8003bba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba2:	f7fd fa4d 	bl	8001040 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e225      	b.n	8004006 <HAL_RCC_OscConfig+0xe02>
 8003bba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	fa93 f2a3 	rbit	r2, r3
 8003bcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	fa93 f2a3 	rbit	r2, r3
 8003be4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003be8:	601a      	str	r2, [r3, #0]
  return result;
 8003bea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003bee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf0:	fab3 f383 	clz	r3, r3
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f043 0302 	orr.w	r3, r3, #2
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d102      	bne.n	8003c0a <HAL_RCC_OscConfig+0xa06>
 8003c04:	4b90      	ldr	r3, [pc, #576]	; (8003e48 <HAL_RCC_OscConfig+0xc44>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	e00d      	b.n	8003c26 <HAL_RCC_OscConfig+0xa22>
 8003c0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c0e:	2202      	movs	r2, #2
 8003c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	fa93 f2a3 	rbit	r2, r3
 8003c1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	4b89      	ldr	r3, [pc, #548]	; (8003e48 <HAL_RCC_OscConfig+0xc44>)
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	6011      	str	r1, [r2, #0]
 8003c2e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	fa92 f1a2 	rbit	r1, r2
 8003c38:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003c3c:	6011      	str	r1, [r2, #0]
  return result;
 8003c3e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	fab2 f282 	clz	r2, r2
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	f002 021f 	and.w	r2, r2, #31
 8003c54:	2101      	movs	r1, #1
 8003c56:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1a0      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c60:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d105      	bne.n	8003c74 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c68:	4b77      	ldr	r3, [pc, #476]	; (8003e48 <HAL_RCC_OscConfig+0xc44>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	4a76      	ldr	r2, [pc, #472]	; (8003e48 <HAL_RCC_OscConfig+0xc44>)
 8003c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 81c2 	beq.w	8004004 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c80:	4b71      	ldr	r3, [pc, #452]	; (8003e48 <HAL_RCC_OscConfig+0xc44>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 030c 	and.w	r3, r3, #12
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	f000 819c 	beq.w	8003fc6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c8e:	1d3b      	adds	r3, r7, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	f040 8114 	bne.w	8003ec2 <HAL_RCC_OscConfig+0xcbe>
 8003c9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	fa93 f2a3 	rbit	r2, r3
 8003cae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003cb2:	601a      	str	r2, [r3, #0]
  return result;
 8003cb4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003cb8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cba:	fab3 f383 	clz	r3, r3
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	461a      	mov	r2, r3
 8003ccc:	2300      	movs	r3, #0
 8003cce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fd f9b6 	bl	8001040 <HAL_GetTick>
 8003cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd8:	e009      	b.n	8003cee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cda:	f7fd f9b1 	bl	8001040 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e18b      	b.n	8004006 <HAL_RCC_OscConfig+0xe02>
 8003cee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003cf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	fa93 f2a3 	rbit	r2, r3
 8003d02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d06:	601a      	str	r2, [r3, #0]
  return result;
 8003d08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d102      	bne.n	8003d28 <HAL_RCC_OscConfig+0xb24>
 8003d22:	4b49      	ldr	r3, [pc, #292]	; (8003e48 <HAL_RCC_OscConfig+0xc44>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	e01b      	b.n	8003d60 <HAL_RCC_OscConfig+0xb5c>
 8003d28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	fa93 f2a3 	rbit	r2, r3
 8003d3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	fa93 f2a3 	rbit	r2, r3
 8003d56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	4b3a      	ldr	r3, [pc, #232]	; (8003e48 <HAL_RCC_OscConfig+0xc44>)
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d68:	6011      	str	r1, [r2, #0]
 8003d6a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	fa92 f1a2 	rbit	r1, r2
 8003d74:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003d78:	6011      	str	r1, [r2, #0]
  return result;
 8003d7a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	fab2 f282 	clz	r2, r2
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	f042 0220 	orr.w	r2, r2, #32
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	f002 021f 	and.w	r2, r2, #31
 8003d90:	2101      	movs	r1, #1
 8003d92:	fa01 f202 	lsl.w	r2, r1, r2
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d19e      	bne.n	8003cda <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d9c:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <HAL_RCC_OscConfig+0xc44>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003da4:	1d3b      	adds	r3, r7, #4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003daa:	1d3b      	adds	r3, r7, #4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	4925      	ldr	r1, [pc, #148]	; (8003e48 <HAL_RCC_OscConfig+0xc44>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
 8003db8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	fa93 f2a3 	rbit	r2, r3
 8003dcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003dd0:	601a      	str	r2, [r3, #0]
  return result;
 8003dd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003dd6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd8:	fab3 f383 	clz	r3, r3
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003de2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	461a      	mov	r2, r3
 8003dea:	2301      	movs	r3, #1
 8003dec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dee:	f7fd f927 	bl	8001040 <HAL_GetTick>
 8003df2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003df6:	e009      	b.n	8003e0c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fd f922 	bl	8001040 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e0fc      	b.n	8004006 <HAL_RCC_OscConfig+0xe02>
 8003e0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	fa93 f2a3 	rbit	r2, r3
 8003e20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e24:	601a      	str	r2, [r3, #0]
  return result;
 8003e26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e2c:	fab3 f383 	clz	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d105      	bne.n	8003e4c <HAL_RCC_OscConfig+0xc48>
 8003e40:	4b01      	ldr	r3, [pc, #4]	; (8003e48 <HAL_RCC_OscConfig+0xc44>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	e01e      	b.n	8003e84 <HAL_RCC_OscConfig+0xc80>
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	fa93 f2a3 	rbit	r2, r3
 8003e60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	fa93 f2a3 	rbit	r2, r3
 8003e7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	4b63      	ldr	r3, [pc, #396]	; (8004010 <HAL_RCC_OscConfig+0xe0c>)
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e8c:	6011      	str	r1, [r2, #0]
 8003e8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	fa92 f1a2 	rbit	r1, r2
 8003e98:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e9c:	6011      	str	r1, [r2, #0]
  return result;
 8003e9e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	fab2 f282 	clz	r2, r2
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	f042 0220 	orr.w	r2, r2, #32
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	f002 021f 	and.w	r2, r2, #31
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d09b      	beq.n	8003df8 <HAL_RCC_OscConfig+0xbf4>
 8003ec0:	e0a0      	b.n	8004004 <HAL_RCC_OscConfig+0xe00>
 8003ec2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ec6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ecc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	fa93 f2a3 	rbit	r2, r3
 8003ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eda:	601a      	str	r2, [r3, #0]
  return result;
 8003edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ee0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fd f8a2 	bl	8001040 <HAL_GetTick>
 8003efc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f00:	e009      	b.n	8003f16 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f02:	f7fd f89d 	bl	8001040 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e077      	b.n	8004006 <HAL_RCC_OscConfig+0xe02>
 8003f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	fa93 f2a3 	rbit	r2, r3
 8003f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f2e:	601a      	str	r2, [r3, #0]
  return result;
 8003f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d102      	bne.n	8003f50 <HAL_RCC_OscConfig+0xd4c>
 8003f4a:	4b31      	ldr	r3, [pc, #196]	; (8004010 <HAL_RCC_OscConfig+0xe0c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	e01b      	b.n	8003f88 <HAL_RCC_OscConfig+0xd84>
 8003f50:	f107 0320 	add.w	r3, r7, #32
 8003f54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5a:	f107 0320 	add.w	r3, r7, #32
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	fa93 f2a3 	rbit	r2, r3
 8003f64:	f107 031c 	add.w	r3, r7, #28
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	f107 0318 	add.w	r3, r7, #24
 8003f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	f107 0318 	add.w	r3, r7, #24
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	fa93 f2a3 	rbit	r2, r3
 8003f7e:	f107 0314 	add.w	r3, r7, #20
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	4b22      	ldr	r3, [pc, #136]	; (8004010 <HAL_RCC_OscConfig+0xe0c>)
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	f107 0210 	add.w	r2, r7, #16
 8003f8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f90:	6011      	str	r1, [r2, #0]
 8003f92:	f107 0210 	add.w	r2, r7, #16
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	fa92 f1a2 	rbit	r1, r2
 8003f9c:	f107 020c 	add.w	r2, r7, #12
 8003fa0:	6011      	str	r1, [r2, #0]
  return result;
 8003fa2:	f107 020c 	add.w	r2, r7, #12
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	fab2 f282 	clz	r2, r2
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	f042 0220 	orr.w	r2, r2, #32
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	f002 021f 	and.w	r2, r2, #31
 8003fb8:	2101      	movs	r1, #1
 8003fba:	fa01 f202 	lsl.w	r2, r1, r2
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d19e      	bne.n	8003f02 <HAL_RCC_OscConfig+0xcfe>
 8003fc4:	e01e      	b.n	8004004 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc6:	1d3b      	adds	r3, r7, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e018      	b.n	8004006 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <HAL_RCC_OscConfig+0xe0c>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fdc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fe0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fe4:	1d3b      	adds	r3, r7, #4
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d108      	bne.n	8004000 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003fee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ff2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ff6:	1d3b      	adds	r3, r7, #4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40021000 	.word	0x40021000

08004014 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b09e      	sub	sp, #120	; 0x78
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e162      	b.n	80042f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800402c:	4b90      	ldr	r3, [pc, #576]	; (8004270 <HAL_RCC_ClockConfig+0x25c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d910      	bls.n	800405c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b8d      	ldr	r3, [pc, #564]	; (8004270 <HAL_RCC_ClockConfig+0x25c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 0207 	bic.w	r2, r3, #7
 8004042:	498b      	ldr	r1, [pc, #556]	; (8004270 <HAL_RCC_ClockConfig+0x25c>)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b89      	ldr	r3, [pc, #548]	; (8004270 <HAL_RCC_ClockConfig+0x25c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e14a      	b.n	80042f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004068:	4b82      	ldr	r3, [pc, #520]	; (8004274 <HAL_RCC_ClockConfig+0x260>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	497f      	ldr	r1, [pc, #508]	; (8004274 <HAL_RCC_ClockConfig+0x260>)
 8004076:	4313      	orrs	r3, r2
 8004078:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 80dc 	beq.w	8004240 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d13c      	bne.n	800410a <HAL_RCC_ClockConfig+0xf6>
 8004090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004094:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800409e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d102      	bne.n	80040ba <HAL_RCC_ClockConfig+0xa6>
 80040b4:	4b6f      	ldr	r3, [pc, #444]	; (8004274 <HAL_RCC_ClockConfig+0x260>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	e00f      	b.n	80040da <HAL_RCC_ClockConfig+0xc6>
 80040ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040c2:	fa93 f3a3 	rbit	r3, r3
 80040c6:	667b      	str	r3, [r7, #100]	; 0x64
 80040c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040cc:	663b      	str	r3, [r7, #96]	; 0x60
 80040ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040d0:	fa93 f3a3 	rbit	r3, r3
 80040d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040d6:	4b67      	ldr	r3, [pc, #412]	; (8004274 <HAL_RCC_ClockConfig+0x260>)
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040de:	65ba      	str	r2, [r7, #88]	; 0x58
 80040e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040e2:	fa92 f2a2 	rbit	r2, r2
 80040e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80040e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040ea:	fab2 f282 	clz	r2, r2
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	f042 0220 	orr.w	r2, r2, #32
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	f002 021f 	and.w	r2, r2, #31
 80040fa:	2101      	movs	r1, #1
 80040fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004100:	4013      	ands	r3, r2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d17b      	bne.n	80041fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0f3      	b.n	80042f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d13c      	bne.n	800418c <HAL_RCC_ClockConfig+0x178>
 8004112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004116:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800411a:	fa93 f3a3 	rbit	r3, r3
 800411e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	fab3 f383 	clz	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b01      	cmp	r3, #1
 8004134:	d102      	bne.n	800413c <HAL_RCC_ClockConfig+0x128>
 8004136:	4b4f      	ldr	r3, [pc, #316]	; (8004274 <HAL_RCC_ClockConfig+0x260>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	e00f      	b.n	800415c <HAL_RCC_ClockConfig+0x148>
 800413c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004140:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004144:	fa93 f3a3 	rbit	r3, r3
 8004148:	647b      	str	r3, [r7, #68]	; 0x44
 800414a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800414e:	643b      	str	r3, [r7, #64]	; 0x40
 8004150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004152:	fa93 f3a3 	rbit	r3, r3
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004158:	4b46      	ldr	r3, [pc, #280]	; (8004274 <HAL_RCC_ClockConfig+0x260>)
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004160:	63ba      	str	r2, [r7, #56]	; 0x38
 8004162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004164:	fa92 f2a2 	rbit	r2, r2
 8004168:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800416a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800416c:	fab2 f282 	clz	r2, r2
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	f042 0220 	orr.w	r2, r2, #32
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	f002 021f 	and.w	r2, r2, #31
 800417c:	2101      	movs	r1, #1
 800417e:	fa01 f202 	lsl.w	r2, r1, r2
 8004182:	4013      	ands	r3, r2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d13a      	bne.n	80041fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0b2      	b.n	80042f2 <HAL_RCC_ClockConfig+0x2de>
 800418c:	2302      	movs	r3, #2
 800418e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	fa93 f3a3 	rbit	r3, r3
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419a:	fab3 f383 	clz	r3, r3
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d102      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x1a0>
 80041ae:	4b31      	ldr	r3, [pc, #196]	; (8004274 <HAL_RCC_ClockConfig+0x260>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	e00d      	b.n	80041d0 <HAL_RCC_ClockConfig+0x1bc>
 80041b4:	2302      	movs	r3, #2
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
 80041c0:	2302      	movs	r3, #2
 80041c2:	623b      	str	r3, [r7, #32]
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	fa93 f3a3 	rbit	r3, r3
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	4b29      	ldr	r3, [pc, #164]	; (8004274 <HAL_RCC_ClockConfig+0x260>)
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	2202      	movs	r2, #2
 80041d2:	61ba      	str	r2, [r7, #24]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	fa92 f2a2 	rbit	r2, r2
 80041da:	617a      	str	r2, [r7, #20]
  return result;
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	fab2 f282 	clz	r2, r2
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	f042 0220 	orr.w	r2, r2, #32
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	f002 021f 	and.w	r2, r2, #31
 80041ee:	2101      	movs	r1, #1
 80041f0:	fa01 f202 	lsl.w	r2, r1, r2
 80041f4:	4013      	ands	r3, r2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e079      	b.n	80042f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fe:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <HAL_RCC_ClockConfig+0x260>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f023 0203 	bic.w	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	491a      	ldr	r1, [pc, #104]	; (8004274 <HAL_RCC_ClockConfig+0x260>)
 800420c:	4313      	orrs	r3, r2
 800420e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004210:	f7fc ff16 	bl	8001040 <HAL_GetTick>
 8004214:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	e00a      	b.n	800422e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004218:	f7fc ff12 	bl	8001040 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	; 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e061      	b.n	80042f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	4b11      	ldr	r3, [pc, #68]	; (8004274 <HAL_RCC_ClockConfig+0x260>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 020c 	and.w	r2, r3, #12
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	429a      	cmp	r2, r3
 800423e:	d1eb      	bne.n	8004218 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <HAL_RCC_ClockConfig+0x25c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d214      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b08      	ldr	r3, [pc, #32]	; (8004270 <HAL_RCC_ClockConfig+0x25c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 0207 	bic.w	r2, r3, #7
 8004256:	4906      	ldr	r1, [pc, #24]	; (8004270 <HAL_RCC_ClockConfig+0x25c>)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b04      	ldr	r3, [pc, #16]	; (8004270 <HAL_RCC_ClockConfig+0x25c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e040      	b.n	80042f2 <HAL_RCC_ClockConfig+0x2de>
 8004270:	40022000 	.word	0x40022000
 8004274:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004284:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <HAL_RCC_ClockConfig+0x2e8>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	491a      	ldr	r1, [pc, #104]	; (80042fc <HAL_RCC_ClockConfig+0x2e8>)
 8004292:	4313      	orrs	r3, r2
 8004294:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a2:	4b16      	ldr	r3, [pc, #88]	; (80042fc <HAL_RCC_ClockConfig+0x2e8>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4912      	ldr	r1, [pc, #72]	; (80042fc <HAL_RCC_ClockConfig+0x2e8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042b6:	f000 f829 	bl	800430c <HAL_RCC_GetSysClockFreq>
 80042ba:	4601      	mov	r1, r0
 80042bc:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <HAL_RCC_ClockConfig+0x2e8>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042c4:	22f0      	movs	r2, #240	; 0xf0
 80042c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	fa92 f2a2 	rbit	r2, r2
 80042ce:	60fa      	str	r2, [r7, #12]
  return result;
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	fab2 f282 	clz	r2, r2
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	40d3      	lsrs	r3, r2
 80042da:	4a09      	ldr	r2, [pc, #36]	; (8004300 <HAL_RCC_ClockConfig+0x2ec>)
 80042dc:	5cd3      	ldrb	r3, [r2, r3]
 80042de:	fa21 f303 	lsr.w	r3, r1, r3
 80042e2:	4a08      	ldr	r2, [pc, #32]	; (8004304 <HAL_RCC_ClockConfig+0x2f0>)
 80042e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80042e6:	4b08      	ldr	r3, [pc, #32]	; (8004308 <HAL_RCC_ClockConfig+0x2f4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fc fb8e 	bl	8000a0c <HAL_InitTick>
  
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3778      	adds	r7, #120	; 0x78
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000
 8004300:	08007458 	.word	0x08007458
 8004304:	20000000 	.word	0x20000000
 8004308:	20000004 	.word	0x20000004

0800430c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	b08b      	sub	sp, #44	; 0x2c
 8004310:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	2300      	movs	r3, #0
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	2300      	movs	r3, #0
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004326:	4b29      	ldr	r3, [pc, #164]	; (80043cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b04      	cmp	r3, #4
 8004334:	d002      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x30>
 8004336:	2b08      	cmp	r3, #8
 8004338:	d003      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x36>
 800433a:	e03c      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800433c:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800433e:	623b      	str	r3, [r7, #32]
      break;
 8004340:	e03c      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004348:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800434c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	fa92 f2a2 	rbit	r2, r2
 8004354:	607a      	str	r2, [r7, #4]
  return result;
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	fab2 f282 	clz	r2, r2
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	40d3      	lsrs	r3, r2
 8004360:	4a1c      	ldr	r2, [pc, #112]	; (80043d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004362:	5cd3      	ldrb	r3, [r2, r3]
 8004364:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004366:	4b19      	ldr	r3, [pc, #100]	; (80043cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	220f      	movs	r2, #15
 8004370:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	fa92 f2a2 	rbit	r2, r2
 8004378:	60fa      	str	r2, [r7, #12]
  return result;
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	fab2 f282 	clz	r2, r2
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	40d3      	lsrs	r3, r2
 8004384:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004386:	5cd3      	ldrb	r3, [r2, r3]
 8004388:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004394:	4a0e      	ldr	r2, [pc, #56]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	fbb2 f2f3 	udiv	r2, r2, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
 80043a4:	e004      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	4a0c      	ldr	r2, [pc, #48]	; (80043dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	623b      	str	r3, [r7, #32]
      break;
 80043b4:	e002      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043b6:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80043b8:	623b      	str	r3, [r7, #32]
      break;
 80043ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043bc:	6a3b      	ldr	r3, [r7, #32]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	372c      	adds	r7, #44	; 0x2c
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000
 80043d0:	00f42400 	.word	0x00f42400
 80043d4:	08007470 	.word	0x08007470
 80043d8:	08007480 	.word	0x08007480
 80043dc:	003d0900 	.word	0x003d0900
 80043e0:	007a1200 	.word	0x007a1200

080043e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000000 	.word	0x20000000

080043fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004402:	f7ff ffef 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 8004406:	4601      	mov	r1, r0
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004410:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004414:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	fa92 f2a2 	rbit	r2, r2
 800441c:	603a      	str	r2, [r7, #0]
  return result;
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	fab2 f282 	clz	r2, r2
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	40d3      	lsrs	r3, r2
 8004428:	4a04      	ldr	r2, [pc, #16]	; (800443c <HAL_RCC_GetPCLK1Freq+0x40>)
 800442a:	5cd3      	ldrb	r3, [r2, r3]
 800442c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40021000 	.word	0x40021000
 800443c:	08007468 	.word	0x08007468

08004440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004446:	f7ff ffcd 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 800444a:	4601      	mov	r1, r0
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004454:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004458:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	fa92 f2a2 	rbit	r2, r2
 8004460:	603a      	str	r2, [r7, #0]
  return result;
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	fab2 f282 	clz	r2, r2
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	40d3      	lsrs	r3, r2
 800446c:	4a04      	ldr	r2, [pc, #16]	; (8004480 <HAL_RCC_GetPCLK2Freq+0x40>)
 800446e:	5cd3      	ldrb	r3, [r2, r3]
 8004470:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000
 8004480:	08007468 	.word	0x08007468

08004484 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	220f      	movs	r2, #15
 8004492:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004494:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <HAL_RCC_GetClockConfig+0x5c>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 0203 	and.w	r2, r3, #3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80044a0:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <HAL_RCC_GetClockConfig+0x5c>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80044ac:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <HAL_RCC_GetClockConfig+0x5c>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044b8:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <HAL_RCC_GetClockConfig+0x5c>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	08db      	lsrs	r3, r3, #3
 80044be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <HAL_RCC_GetClockConfig+0x60>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0207 	and.w	r2, r3, #7
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	601a      	str	r2, [r3, #0]
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40022000 	.word	0x40022000

080044e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b092      	sub	sp, #72	; 0x48
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80d0 	beq.w	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450c:	4b86      	ldr	r3, [pc, #536]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10e      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004518:	4b83      	ldr	r3, [pc, #524]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	4a82      	ldr	r2, [pc, #520]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800451e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004522:	61d3      	str	r3, [r2, #28]
 8004524:	4b80      	ldr	r3, [pc, #512]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004530:	2301      	movs	r3, #1
 8004532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004536:	4b7d      	ldr	r3, [pc, #500]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d118      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004542:	4b7a      	ldr	r3, [pc, #488]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a79      	ldr	r2, [pc, #484]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454e:	f7fc fd77 	bl	8001040 <HAL_GetTick>
 8004552:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	e008      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004556:	f7fc fd73 	bl	8001040 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b64      	cmp	r3, #100	; 0x64
 8004562:	d901      	bls.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e0db      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	4b70      	ldr	r3, [pc, #448]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004574:	4b6c      	ldr	r3, [pc, #432]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800457e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004580:	2b00      	cmp	r3, #0
 8004582:	d07d      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800458e:	429a      	cmp	r2, r3
 8004590:	d076      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004592:	4b65      	ldr	r3, [pc, #404]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800459c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045a0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	fa93 f3a3 	rbit	r3, r3
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ac:	fab3 f383 	clz	r3, r3
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	4b5e      	ldr	r3, [pc, #376]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	461a      	mov	r2, r3
 80045bc:	2301      	movs	r3, #1
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045d0:	fab3 f383 	clz	r3, r3
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	4b55      	ldr	r3, [pc, #340]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	461a      	mov	r2, r3
 80045e0:	2300      	movs	r3, #0
 80045e2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045e4:	4a50      	ldr	r2, [pc, #320]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d045      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fc fd24 	bl	8001040 <HAL_GetTick>
 80045f8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fa:	e00a      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fc:	f7fc fd20 	bl	8001040 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	; 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e086      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004612:	2302      	movs	r3, #2
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	fa93 f3a3 	rbit	r3, r3
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
 800461e:	2302      	movs	r3, #2
 8004620:	623b      	str	r3, [r7, #32]
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	fa93 f3a3 	rbit	r3, r3
 8004628:	61fb      	str	r3, [r7, #28]
  return result;
 800462a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462c:	fab3 f383 	clz	r3, r3
 8004630:	b2db      	uxtb	r3, r3
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f043 0302 	orr.w	r3, r3, #2
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d102      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004640:	4b39      	ldr	r3, [pc, #228]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	e007      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004646:	2302      	movs	r3, #2
 8004648:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	fa93 f3a3 	rbit	r3, r3
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	4b35      	ldr	r3, [pc, #212]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	2202      	movs	r2, #2
 8004658:	613a      	str	r2, [r7, #16]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	fa92 f2a2 	rbit	r2, r2
 8004660:	60fa      	str	r2, [r7, #12]
  return result;
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	fab2 f282 	clz	r2, r2
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	f002 021f 	and.w	r2, r2, #31
 8004674:	2101      	movs	r1, #1
 8004676:	fa01 f202 	lsl.w	r2, r1, r2
 800467a:	4013      	ands	r3, r2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0bd      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004680:	4b29      	ldr	r3, [pc, #164]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	4926      	ldr	r1, [pc, #152]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800468e:	4313      	orrs	r3, r2
 8004690:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004692:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004696:	2b01      	cmp	r3, #1
 8004698:	d105      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800469a:	4b23      	ldr	r3, [pc, #140]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	4a22      	ldr	r2, [pc, #136]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046b2:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f023 0203 	bic.w	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	491a      	ldr	r1, [pc, #104]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046d0:	4b15      	ldr	r3, [pc, #84]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	f023 0210 	bic.w	r2, r3, #16
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4912      	ldr	r1, [pc, #72]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80046ee:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	490b      	ldr	r1, [pc, #44]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	4903      	ldr	r1, [pc, #12]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800471a:	4313      	orrs	r3, r2
 800471c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3748      	adds	r7, #72	; 0x48
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40021000 	.word	0x40021000
 800472c:	40007000 	.word	0x40007000
 8004730:	10908100 	.word	0x10908100

08004734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e01d      	b.n	8004782 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f815 	bl	800478a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3304      	adds	r3, #4
 8004770:	4619      	mov	r1, r3
 8004772:	4610      	mov	r0, r2
 8004774:	f000 fb5a 	bl	8004e2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <HAL_TIM_Base_Start_IT+0x50>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b06      	cmp	r3, #6
 80047c8:	d00b      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x42>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d0:	d007      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	00010007 	.word	0x00010007

080047f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e01d      	b.n	8004842 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fc facc 	bl	8000db8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f000 fafa 	bl	8004e2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b086      	sub	sp, #24
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e083      	b.n	8004966 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fc fa60 	bl	8000d38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800488e:	f023 0307 	bic.w	r3, r3, #7
 8004892:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3304      	adds	r3, #4
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f000 fac4 	bl	8004e2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048cc:	f023 0303 	bic.w	r3, r3, #3
 80048d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	4313      	orrs	r3, r2
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048ea:	f023 030c 	bic.w	r3, r3, #12
 80048ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	4313      	orrs	r3, r2
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	011a      	lsls	r2, r3, #4
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	031b      	lsls	r3, r3, #12
 800491a:	4313      	orrs	r3, r2
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004928:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004930:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	4313      	orrs	r3, r2
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b02      	cmp	r3, #2
 8004982:	d122      	bne.n	80049ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	d11b      	bne.n	80049ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f06f 0202 	mvn.w	r2, #2
 800499a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fa1d 	bl	8004df0 <HAL_TIM_IC_CaptureCallback>
 80049b6:	e005      	b.n	80049c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fa0f 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa20 	bl	8004e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d122      	bne.n	8004a1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d11b      	bne.n	8004a1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f06f 0204 	mvn.w	r2, #4
 80049ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f9f3 	bl	8004df0 <HAL_TIM_IC_CaptureCallback>
 8004a0a:	e005      	b.n	8004a18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f9e5 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f9f6 	bl	8004e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d122      	bne.n	8004a72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d11b      	bne.n	8004a72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f06f 0208 	mvn.w	r2, #8
 8004a42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2204      	movs	r2, #4
 8004a48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f9c9 	bl	8004df0 <HAL_TIM_IC_CaptureCallback>
 8004a5e:	e005      	b.n	8004a6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f9bb 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f9cc 	bl	8004e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b10      	cmp	r3, #16
 8004a7e:	d122      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d11b      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f06f 0210 	mvn.w	r2, #16
 8004a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f99f 	bl	8004df0 <HAL_TIM_IC_CaptureCallback>
 8004ab2:	e005      	b.n	8004ac0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f991 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f9a2 	bl	8004e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d10e      	bne.n	8004af2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d107      	bne.n	8004af2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f06f 0201 	mvn.w	r2, #1
 8004aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7fb ff4b 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afc:	2b80      	cmp	r3, #128	; 0x80
 8004afe:	d10e      	bne.n	8004b1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b80      	cmp	r3, #128	; 0x80
 8004b0c:	d107      	bne.n	8004b1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fd1d 	bl	8005558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2c:	d10e      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b38:	2b80      	cmp	r3, #128	; 0x80
 8004b3a:	d107      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fd10 	bl	800556c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b56:	2b40      	cmp	r3, #64	; 0x40
 8004b58:	d10e      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b40      	cmp	r3, #64	; 0x40
 8004b66:	d107      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f950 	bl	8004e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d10e      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d107      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0220 	mvn.w	r2, #32
 8004b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fcd0 	bl	8005544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ba4:	bf00      	nop
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e105      	b.n	8004dd2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b14      	cmp	r3, #20
 8004bda:	f200 80f0 	bhi.w	8004dbe <HAL_TIM_PWM_ConfigChannel+0x212>
 8004bde:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004c39 	.word	0x08004c39
 8004be8:	08004dbf 	.word	0x08004dbf
 8004bec:	08004dbf 	.word	0x08004dbf
 8004bf0:	08004dbf 	.word	0x08004dbf
 8004bf4:	08004c79 	.word	0x08004c79
 8004bf8:	08004dbf 	.word	0x08004dbf
 8004bfc:	08004dbf 	.word	0x08004dbf
 8004c00:	08004dbf 	.word	0x08004dbf
 8004c04:	08004cbb 	.word	0x08004cbb
 8004c08:	08004dbf 	.word	0x08004dbf
 8004c0c:	08004dbf 	.word	0x08004dbf
 8004c10:	08004dbf 	.word	0x08004dbf
 8004c14:	08004cfb 	.word	0x08004cfb
 8004c18:	08004dbf 	.word	0x08004dbf
 8004c1c:	08004dbf 	.word	0x08004dbf
 8004c20:	08004dbf 	.word	0x08004dbf
 8004c24:	08004d3d 	.word	0x08004d3d
 8004c28:	08004dbf 	.word	0x08004dbf
 8004c2c:	08004dbf 	.word	0x08004dbf
 8004c30:	08004dbf 	.word	0x08004dbf
 8004c34:	08004d7d 	.word	0x08004d7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 f96c 	bl	8004f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0208 	orr.w	r2, r2, #8
 8004c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0204 	bic.w	r2, r2, #4
 8004c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6999      	ldr	r1, [r3, #24]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	619a      	str	r2, [r3, #24]
      break;
 8004c76:	e0a3      	b.n	8004dc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 f9d2 	bl	8005028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6999      	ldr	r1, [r3, #24]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	021a      	lsls	r2, r3, #8
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	619a      	str	r2, [r3, #24]
      break;
 8004cb8:	e082      	b.n	8004dc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fa31 	bl	8005128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0208 	orr.w	r2, r2, #8
 8004cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0204 	bic.w	r2, r2, #4
 8004ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69d9      	ldr	r1, [r3, #28]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	61da      	str	r2, [r3, #28]
      break;
 8004cf8:	e062      	b.n	8004dc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fa8f 	bl	8005224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69d9      	ldr	r1, [r3, #28]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	021a      	lsls	r2, r3, #8
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	61da      	str	r2, [r3, #28]
      break;
 8004d3a:	e041      	b.n	8004dc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fad2 	bl	80052ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0208 	orr.w	r2, r2, #8
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0204 	bic.w	r2, r2, #4
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d7a:	e021      	b.n	8004dc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fb10 	bl	80053a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	021a      	lsls	r2, r3, #8
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004dbc:	e000      	b.n	8004dc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004dbe:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop

08004ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a32      	ldr	r2, [pc, #200]	; (8004f08 <TIM_Base_SetConfig+0xdc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d007      	beq.n	8004e54 <TIM_Base_SetConfig+0x28>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4a:	d003      	beq.n	8004e54 <TIM_Base_SetConfig+0x28>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <TIM_Base_SetConfig+0xe0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d108      	bne.n	8004e66 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a27      	ldr	r2, [pc, #156]	; (8004f08 <TIM_Base_SetConfig+0xdc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <TIM_Base_SetConfig+0x6a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e74:	d00f      	beq.n	8004e96 <TIM_Base_SetConfig+0x6a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a24      	ldr	r2, [pc, #144]	; (8004f0c <TIM_Base_SetConfig+0xe0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00b      	beq.n	8004e96 <TIM_Base_SetConfig+0x6a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a23      	ldr	r2, [pc, #140]	; (8004f10 <TIM_Base_SetConfig+0xe4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d007      	beq.n	8004e96 <TIM_Base_SetConfig+0x6a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a22      	ldr	r2, [pc, #136]	; (8004f14 <TIM_Base_SetConfig+0xe8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_Base_SetConfig+0x6a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a21      	ldr	r2, [pc, #132]	; (8004f18 <TIM_Base_SetConfig+0xec>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d108      	bne.n	8004ea8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a0e      	ldr	r2, [pc, #56]	; (8004f08 <TIM_Base_SetConfig+0xdc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00b      	beq.n	8004eec <TIM_Base_SetConfig+0xc0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a0e      	ldr	r2, [pc, #56]	; (8004f10 <TIM_Base_SetConfig+0xe4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <TIM_Base_SetConfig+0xc0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a0d      	ldr	r2, [pc, #52]	; (8004f14 <TIM_Base_SetConfig+0xe8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_Base_SetConfig+0xc0>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a0c      	ldr	r2, [pc, #48]	; (8004f18 <TIM_Base_SetConfig+0xec>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d103      	bne.n	8004ef4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	615a      	str	r2, [r3, #20]
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40014400 	.word	0x40014400
 8004f18:	40014800 	.word	0x40014800

08004f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f023 0201 	bic.w	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0303 	bic.w	r3, r3, #3
 8004f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f023 0302 	bic.w	r3, r3, #2
 8004f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a28      	ldr	r2, [pc, #160]	; (8005018 <TIM_OC1_SetConfig+0xfc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00b      	beq.n	8004f94 <TIM_OC1_SetConfig+0x78>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a27      	ldr	r2, [pc, #156]	; (800501c <TIM_OC1_SetConfig+0x100>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d007      	beq.n	8004f94 <TIM_OC1_SetConfig+0x78>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a26      	ldr	r2, [pc, #152]	; (8005020 <TIM_OC1_SetConfig+0x104>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_OC1_SetConfig+0x78>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a25      	ldr	r2, [pc, #148]	; (8005024 <TIM_OC1_SetConfig+0x108>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d10c      	bne.n	8004fae <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f023 0308 	bic.w	r3, r3, #8
 8004f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f023 0304 	bic.w	r3, r3, #4
 8004fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a19      	ldr	r2, [pc, #100]	; (8005018 <TIM_OC1_SetConfig+0xfc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00b      	beq.n	8004fce <TIM_OC1_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a18      	ldr	r2, [pc, #96]	; (800501c <TIM_OC1_SetConfig+0x100>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d007      	beq.n	8004fce <TIM_OC1_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a17      	ldr	r2, [pc, #92]	; (8005020 <TIM_OC1_SetConfig+0x104>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d003      	beq.n	8004fce <TIM_OC1_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a16      	ldr	r2, [pc, #88]	; (8005024 <TIM_OC1_SetConfig+0x108>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d111      	bne.n	8004ff2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	621a      	str	r2, [r3, #32]
}
 800500c:	bf00      	nop
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	40012c00 	.word	0x40012c00
 800501c:	40014000 	.word	0x40014000
 8005020:	40014400 	.word	0x40014400
 8005024:	40014800 	.word	0x40014800

08005028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0210 	bic.w	r2, r3, #16
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0320 	bic.w	r3, r3, #32
 8005076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a24      	ldr	r2, [pc, #144]	; (8005118 <TIM_OC2_SetConfig+0xf0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d10d      	bne.n	80050a8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a1b      	ldr	r2, [pc, #108]	; (8005118 <TIM_OC2_SetConfig+0xf0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00b      	beq.n	80050c8 <TIM_OC2_SetConfig+0xa0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a1a      	ldr	r2, [pc, #104]	; (800511c <TIM_OC2_SetConfig+0xf4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d007      	beq.n	80050c8 <TIM_OC2_SetConfig+0xa0>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a19      	ldr	r2, [pc, #100]	; (8005120 <TIM_OC2_SetConfig+0xf8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_OC2_SetConfig+0xa0>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a18      	ldr	r2, [pc, #96]	; (8005124 <TIM_OC2_SetConfig+0xfc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d113      	bne.n	80050f0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ce:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050d6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40012c00 	.word	0x40012c00
 800511c:	40014000 	.word	0x40014000
 8005120:	40014400 	.word	0x40014400
 8005124:	40014800 	.word	0x40014800

08005128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0303 	bic.w	r3, r3, #3
 8005162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a23      	ldr	r2, [pc, #140]	; (8005214 <TIM_OC3_SetConfig+0xec>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d10d      	bne.n	80051a6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051a4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a1a      	ldr	r2, [pc, #104]	; (8005214 <TIM_OC3_SetConfig+0xec>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00b      	beq.n	80051c6 <TIM_OC3_SetConfig+0x9e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a19      	ldr	r2, [pc, #100]	; (8005218 <TIM_OC3_SetConfig+0xf0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d007      	beq.n	80051c6 <TIM_OC3_SetConfig+0x9e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a18      	ldr	r2, [pc, #96]	; (800521c <TIM_OC3_SetConfig+0xf4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d003      	beq.n	80051c6 <TIM_OC3_SetConfig+0x9e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a17      	ldr	r2, [pc, #92]	; (8005220 <TIM_OC3_SetConfig+0xf8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d113      	bne.n	80051ee <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	621a      	str	r2, [r3, #32]
}
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40014000 	.word	0x40014000
 800521c:	40014400 	.word	0x40014400
 8005220:	40014800 	.word	0x40014800

08005224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a16      	ldr	r2, [pc, #88]	; (80052dc <TIM_OC4_SetConfig+0xb8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00b      	beq.n	80052a0 <TIM_OC4_SetConfig+0x7c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <TIM_OC4_SetConfig+0xbc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d007      	beq.n	80052a0 <TIM_OC4_SetConfig+0x7c>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <TIM_OC4_SetConfig+0xc0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d003      	beq.n	80052a0 <TIM_OC4_SetConfig+0x7c>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a13      	ldr	r2, [pc, #76]	; (80052e8 <TIM_OC4_SetConfig+0xc4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d109      	bne.n	80052b4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	019b      	lsls	r3, r3, #6
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	621a      	str	r2, [r3, #32]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800

080052ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005330:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	041b      	lsls	r3, r3, #16
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a15      	ldr	r2, [pc, #84]	; (8005398 <TIM_OC5_SetConfig+0xac>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00b      	beq.n	800535e <TIM_OC5_SetConfig+0x72>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a14      	ldr	r2, [pc, #80]	; (800539c <TIM_OC5_SetConfig+0xb0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d007      	beq.n	800535e <TIM_OC5_SetConfig+0x72>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a13      	ldr	r2, [pc, #76]	; (80053a0 <TIM_OC5_SetConfig+0xb4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_OC5_SetConfig+0x72>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a12      	ldr	r2, [pc, #72]	; (80053a4 <TIM_OC5_SetConfig+0xb8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d109      	bne.n	8005372 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005364:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	621a      	str	r2, [r3, #32]
}
 800538c:	bf00      	nop
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	40012c00 	.word	0x40012c00
 800539c:	40014000 	.word	0x40014000
 80053a0:	40014400 	.word	0x40014400
 80053a4:	40014800 	.word	0x40014800

080053a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	051b      	lsls	r3, r3, #20
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a16      	ldr	r2, [pc, #88]	; (8005458 <TIM_OC6_SetConfig+0xb0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00b      	beq.n	800541c <TIM_OC6_SetConfig+0x74>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a15      	ldr	r2, [pc, #84]	; (800545c <TIM_OC6_SetConfig+0xb4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d007      	beq.n	800541c <TIM_OC6_SetConfig+0x74>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a14      	ldr	r2, [pc, #80]	; (8005460 <TIM_OC6_SetConfig+0xb8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d003      	beq.n	800541c <TIM_OC6_SetConfig+0x74>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a13      	ldr	r2, [pc, #76]	; (8005464 <TIM_OC6_SetConfig+0xbc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d109      	bne.n	8005430 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005422:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	029b      	lsls	r3, r3, #10
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	621a      	str	r2, [r3, #32]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40012c00 	.word	0x40012c00
 800545c:	40014000 	.word	0x40014000
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800

08005468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800547c:	2302      	movs	r3, #2
 800547e:	e054      	b.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a24      	ldr	r2, [pc, #144]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d108      	bne.n	80054bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a17      	ldr	r2, [pc, #92]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00e      	beq.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e8:	d009      	beq.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a13      	ldr	r2, [pc, #76]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d004      	beq.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a11      	ldr	r2, [pc, #68]	; (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d10c      	bne.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	4313      	orrs	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40012c00 	.word	0x40012c00
 800553c:	40000400 	.word	0x40000400
 8005540:	40014000 	.word	0x40014000

08005544 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e040      	b.n	8005614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fb fcac 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2224      	movs	r2, #36	; 0x24
 80055ac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0201 	bic.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f986 	bl	80058d0 <UART_SetConfig>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e022      	b.n	8005614 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fafc 	bl	8005bd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fb83 	bl	8005d18 <UART_CheckIdleState>
 8005612:	4603      	mov	r3, r0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005642:	4013      	ands	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d113      	bne.n	8005674 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00e      	beq.n	8005674 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d009      	beq.n	8005674 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8114 	beq.w	8005892 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	4798      	blx	r3
      }
      return;
 8005672:	e10e      	b.n	8005892 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 80d6 	beq.w	8005828 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d105      	bne.n	8005692 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80cb 	beq.w	8005828 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00e      	beq.n	80056ba <HAL_UART_IRQHandler+0x9e>
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2201      	movs	r2, #1
 80056ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b2:	f043 0201 	orr.w	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00e      	beq.n	80056e2 <HAL_UART_IRQHandler+0xc6>
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2202      	movs	r2, #2
 80056d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056da:	f043 0204 	orr.w	r2, r3, #4
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00e      	beq.n	800570a <HAL_UART_IRQHandler+0xee>
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d009      	beq.n	800570a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2204      	movs	r2, #4
 80056fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005702:	f043 0202 	orr.w	r2, r3, #2
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b00      	cmp	r3, #0
 8005712:	d013      	beq.n	800573c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005724:	2b00      	cmp	r3, #0
 8005726:	d009      	beq.n	800573c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2208      	movs	r2, #8
 800572e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005734:	f043 0208 	orr.w	r2, r3, #8
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00f      	beq.n	8005766 <HAL_UART_IRQHandler+0x14a>
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005758:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800575e:	f043 0220 	orr.w	r2, r3, #32
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 8093 	beq.w	8005896 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00c      	beq.n	8005794 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005798:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a4:	2b40      	cmp	r3, #64	; 0x40
 80057a6:	d004      	beq.n	80057b2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d031      	beq.n	8005816 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fb70 	bl	8005e98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c2:	2b40      	cmp	r3, #64	; 0x40
 80057c4:	d123      	bne.n	800580e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057d4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d013      	beq.n	8005806 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e2:	4a30      	ldr	r2, [pc, #192]	; (80058a4 <HAL_UART_IRQHandler+0x288>)
 80057e4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fd fb42 	bl	8002e74 <HAL_DMA_Abort_IT>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d016      	beq.n	8005824 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005800:	4610      	mov	r0, r2
 8005802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005804:	e00e      	b.n	8005824 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f858 	bl	80058bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800580c:	e00a      	b.n	8005824 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f854 	bl	80058bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005814:	e006      	b.n	8005824 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f850 	bl	80058bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005822:	e038      	b.n	8005896 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005824:	bf00      	nop
    return;
 8005826:	e036      	b.n	8005896 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00d      	beq.n	800584e <HAL_UART_IRQHandler+0x232>
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005844:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fb75 	bl	8005f36 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800584c:	e026      	b.n	800589c <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00d      	beq.n	8005874 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585e:	2b00      	cmp	r3, #0
 8005860:	d008      	beq.n	8005874 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005866:	2b00      	cmp	r3, #0
 8005868:	d017      	beq.n	800589a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	4798      	blx	r3
    }
    return;
 8005872:	e012      	b.n	800589a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00e      	beq.n	800589c <HAL_UART_IRQHandler+0x280>
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fb3b 	bl	8005f04 <UART_EndTransmit_IT>
    return;
 800588e:	bf00      	nop
 8005890:	e004      	b.n	800589c <HAL_UART_IRQHandler+0x280>
      return;
 8005892:	bf00      	nop
 8005894:	e002      	b.n	800589c <HAL_UART_IRQHandler+0x280>
    return;
 8005896:	bf00      	nop
 8005898:	e000      	b.n	800589c <HAL_UART_IRQHandler+0x280>
    return;
 800589a:	bf00      	nop
  }

}
 800589c:	3720      	adds	r7, #32
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	08005ed9 	.word	0x08005ed9

080058a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4ba2      	ldr	r3, [pc, #648]	; (8005b88 <UART_SetConfig+0x2b8>)
 8005900:	4013      	ands	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	6939      	ldr	r1, [r7, #16]
 8005908:	430b      	orrs	r3, r1
 800590a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	430a      	orrs	r2, r1
 8005944:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a90      	ldr	r2, [pc, #576]	; (8005b8c <UART_SetConfig+0x2bc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d121      	bne.n	8005994 <UART_SetConfig+0xc4>
 8005950:	4b8f      	ldr	r3, [pc, #572]	; (8005b90 <UART_SetConfig+0x2c0>)
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b03      	cmp	r3, #3
 800595a:	d817      	bhi.n	800598c <UART_SetConfig+0xbc>
 800595c:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <UART_SetConfig+0x94>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	08005975 	.word	0x08005975
 8005968:	08005981 	.word	0x08005981
 800596c:	08005987 	.word	0x08005987
 8005970:	0800597b 	.word	0x0800597b
 8005974:	2300      	movs	r3, #0
 8005976:	77fb      	strb	r3, [r7, #31]
 8005978:	e01e      	b.n	80059b8 <UART_SetConfig+0xe8>
 800597a:	2302      	movs	r3, #2
 800597c:	77fb      	strb	r3, [r7, #31]
 800597e:	e01b      	b.n	80059b8 <UART_SetConfig+0xe8>
 8005980:	2304      	movs	r3, #4
 8005982:	77fb      	strb	r3, [r7, #31]
 8005984:	e018      	b.n	80059b8 <UART_SetConfig+0xe8>
 8005986:	2308      	movs	r3, #8
 8005988:	77fb      	strb	r3, [r7, #31]
 800598a:	e015      	b.n	80059b8 <UART_SetConfig+0xe8>
 800598c:	2310      	movs	r3, #16
 800598e:	77fb      	strb	r3, [r7, #31]
 8005990:	bf00      	nop
 8005992:	e011      	b.n	80059b8 <UART_SetConfig+0xe8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a7e      	ldr	r2, [pc, #504]	; (8005b94 <UART_SetConfig+0x2c4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d102      	bne.n	80059a4 <UART_SetConfig+0xd4>
 800599e:	2300      	movs	r3, #0
 80059a0:	77fb      	strb	r3, [r7, #31]
 80059a2:	e009      	b.n	80059b8 <UART_SetConfig+0xe8>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a7b      	ldr	r2, [pc, #492]	; (8005b98 <UART_SetConfig+0x2c8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d102      	bne.n	80059b4 <UART_SetConfig+0xe4>
 80059ae:	2300      	movs	r3, #0
 80059b0:	77fb      	strb	r3, [r7, #31]
 80059b2:	e001      	b.n	80059b8 <UART_SetConfig+0xe8>
 80059b4:	2310      	movs	r3, #16
 80059b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c0:	f040 8082 	bne.w	8005ac8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80059c4:	7ffb      	ldrb	r3, [r7, #31]
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d85e      	bhi.n	8005a88 <UART_SetConfig+0x1b8>
 80059ca:	a201      	add	r2, pc, #4	; (adr r2, 80059d0 <UART_SetConfig+0x100>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	080059f5 	.word	0x080059f5
 80059d4:	08005a15 	.word	0x08005a15
 80059d8:	08005a35 	.word	0x08005a35
 80059dc:	08005a89 	.word	0x08005a89
 80059e0:	08005a51 	.word	0x08005a51
 80059e4:	08005a89 	.word	0x08005a89
 80059e8:	08005a89 	.word	0x08005a89
 80059ec:	08005a89 	.word	0x08005a89
 80059f0:	08005a71 	.word	0x08005a71
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f4:	f7fe fd02 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 80059f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	005a      	lsls	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	441a      	add	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	61bb      	str	r3, [r7, #24]
        break;
 8005a12:	e03c      	b.n	8005a8e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a14:	f7fe fd14 	bl	8004440 <HAL_RCC_GetPCLK2Freq>
 8005a18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	005a      	lsls	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	085b      	lsrs	r3, r3, #1
 8005a24:	441a      	add	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	61bb      	str	r3, [r7, #24]
        break;
 8005a32:	e02c      	b.n	8005a8e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	085b      	lsrs	r3, r3, #1
 8005a3a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005a3e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6852      	ldr	r2, [r2, #4]
 8005a46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	61bb      	str	r3, [r7, #24]
        break;
 8005a4e:	e01e      	b.n	8005a8e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a50:	f7fe fc5c 	bl	800430c <HAL_RCC_GetSysClockFreq>
 8005a54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	005a      	lsls	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	441a      	add	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	61bb      	str	r3, [r7, #24]
        break;
 8005a6e:	e00e      	b.n	8005a8e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	085b      	lsrs	r3, r3, #1
 8005a76:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	61bb      	str	r3, [r7, #24]
        break;
 8005a86:	e002      	b.n	8005a8e <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	75fb      	strb	r3, [r7, #23]
        break;
 8005a8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b0f      	cmp	r3, #15
 8005a92:	d916      	bls.n	8005ac2 <UART_SetConfig+0x1f2>
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a9a:	d212      	bcs.n	8005ac2 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f023 030f 	bic.w	r3, r3, #15
 8005aa4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	897b      	ldrh	r3, [r7, #10]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	897a      	ldrh	r2, [r7, #10]
 8005abe:	60da      	str	r2, [r3, #12]
 8005ac0:	e07d      	b.n	8005bbe <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	75fb      	strb	r3, [r7, #23]
 8005ac6:	e07a      	b.n	8005bbe <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8005ac8:	7ffb      	ldrb	r3, [r7, #31]
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d866      	bhi.n	8005b9c <UART_SetConfig+0x2cc>
 8005ace:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <UART_SetConfig+0x204>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005af9 	.word	0x08005af9
 8005ad8:	08005b17 	.word	0x08005b17
 8005adc:	08005b35 	.word	0x08005b35
 8005ae0:	08005b9d 	.word	0x08005b9d
 8005ae4:	08005b51 	.word	0x08005b51
 8005ae8:	08005b9d 	.word	0x08005b9d
 8005aec:	08005b9d 	.word	0x08005b9d
 8005af0:	08005b9d 	.word	0x08005b9d
 8005af4:	08005b6f 	.word	0x08005b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af8:	f7fe fc80 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 8005afc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	085a      	lsrs	r2, r3, #1
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	441a      	add	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	61bb      	str	r3, [r7, #24]
        break;
 8005b14:	e045      	b.n	8005ba2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b16:	f7fe fc93 	bl	8004440 <HAL_RCC_GetPCLK2Freq>
 8005b1a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	085a      	lsrs	r2, r3, #1
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	441a      	add	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	61bb      	str	r3, [r7, #24]
        break;
 8005b32:	e036      	b.n	8005ba2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	085b      	lsrs	r3, r3, #1
 8005b3a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005b3e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6852      	ldr	r2, [r2, #4]
 8005b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	61bb      	str	r3, [r7, #24]
        break;
 8005b4e:	e028      	b.n	8005ba2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b50:	f7fe fbdc 	bl	800430c <HAL_RCC_GetSysClockFreq>
 8005b54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	085a      	lsrs	r2, r3, #1
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	441a      	add	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	61bb      	str	r3, [r7, #24]
        break;
 8005b6c:	e019      	b.n	8005ba2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	085b      	lsrs	r3, r3, #1
 8005b74:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	61bb      	str	r3, [r7, #24]
        break;
 8005b84:	e00d      	b.n	8005ba2 <UART_SetConfig+0x2d2>
 8005b86:	bf00      	nop
 8005b88:	efff69f3 	.word	0xefff69f3
 8005b8c:	40013800 	.word	0x40013800
 8005b90:	40021000 	.word	0x40021000
 8005b94:	40004400 	.word	0x40004400
 8005b98:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	75fb      	strb	r3, [r7, #23]
        break;
 8005ba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b0f      	cmp	r3, #15
 8005ba6:	d908      	bls.n	8005bba <UART_SetConfig+0x2ea>
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bae:	d204      	bcs.n	8005bba <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	60da      	str	r2, [r3, #12]
 8005bb8:	e001      	b.n	8005bbe <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01a      	beq.n	8005cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cd2:	d10a      	bne.n	8005cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	605a      	str	r2, [r3, #4]
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005d26:	f7fb f98b 	bl	8001040 <HAL_GetTick>
 8005d2a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d10e      	bne.n	8005d58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f82a 	bl	8005da2 <UART_WaitOnFlagUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e020      	b.n	8005d9a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d10e      	bne.n	8005d84 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f814 	bl	8005da2 <UART_WaitOnFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e00a      	b.n	8005d9a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	603b      	str	r3, [r7, #0]
 8005dae:	4613      	mov	r3, r2
 8005db0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db2:	e05d      	b.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dba:	d059      	beq.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dbc:	f7fb f940 	bl	8001040 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d302      	bcc.n	8005dd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d11b      	bne.n	8005e0a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005de0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0201 	bic.w	r2, r2, #1
 8005df0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2220      	movs	r2, #32
 8005df6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e042      	b.n	8005e90 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d02b      	beq.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e26:	d123      	bne.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e30:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e40:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0201 	bic.w	r2, r2, #1
 8005e50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e00f      	b.n	8005e90 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69da      	ldr	r2, [r3, #28]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d092      	beq.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005eae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0201 	bic.w	r2, r2, #1
 8005ebe:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff fce0 	bl	80058bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005efc:	bf00      	nop
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff fcbd 	bl	80058a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	4603      	mov	r3, r0
 8005f52:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f5c:	2b84      	cmp	r3, #132	; 0x84
 8005f5e:	d005      	beq.n	8005f6c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005f60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	3303      	adds	r3, #3
 8005f6a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005f7e:	f000 fad1 	bl	8006524 <vTaskStartScheduler>
  
  return osOK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8a:	b089      	sub	sp, #36	; 0x24
 8005f8c:	af04      	add	r7, sp, #16
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d020      	beq.n	8005fdc <osThreadCreate+0x54>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d01c      	beq.n	8005fdc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685c      	ldr	r4, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681d      	ldr	r5, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691e      	ldr	r6, [r3, #16]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff ffc8 	bl	8005f4a <makeFreeRtosPriority>
 8005fba:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fc4:	9202      	str	r2, [sp, #8]
 8005fc6:	9301      	str	r3, [sp, #4]
 8005fc8:	9100      	str	r1, [sp, #0]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	4632      	mov	r2, r6
 8005fce:	4629      	mov	r1, r5
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 f8ed 	bl	80061b0 <xTaskCreateStatic>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	e01c      	b.n	8006016 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685c      	ldr	r4, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fe8:	b29e      	uxth	r6, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff ffaa 	bl	8005f4a <makeFreeRtosPriority>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	f107 030c 	add.w	r3, r7, #12
 8005ffc:	9301      	str	r3, [sp, #4]
 8005ffe:	9200      	str	r2, [sp, #0]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	4632      	mov	r2, r6
 8006004:	4629      	mov	r1, r5
 8006006:	4620      	mov	r0, r4
 8006008:	f000 f92b 	bl	8006262 <xTaskCreate>
 800600c:	4603      	mov	r3, r0
 800600e:	2b01      	cmp	r3, #1
 8006010:	d001      	beq.n	8006016 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	e000      	b.n	8006018 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006016:	68fb      	ldr	r3, [r7, #12]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006020 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <osDelay+0x16>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	e000      	b.n	8006038 <osDelay+0x18>
 8006036:	2301      	movs	r3, #1
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fa3f 	bl	80064bc <vTaskDelay>
  
  return osOK;
 800603e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f103 0208 	add.w	r2, r3, #8
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f04f 32ff 	mov.w	r2, #4294967295
 8006060:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f103 0208 	add.w	r2, r3, #8
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f103 0208 	add.w	r2, r3, #8
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060a2:	b480      	push	{r7}
 80060a4:	b085      	sub	sp, #20
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	601a      	str	r2, [r3, #0]
}
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060ea:	b480      	push	{r7}
 80060ec:	b085      	sub	sp, #20
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006100:	d103      	bne.n	800610a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	e00c      	b.n	8006124 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3308      	adds	r3, #8
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	e002      	b.n	8006118 <vListInsert+0x2e>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	429a      	cmp	r2, r3
 8006122:	d2f6      	bcs.n	8006112 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	601a      	str	r2, [r3, #0]
}
 8006150:	bf00      	nop
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6892      	ldr	r2, [r2, #8]
 8006172:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6852      	ldr	r2, [r2, #4]
 800617c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	429a      	cmp	r2, r3
 8006186:	d103      	bne.n	8006190 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	1e5a      	subs	r2, r3, #1
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08e      	sub	sp, #56	; 0x38
 80061b4:	af04      	add	r7, sp, #16
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d109      	bne.n	80061d8 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	623b      	str	r3, [r7, #32]
 80061d6:	e7fe      	b.n	80061d6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d109      	bne.n	80061f2 <xTaskCreateStatic+0x42>
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	61fb      	str	r3, [r7, #28]
 80061f0:	e7fe      	b.n	80061f0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061f2:	2354      	movs	r3, #84	; 0x54
 80061f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b54      	cmp	r3, #84	; 0x54
 80061fa:	d009      	beq.n	8006210 <xTaskCreateStatic+0x60>
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	e7fe      	b.n	800620e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006212:	2b00      	cmp	r3, #0
 8006214:	d01e      	beq.n	8006254 <xTaskCreateStatic+0xa4>
 8006216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01b      	beq.n	8006254 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006224:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	2202      	movs	r2, #2
 800622a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800622e:	2300      	movs	r3, #0
 8006230:	9303      	str	r3, [sp, #12]
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	9302      	str	r3, [sp, #8]
 8006236:	f107 0314 	add.w	r3, r7, #20
 800623a:	9301      	str	r3, [sp, #4]
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f850 	bl	80062ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800624c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800624e:	f000 f8cb 	bl	80063e8 <prvAddNewTaskToReadyList>
 8006252:	e001      	b.n	8006258 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006258:	697b      	ldr	r3, [r7, #20]
	}
 800625a:	4618      	mov	r0, r3
 800625c:	3728      	adds	r7, #40	; 0x28
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006262:	b580      	push	{r7, lr}
 8006264:	b08c      	sub	sp, #48	; 0x30
 8006266:	af04      	add	r7, sp, #16
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	603b      	str	r3, [r7, #0]
 800626e:	4613      	mov	r3, r2
 8006270:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4618      	mov	r0, r3
 8006278:	f000 feb4 	bl	8006fe4 <pvPortMalloc>
 800627c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00e      	beq.n	80062a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006284:	2054      	movs	r0, #84	; 0x54
 8006286:	f000 fead 	bl	8006fe4 <pvPortMalloc>
 800628a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
 8006298:	e005      	b.n	80062a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800629a:	6978      	ldr	r0, [r7, #20]
 800629c:	f000 ff64 	bl	8007168 <vPortFree>
 80062a0:	e001      	b.n	80062a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d017      	beq.n	80062dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062b4:	88fa      	ldrh	r2, [r7, #6]
 80062b6:	2300      	movs	r3, #0
 80062b8:	9303      	str	r3, [sp, #12]
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	9302      	str	r3, [sp, #8]
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 f80e 	bl	80062ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062d0:	69f8      	ldr	r0, [r7, #28]
 80062d2:	f000 f889 	bl	80063e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062d6:	2301      	movs	r3, #1
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	e002      	b.n	80062e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062dc:	f04f 33ff 	mov.w	r3, #4294967295
 80062e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062e2:	69bb      	ldr	r3, [r7, #24]
	}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3720      	adds	r7, #32
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006304:	3b01      	subs	r3, #1
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	f023 0307 	bic.w	r3, r3, #7
 8006312:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <prvInitialiseNewTask+0x46>
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e7fe      	b.n	8006330 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
 8006336:	e012      	b.n	800635e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	4413      	add	r3, r2
 800633e:	7819      	ldrb	r1, [r3, #0]
 8006340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	3334      	adds	r3, #52	; 0x34
 8006348:	460a      	mov	r2, r1
 800634a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d006      	beq.n	8006366 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	3301      	adds	r3, #1
 800635c:	61fb      	str	r3, [r7, #28]
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	2b0f      	cmp	r3, #15
 8006362:	d9e9      	bls.n	8006338 <prvInitialiseNewTask+0x4c>
 8006364:	e000      	b.n	8006368 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006366:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	2b06      	cmp	r3, #6
 8006374:	d901      	bls.n	800637a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006376:	2306      	movs	r3, #6
 8006378:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800637e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006384:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	2200      	movs	r2, #0
 800638a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	3304      	adds	r3, #4
 8006390:	4618      	mov	r0, r3
 8006392:	f7ff fe79 	bl	8006088 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	3318      	adds	r3, #24
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff fe74 	bl	8006088 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	f1c3 0207 	rsb	r2, r3, #7
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	2200      	movs	r2, #0
 80063ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	68f9      	ldr	r1, [r7, #12]
 80063c8:	69b8      	ldr	r0, [r7, #24]
 80063ca:	f000 fc07 	bl	8006bdc <pxPortInitialiseStack>
 80063ce:	4602      	mov	r2, r0
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80063d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063e0:	bf00      	nop
 80063e2:	3720      	adds	r7, #32
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063f0:	f000 fd1c 	bl	8006e2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063f4:	4b2a      	ldr	r3, [pc, #168]	; (80064a0 <prvAddNewTaskToReadyList+0xb8>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3301      	adds	r3, #1
 80063fa:	4a29      	ldr	r2, [pc, #164]	; (80064a0 <prvAddNewTaskToReadyList+0xb8>)
 80063fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063fe:	4b29      	ldr	r3, [pc, #164]	; (80064a4 <prvAddNewTaskToReadyList+0xbc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006406:	4a27      	ldr	r2, [pc, #156]	; (80064a4 <prvAddNewTaskToReadyList+0xbc>)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800640c:	4b24      	ldr	r3, [pc, #144]	; (80064a0 <prvAddNewTaskToReadyList+0xb8>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d110      	bne.n	8006436 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006414:	f000 fabc 	bl	8006990 <prvInitialiseTaskLists>
 8006418:	e00d      	b.n	8006436 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800641a:	4b23      	ldr	r3, [pc, #140]	; (80064a8 <prvAddNewTaskToReadyList+0xc0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006422:	4b20      	ldr	r3, [pc, #128]	; (80064a4 <prvAddNewTaskToReadyList+0xbc>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	429a      	cmp	r2, r3
 800642e:	d802      	bhi.n	8006436 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006430:	4a1c      	ldr	r2, [pc, #112]	; (80064a4 <prvAddNewTaskToReadyList+0xbc>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006436:	4b1d      	ldr	r3, [pc, #116]	; (80064ac <prvAddNewTaskToReadyList+0xc4>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3301      	adds	r3, #1
 800643c:	4a1b      	ldr	r2, [pc, #108]	; (80064ac <prvAddNewTaskToReadyList+0xc4>)
 800643e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	2201      	movs	r2, #1
 8006446:	409a      	lsls	r2, r3
 8006448:	4b19      	ldr	r3, [pc, #100]	; (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4313      	orrs	r3, r2
 800644e:	4a18      	ldr	r2, [pc, #96]	; (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4a15      	ldr	r2, [pc, #84]	; (80064b4 <prvAddNewTaskToReadyList+0xcc>)
 8006460:	441a      	add	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3304      	adds	r3, #4
 8006466:	4619      	mov	r1, r3
 8006468:	4610      	mov	r0, r2
 800646a:	f7ff fe1a 	bl	80060a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800646e:	f000 fd0b 	bl	8006e88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006472:	4b0d      	ldr	r3, [pc, #52]	; (80064a8 <prvAddNewTaskToReadyList+0xc0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00e      	beq.n	8006498 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800647a:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <prvAddNewTaskToReadyList+0xbc>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	429a      	cmp	r2, r3
 8006486:	d207      	bcs.n	8006498 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006488:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <prvAddNewTaskToReadyList+0xd0>)
 800648a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	20000384 	.word	0x20000384
 80064a4:	20000284 	.word	0x20000284
 80064a8:	20000390 	.word	0x20000390
 80064ac:	200003a0 	.word	0x200003a0
 80064b0:	2000038c 	.word	0x2000038c
 80064b4:	20000288 	.word	0x20000288
 80064b8:	e000ed04 	.word	0xe000ed04

080064bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d016      	beq.n	80064fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064ce:	4b13      	ldr	r3, [pc, #76]	; (800651c <vTaskDelay+0x60>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <vTaskDelay+0x2e>
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	60bb      	str	r3, [r7, #8]
 80064e8:	e7fe      	b.n	80064e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80064ea:	f000 f879 	bl	80065e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064ee:	2100      	movs	r1, #0
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fb0d 	bl	8006b10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064f6:	f000 f881 	bl	80065fc <xTaskResumeAll>
 80064fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d107      	bne.n	8006512 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006502:	4b07      	ldr	r3, [pc, #28]	; (8006520 <vTaskDelay+0x64>)
 8006504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006512:	bf00      	nop
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	200003ac 	.word	0x200003ac
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08a      	sub	sp, #40	; 0x28
 8006528:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800652a:	2300      	movs	r3, #0
 800652c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800652e:	2300      	movs	r3, #0
 8006530:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006532:	463a      	mov	r2, r7
 8006534:	1d39      	adds	r1, r7, #4
 8006536:	f107 0308 	add.w	r3, r7, #8
 800653a:	4618      	mov	r0, r3
 800653c:	f7fa f86e 	bl	800061c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	9202      	str	r2, [sp, #8]
 8006548:	9301      	str	r3, [sp, #4]
 800654a:	2300      	movs	r3, #0
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	2300      	movs	r3, #0
 8006550:	460a      	mov	r2, r1
 8006552:	491d      	ldr	r1, [pc, #116]	; (80065c8 <vTaskStartScheduler+0xa4>)
 8006554:	481d      	ldr	r0, [pc, #116]	; (80065cc <vTaskStartScheduler+0xa8>)
 8006556:	f7ff fe2b 	bl	80061b0 <xTaskCreateStatic>
 800655a:	4602      	mov	r2, r0
 800655c:	4b1c      	ldr	r3, [pc, #112]	; (80065d0 <vTaskStartScheduler+0xac>)
 800655e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006560:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <vTaskStartScheduler+0xac>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006568:	2301      	movs	r3, #1
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e001      	b.n	8006572 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d115      	bne.n	80065a4 <vTaskStartScheduler+0x80>
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800658a:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <vTaskStartScheduler+0xb0>)
 800658c:	f04f 32ff 	mov.w	r2, #4294967295
 8006590:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006592:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <vTaskStartScheduler+0xb4>)
 8006594:	2201      	movs	r2, #1
 8006596:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006598:	4b10      	ldr	r3, [pc, #64]	; (80065dc <vTaskStartScheduler+0xb8>)
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800659e:	f000 fba7 	bl	8006cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065a2:	e00d      	b.n	80065c0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065aa:	d109      	bne.n	80065c0 <vTaskStartScheduler+0x9c>
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	e7fe      	b.n	80065be <vTaskStartScheduler+0x9a>
}
 80065c0:	bf00      	nop
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	08007450 	.word	0x08007450
 80065cc:	08006961 	.word	0x08006961
 80065d0:	200003a8 	.word	0x200003a8
 80065d4:	200003a4 	.word	0x200003a4
 80065d8:	20000390 	.word	0x20000390
 80065dc:	20000388 	.word	0x20000388

080065e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065e0:	b480      	push	{r7}
 80065e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80065e4:	4b04      	ldr	r3, [pc, #16]	; (80065f8 <vTaskSuspendAll+0x18>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3301      	adds	r3, #1
 80065ea:	4a03      	ldr	r2, [pc, #12]	; (80065f8 <vTaskSuspendAll+0x18>)
 80065ec:	6013      	str	r3, [r2, #0]
}
 80065ee:	bf00      	nop
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	200003ac 	.word	0x200003ac

080065fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006606:	2300      	movs	r3, #0
 8006608:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800660a:	4b41      	ldr	r3, [pc, #260]	; (8006710 <xTaskResumeAll+0x114>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d109      	bne.n	8006626 <xTaskResumeAll+0x2a>
 8006612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	e7fe      	b.n	8006624 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006626:	f000 fc01 	bl	8006e2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800662a:	4b39      	ldr	r3, [pc, #228]	; (8006710 <xTaskResumeAll+0x114>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3b01      	subs	r3, #1
 8006630:	4a37      	ldr	r2, [pc, #220]	; (8006710 <xTaskResumeAll+0x114>)
 8006632:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006634:	4b36      	ldr	r3, [pc, #216]	; (8006710 <xTaskResumeAll+0x114>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d161      	bne.n	8006700 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800663c:	4b35      	ldr	r3, [pc, #212]	; (8006714 <xTaskResumeAll+0x118>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d05d      	beq.n	8006700 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006644:	e02e      	b.n	80066a4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006646:	4b34      	ldr	r3, [pc, #208]	; (8006718 <xTaskResumeAll+0x11c>)
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3318      	adds	r3, #24
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff fd82 	bl	800615c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3304      	adds	r3, #4
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff fd7d 	bl	800615c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	2201      	movs	r2, #1
 8006668:	409a      	lsls	r2, r3
 800666a:	4b2c      	ldr	r3, [pc, #176]	; (800671c <xTaskResumeAll+0x120>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4313      	orrs	r3, r2
 8006670:	4a2a      	ldr	r2, [pc, #168]	; (800671c <xTaskResumeAll+0x120>)
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4a27      	ldr	r2, [pc, #156]	; (8006720 <xTaskResumeAll+0x124>)
 8006682:	441a      	add	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3304      	adds	r3, #4
 8006688:	4619      	mov	r1, r3
 800668a:	4610      	mov	r0, r2
 800668c:	f7ff fd09 	bl	80060a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006694:	4b23      	ldr	r3, [pc, #140]	; (8006724 <xTaskResumeAll+0x128>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	429a      	cmp	r2, r3
 800669c:	d302      	bcc.n	80066a4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800669e:	4b22      	ldr	r3, [pc, #136]	; (8006728 <xTaskResumeAll+0x12c>)
 80066a0:	2201      	movs	r2, #1
 80066a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066a4:	4b1c      	ldr	r3, [pc, #112]	; (8006718 <xTaskResumeAll+0x11c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1cc      	bne.n	8006646 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066b2:	f000 fa07 	bl	8006ac4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066b6:	4b1d      	ldr	r3, [pc, #116]	; (800672c <xTaskResumeAll+0x130>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d010      	beq.n	80066e4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066c2:	f000 f837 	bl	8006734 <xTaskIncrementTick>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80066cc:	4b16      	ldr	r3, [pc, #88]	; (8006728 <xTaskResumeAll+0x12c>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f1      	bne.n	80066c2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80066de:	4b13      	ldr	r3, [pc, #76]	; (800672c <xTaskResumeAll+0x130>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066e4:	4b10      	ldr	r3, [pc, #64]	; (8006728 <xTaskResumeAll+0x12c>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d009      	beq.n	8006700 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066ec:	2301      	movs	r3, #1
 80066ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066f0:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <xTaskResumeAll+0x134>)
 80066f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006700:	f000 fbc2 	bl	8006e88 <vPortExitCritical>

	return xAlreadyYielded;
 8006704:	68bb      	ldr	r3, [r7, #8]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	200003ac 	.word	0x200003ac
 8006714:	20000384 	.word	0x20000384
 8006718:	20000344 	.word	0x20000344
 800671c:	2000038c 	.word	0x2000038c
 8006720:	20000288 	.word	0x20000288
 8006724:	20000284 	.word	0x20000284
 8006728:	20000398 	.word	0x20000398
 800672c:	20000394 	.word	0x20000394
 8006730:	e000ed04 	.word	0xe000ed04

08006734 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800673e:	4b50      	ldr	r3, [pc, #320]	; (8006880 <xTaskIncrementTick+0x14c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	f040 808c 	bne.w	8006860 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006748:	4b4e      	ldr	r3, [pc, #312]	; (8006884 <xTaskIncrementTick+0x150>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3301      	adds	r3, #1
 800674e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006750:	4a4c      	ldr	r2, [pc, #304]	; (8006884 <xTaskIncrementTick+0x150>)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d11f      	bne.n	800679c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800675c:	4b4a      	ldr	r3, [pc, #296]	; (8006888 <xTaskIncrementTick+0x154>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <xTaskIncrementTick+0x46>
 8006766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	e7fe      	b.n	8006778 <xTaskIncrementTick+0x44>
 800677a:	4b43      	ldr	r3, [pc, #268]	; (8006888 <xTaskIncrementTick+0x154>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	4b42      	ldr	r3, [pc, #264]	; (800688c <xTaskIncrementTick+0x158>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a40      	ldr	r2, [pc, #256]	; (8006888 <xTaskIncrementTick+0x154>)
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	4a40      	ldr	r2, [pc, #256]	; (800688c <xTaskIncrementTick+0x158>)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	4b40      	ldr	r3, [pc, #256]	; (8006890 <xTaskIncrementTick+0x15c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3301      	adds	r3, #1
 8006794:	4a3e      	ldr	r2, [pc, #248]	; (8006890 <xTaskIncrementTick+0x15c>)
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	f000 f994 	bl	8006ac4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800679c:	4b3d      	ldr	r3, [pc, #244]	; (8006894 <xTaskIncrementTick+0x160>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d34d      	bcc.n	8006842 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067a6:	4b38      	ldr	r3, [pc, #224]	; (8006888 <xTaskIncrementTick+0x154>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <xTaskIncrementTick+0x80>
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <xTaskIncrementTick+0x82>
 80067b4:	2300      	movs	r3, #0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d004      	beq.n	80067c4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ba:	4b36      	ldr	r3, [pc, #216]	; (8006894 <xTaskIncrementTick+0x160>)
 80067bc:	f04f 32ff 	mov.w	r2, #4294967295
 80067c0:	601a      	str	r2, [r3, #0]
					break;
 80067c2:	e03e      	b.n	8006842 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067c4:	4b30      	ldr	r3, [pc, #192]	; (8006888 <xTaskIncrementTick+0x154>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d203      	bcs.n	80067e4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067dc:	4a2d      	ldr	r2, [pc, #180]	; (8006894 <xTaskIncrementTick+0x160>)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6013      	str	r3, [r2, #0]
						break;
 80067e2:	e02e      	b.n	8006842 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	3304      	adds	r3, #4
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff fcb7 	bl	800615c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d004      	beq.n	8006800 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	3318      	adds	r3, #24
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff fcae 	bl	800615c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	2201      	movs	r2, #1
 8006806:	409a      	lsls	r2, r3
 8006808:	4b23      	ldr	r3, [pc, #140]	; (8006898 <xTaskIncrementTick+0x164>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4313      	orrs	r3, r2
 800680e:	4a22      	ldr	r2, [pc, #136]	; (8006898 <xTaskIncrementTick+0x164>)
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4a1f      	ldr	r2, [pc, #124]	; (800689c <xTaskIncrementTick+0x168>)
 8006820:	441a      	add	r2, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	3304      	adds	r3, #4
 8006826:	4619      	mov	r1, r3
 8006828:	4610      	mov	r0, r2
 800682a:	f7ff fc3a 	bl	80060a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006832:	4b1b      	ldr	r3, [pc, #108]	; (80068a0 <xTaskIncrementTick+0x16c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	429a      	cmp	r2, r3
 800683a:	d3b4      	bcc.n	80067a6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800683c:	2301      	movs	r3, #1
 800683e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006840:	e7b1      	b.n	80067a6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006842:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <xTaskIncrementTick+0x16c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	4914      	ldr	r1, [pc, #80]	; (800689c <xTaskIncrementTick+0x168>)
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d907      	bls.n	800686a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800685a:	2301      	movs	r3, #1
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	e004      	b.n	800686a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006860:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <xTaskIncrementTick+0x170>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3301      	adds	r3, #1
 8006866:	4a0f      	ldr	r2, [pc, #60]	; (80068a4 <xTaskIncrementTick+0x170>)
 8006868:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800686a:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <xTaskIncrementTick+0x174>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006872:	2301      	movs	r3, #1
 8006874:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006876:	697b      	ldr	r3, [r7, #20]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	200003ac 	.word	0x200003ac
 8006884:	20000388 	.word	0x20000388
 8006888:	2000033c 	.word	0x2000033c
 800688c:	20000340 	.word	0x20000340
 8006890:	2000039c 	.word	0x2000039c
 8006894:	200003a4 	.word	0x200003a4
 8006898:	2000038c 	.word	0x2000038c
 800689c:	20000288 	.word	0x20000288
 80068a0:	20000284 	.word	0x20000284
 80068a4:	20000394 	.word	0x20000394
 80068a8:	20000398 	.word	0x20000398

080068ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068b2:	4b26      	ldr	r3, [pc, #152]	; (800694c <vTaskSwitchContext+0xa0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068ba:	4b25      	ldr	r3, [pc, #148]	; (8006950 <vTaskSwitchContext+0xa4>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068c0:	e03e      	b.n	8006940 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80068c2:	4b23      	ldr	r3, [pc, #140]	; (8006950 <vTaskSwitchContext+0xa4>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80068c8:	4b22      	ldr	r3, [pc, #136]	; (8006954 <vTaskSwitchContext+0xa8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	fab3 f383 	clz	r3, r3
 80068d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80068d6:	7afb      	ldrb	r3, [r7, #11]
 80068d8:	f1c3 031f 	rsb	r3, r3, #31
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	491e      	ldr	r1, [pc, #120]	; (8006958 <vTaskSwitchContext+0xac>)
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	4613      	mov	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	440b      	add	r3, r1
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d109      	bne.n	8006906 <vTaskSwitchContext+0x5a>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	607b      	str	r3, [r7, #4]
 8006904:	e7fe      	b.n	8006904 <vTaskSwitchContext+0x58>
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4a11      	ldr	r2, [pc, #68]	; (8006958 <vTaskSwitchContext+0xac>)
 8006912:	4413      	add	r3, r2
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	605a      	str	r2, [r3, #4]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	3308      	adds	r3, #8
 8006928:	429a      	cmp	r2, r3
 800692a:	d104      	bne.n	8006936 <vTaskSwitchContext+0x8a>
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	605a      	str	r2, [r3, #4]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	4a07      	ldr	r2, [pc, #28]	; (800695c <vTaskSwitchContext+0xb0>)
 800693e:	6013      	str	r3, [r2, #0]
}
 8006940:	bf00      	nop
 8006942:	371c      	adds	r7, #28
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	200003ac 	.word	0x200003ac
 8006950:	20000398 	.word	0x20000398
 8006954:	2000038c 	.word	0x2000038c
 8006958:	20000288 	.word	0x20000288
 800695c:	20000284 	.word	0x20000284

08006960 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006968:	f000 f852 	bl	8006a10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800696c:	4b06      	ldr	r3, [pc, #24]	; (8006988 <prvIdleTask+0x28>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d9f9      	bls.n	8006968 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006974:	4b05      	ldr	r3, [pc, #20]	; (800698c <prvIdleTask+0x2c>)
 8006976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006984:	e7f0      	b.n	8006968 <prvIdleTask+0x8>
 8006986:	bf00      	nop
 8006988:	20000288 	.word	0x20000288
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006996:	2300      	movs	r3, #0
 8006998:	607b      	str	r3, [r7, #4]
 800699a:	e00c      	b.n	80069b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	4613      	mov	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4a12      	ldr	r2, [pc, #72]	; (80069f0 <prvInitialiseTaskLists+0x60>)
 80069a8:	4413      	add	r3, r2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff fb4c 	bl	8006048 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3301      	adds	r3, #1
 80069b4:	607b      	str	r3, [r7, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b06      	cmp	r3, #6
 80069ba:	d9ef      	bls.n	800699c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069bc:	480d      	ldr	r0, [pc, #52]	; (80069f4 <prvInitialiseTaskLists+0x64>)
 80069be:	f7ff fb43 	bl	8006048 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069c2:	480d      	ldr	r0, [pc, #52]	; (80069f8 <prvInitialiseTaskLists+0x68>)
 80069c4:	f7ff fb40 	bl	8006048 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069c8:	480c      	ldr	r0, [pc, #48]	; (80069fc <prvInitialiseTaskLists+0x6c>)
 80069ca:	f7ff fb3d 	bl	8006048 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069ce:	480c      	ldr	r0, [pc, #48]	; (8006a00 <prvInitialiseTaskLists+0x70>)
 80069d0:	f7ff fb3a 	bl	8006048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069d4:	480b      	ldr	r0, [pc, #44]	; (8006a04 <prvInitialiseTaskLists+0x74>)
 80069d6:	f7ff fb37 	bl	8006048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069da:	4b0b      	ldr	r3, [pc, #44]	; (8006a08 <prvInitialiseTaskLists+0x78>)
 80069dc:	4a05      	ldr	r2, [pc, #20]	; (80069f4 <prvInitialiseTaskLists+0x64>)
 80069de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <prvInitialiseTaskLists+0x7c>)
 80069e2:	4a05      	ldr	r2, [pc, #20]	; (80069f8 <prvInitialiseTaskLists+0x68>)
 80069e4:	601a      	str	r2, [r3, #0]
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000288 	.word	0x20000288
 80069f4:	20000314 	.word	0x20000314
 80069f8:	20000328 	.word	0x20000328
 80069fc:	20000344 	.word	0x20000344
 8006a00:	20000358 	.word	0x20000358
 8006a04:	20000370 	.word	0x20000370
 8006a08:	2000033c 	.word	0x2000033c
 8006a0c:	20000340 	.word	0x20000340

08006a10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a16:	e019      	b.n	8006a4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a18:	f000 fa08 	bl	8006e2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006a1c:	4b0f      	ldr	r3, [pc, #60]	; (8006a5c <prvCheckTasksWaitingTermination+0x4c>)
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3304      	adds	r3, #4
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff fb97 	bl	800615c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a2e:	4b0c      	ldr	r3, [pc, #48]	; (8006a60 <prvCheckTasksWaitingTermination+0x50>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	4a0a      	ldr	r2, [pc, #40]	; (8006a60 <prvCheckTasksWaitingTermination+0x50>)
 8006a36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a38:	4b0a      	ldr	r3, [pc, #40]	; (8006a64 <prvCheckTasksWaitingTermination+0x54>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	4a09      	ldr	r2, [pc, #36]	; (8006a64 <prvCheckTasksWaitingTermination+0x54>)
 8006a40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a42:	f000 fa21 	bl	8006e88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f80e 	bl	8006a68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a4c:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <prvCheckTasksWaitingTermination+0x54>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e1      	bne.n	8006a18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a54:	bf00      	nop
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	20000358 	.word	0x20000358
 8006a60:	20000384 	.word	0x20000384
 8006a64:	2000036c 	.word	0x2000036c

08006a68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d108      	bne.n	8006a8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fb72 	bl	8007168 <vPortFree>
				vPortFree( pxTCB );
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fb6f 	bl	8007168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a8a:	e017      	b.n	8006abc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d103      	bne.n	8006a9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fb66 	bl	8007168 <vPortFree>
	}
 8006a9c:	e00e      	b.n	8006abc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d009      	beq.n	8006abc <prvDeleteTCB+0x54>
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	e7fe      	b.n	8006aba <prvDeleteTCB+0x52>
	}
 8006abc:	bf00      	nop
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aca:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <prvResetNextTaskUnblockTime+0x44>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <prvResetNextTaskUnblockTime+0x14>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e000      	b.n	8006ada <prvResetNextTaskUnblockTime+0x16>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ade:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <prvResetNextTaskUnblockTime+0x48>)
 8006ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ae6:	e008      	b.n	8006afa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ae8:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <prvResetNextTaskUnblockTime+0x44>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	4a05      	ldr	r2, [pc, #20]	; (8006b0c <prvResetNextTaskUnblockTime+0x48>)
 8006af8:	6013      	str	r3, [r2, #0]
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	2000033c 	.word	0x2000033c
 8006b0c:	200003a4 	.word	0x200003a4

08006b10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b1a:	4b29      	ldr	r3, [pc, #164]	; (8006bc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b20:	4b28      	ldr	r3, [pc, #160]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff fb18 	bl	800615c <uxListRemove>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10b      	bne.n	8006b4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006b32:	4b24      	ldr	r3, [pc, #144]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	2201      	movs	r2, #1
 8006b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3e:	43da      	mvns	r2, r3
 8006b40:	4b21      	ldr	r3, [pc, #132]	; (8006bc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4013      	ands	r3, r2
 8006b46:	4a20      	ldr	r2, [pc, #128]	; (8006bc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b50:	d10a      	bne.n	8006b68 <prvAddCurrentTaskToDelayedList+0x58>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d007      	beq.n	8006b68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b58:	4b1a      	ldr	r3, [pc, #104]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4619      	mov	r1, r3
 8006b60:	481a      	ldr	r0, [pc, #104]	; (8006bcc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b62:	f7ff fa9e 	bl	80060a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b66:	e026      	b.n	8006bb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b70:	4b14      	ldr	r3, [pc, #80]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d209      	bcs.n	8006b94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b80:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3304      	adds	r3, #4
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	f7ff faac 	bl	80060ea <vListInsert>
}
 8006b92:	e010      	b.n	8006bb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b94:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	f7ff faa2 	bl	80060ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ba6:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d202      	bcs.n	8006bb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006bb0:	4a09      	ldr	r2, [pc, #36]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6013      	str	r3, [r2, #0]
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20000388 	.word	0x20000388
 8006bc4:	20000284 	.word	0x20000284
 8006bc8:	2000038c 	.word	0x2000038c
 8006bcc:	20000370 	.word	0x20000370
 8006bd0:	20000340 	.word	0x20000340
 8006bd4:	2000033c 	.word	0x2000033c
 8006bd8:	200003a4 	.word	0x200003a4

08006bdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3b04      	subs	r3, #4
 8006bec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3b04      	subs	r3, #4
 8006bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f023 0201 	bic.w	r2, r3, #1
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3b04      	subs	r3, #4
 8006c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c0c:	4a0c      	ldr	r2, [pc, #48]	; (8006c40 <pxPortInitialiseStack+0x64>)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3b14      	subs	r3, #20
 8006c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3b04      	subs	r3, #4
 8006c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f06f 0202 	mvn.w	r2, #2
 8006c2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3b20      	subs	r3, #32
 8006c30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c32:	68fb      	ldr	r3, [r7, #12]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	08006c45 	.word	0x08006c45

08006c44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c4e:	4b11      	ldr	r3, [pc, #68]	; (8006c94 <prvTaskExitError+0x50>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c56:	d009      	beq.n	8006c6c <prvTaskExitError+0x28>
 8006c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	e7fe      	b.n	8006c6a <prvTaskExitError+0x26>
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c7e:	bf00      	nop
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0fc      	beq.n	8006c80 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c86:	bf00      	nop
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	2000000c 	.word	0x2000000c
	...

08006ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <pxCurrentTCBConst2>)
 8006ca2:	6819      	ldr	r1, [r3, #0]
 8006ca4:	6808      	ldr	r0, [r1, #0]
 8006ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006caa:	f380 8809 	msr	PSP, r0
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f04f 0000 	mov.w	r0, #0
 8006cb6:	f380 8811 	msr	BASEPRI, r0
 8006cba:	4770      	bx	lr
 8006cbc:	f3af 8000 	nop.w

08006cc0 <pxCurrentTCBConst2>:
 8006cc0:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop

08006cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006cc8:	4808      	ldr	r0, [pc, #32]	; (8006cec <prvPortStartFirstTask+0x24>)
 8006cca:	6800      	ldr	r0, [r0, #0]
 8006ccc:	6800      	ldr	r0, [r0, #0]
 8006cce:	f380 8808 	msr	MSP, r0
 8006cd2:	f04f 0000 	mov.w	r0, #0
 8006cd6:	f380 8814 	msr	CONTROL, r0
 8006cda:	b662      	cpsie	i
 8006cdc:	b661      	cpsie	f
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	df00      	svc	0
 8006ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cea:	bf00      	nop
 8006cec:	e000ed08 	.word	0xe000ed08

08006cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006cf6:	4b44      	ldr	r3, [pc, #272]	; (8006e08 <xPortStartScheduler+0x118>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a44      	ldr	r2, [pc, #272]	; (8006e0c <xPortStartScheduler+0x11c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d109      	bne.n	8006d14 <xPortStartScheduler+0x24>
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	e7fe      	b.n	8006d12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d14:	4b3c      	ldr	r3, [pc, #240]	; (8006e08 <xPortStartScheduler+0x118>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a3d      	ldr	r2, [pc, #244]	; (8006e10 <xPortStartScheduler+0x120>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d109      	bne.n	8006d32 <xPortStartScheduler+0x42>
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	e7fe      	b.n	8006d30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d32:	4b38      	ldr	r3, [pc, #224]	; (8006e14 <xPortStartScheduler+0x124>)
 8006d34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	22ff      	movs	r2, #255	; 0xff
 8006d42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d4c:	78fb      	ldrb	r3, [r7, #3]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	4b30      	ldr	r3, [pc, #192]	; (8006e18 <xPortStartScheduler+0x128>)
 8006d58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d5a:	4b30      	ldr	r3, [pc, #192]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006d5c:	2207      	movs	r2, #7
 8006d5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d60:	e009      	b.n	8006d76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006d62:	4b2e      	ldr	r3, [pc, #184]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	4a2c      	ldr	r2, [pc, #176]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006d6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7e:	2b80      	cmp	r3, #128	; 0x80
 8006d80:	d0ef      	beq.n	8006d62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d82:	4b26      	ldr	r3, [pc, #152]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f1c3 0307 	rsb	r3, r3, #7
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d009      	beq.n	8006da2 <xPortStartScheduler+0xb2>
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	60bb      	str	r3, [r7, #8]
 8006da0:	e7fe      	b.n	8006da0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006da2:	4b1e      	ldr	r3, [pc, #120]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006daa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006dac:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006db4:	4a19      	ldr	r2, [pc, #100]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006db6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006dc0:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <xPortStartScheduler+0x130>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a16      	ldr	r2, [pc, #88]	; (8006e20 <xPortStartScheduler+0x130>)
 8006dc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006dca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006dcc:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <xPortStartScheduler+0x130>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a13      	ldr	r2, [pc, #76]	; (8006e20 <xPortStartScheduler+0x130>)
 8006dd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006dd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006dd8:	f000 f8d6 	bl	8006f88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ddc:	4b11      	ldr	r3, [pc, #68]	; (8006e24 <xPortStartScheduler+0x134>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006de2:	f000 f8f5 	bl	8006fd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006de6:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <xPortStartScheduler+0x138>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a0f      	ldr	r2, [pc, #60]	; (8006e28 <xPortStartScheduler+0x138>)
 8006dec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006df0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006df2:	f7ff ff69 	bl	8006cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006df6:	f7ff fd59 	bl	80068ac <vTaskSwitchContext>
	prvTaskExitError();
 8006dfa:	f7ff ff23 	bl	8006c44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	e000ed00 	.word	0xe000ed00
 8006e0c:	410fc271 	.word	0x410fc271
 8006e10:	410fc270 	.word	0x410fc270
 8006e14:	e000e400 	.word	0xe000e400
 8006e18:	200003b0 	.word	0x200003b0
 8006e1c:	200003b4 	.word	0x200003b4
 8006e20:	e000ed20 	.word	0xe000ed20
 8006e24:	2000000c 	.word	0x2000000c
 8006e28:	e000ef34 	.word	0xe000ef34

08006e2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e44:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <vPortEnterCritical+0x54>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	4a0d      	ldr	r2, [pc, #52]	; (8006e80 <vPortEnterCritical+0x54>)
 8006e4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e4e:	4b0c      	ldr	r3, [pc, #48]	; (8006e80 <vPortEnterCritical+0x54>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d10e      	bne.n	8006e74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e56:	4b0b      	ldr	r3, [pc, #44]	; (8006e84 <vPortEnterCritical+0x58>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d009      	beq.n	8006e74 <vPortEnterCritical+0x48>
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	603b      	str	r3, [r7, #0]
 8006e72:	e7fe      	b.n	8006e72 <vPortEnterCritical+0x46>
	}
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	2000000c 	.word	0x2000000c
 8006e84:	e000ed04 	.word	0xe000ed04

08006e88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e8e:	4b11      	ldr	r3, [pc, #68]	; (8006ed4 <vPortExitCritical+0x4c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d109      	bne.n	8006eaa <vPortExitCritical+0x22>
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	607b      	str	r3, [r7, #4]
 8006ea8:	e7fe      	b.n	8006ea8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006eaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <vPortExitCritical+0x4c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <vPortExitCritical+0x4c>)
 8006eb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006eb4:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <vPortExitCritical+0x4c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d104      	bne.n	8006ec6 <vPortExitCritical+0x3e>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	2000000c 	.word	0x2000000c
	...

08006ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ee0:	f3ef 8009 	mrs	r0, PSP
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <pxCurrentTCBConst>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	f01e 0f10 	tst.w	lr, #16
 8006ef0:	bf08      	it	eq
 8006ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efa:	6010      	str	r0, [r2, #0]
 8006efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f04:	f380 8811 	msr	BASEPRI, r0
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f7ff fccc 	bl	80068ac <vTaskSwitchContext>
 8006f14:	f04f 0000 	mov.w	r0, #0
 8006f18:	f380 8811 	msr	BASEPRI, r0
 8006f1c:	bc09      	pop	{r0, r3}
 8006f1e:	6819      	ldr	r1, [r3, #0]
 8006f20:	6808      	ldr	r0, [r1, #0]
 8006f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f26:	f01e 0f10 	tst.w	lr, #16
 8006f2a:	bf08      	it	eq
 8006f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f30:	f380 8809 	msr	PSP, r0
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	f3af 8000 	nop.w

08006f40 <pxCurrentTCBConst>:
 8006f40:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop

08006f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f60:	f7ff fbe8 	bl	8006734 <xTaskIncrementTick>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f6a:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <SysTick_Handler+0x3c>)
 8006f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	2300      	movs	r3, #0
 8006f74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f7c:	bf00      	nop
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	e000ed04 	.word	0xe000ed04

08006f88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <vPortSetupTimerInterrupt+0x34>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f92:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <vPortSetupTimerInterrupt+0x38>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f98:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <vPortSetupTimerInterrupt+0x3c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a0a      	ldr	r2, [pc, #40]	; (8006fc8 <vPortSetupTimerInterrupt+0x40>)
 8006f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa2:	099b      	lsrs	r3, r3, #6
 8006fa4:	4a09      	ldr	r2, [pc, #36]	; (8006fcc <vPortSetupTimerInterrupt+0x44>)
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006faa:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <vPortSetupTimerInterrupt+0x34>)
 8006fac:	2207      	movs	r2, #7
 8006fae:	601a      	str	r2, [r3, #0]
}
 8006fb0:	bf00      	nop
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	e000e010 	.word	0xe000e010
 8006fc0:	e000e018 	.word	0xe000e018
 8006fc4:	20000000 	.word	0x20000000
 8006fc8:	10624dd3 	.word	0x10624dd3
 8006fcc:	e000e014 	.word	0xe000e014

08006fd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006fe0 <vPortEnableVFP+0x10>
 8006fd4:	6801      	ldr	r1, [r0, #0]
 8006fd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fda:	6001      	str	r1, [r0, #0]
 8006fdc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006fde:	bf00      	nop
 8006fe0:	e000ed88 	.word	0xe000ed88

08006fe4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08a      	sub	sp, #40	; 0x28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fec:	2300      	movs	r3, #0
 8006fee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ff0:	f7ff faf6 	bl	80065e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ff4:	4b57      	ldr	r3, [pc, #348]	; (8007154 <pvPortMalloc+0x170>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ffc:	f000 f90c 	bl	8007218 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007000:	4b55      	ldr	r3, [pc, #340]	; (8007158 <pvPortMalloc+0x174>)
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4013      	ands	r3, r2
 8007008:	2b00      	cmp	r3, #0
 800700a:	f040 808c 	bne.w	8007126 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d01c      	beq.n	800704e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007014:	2208      	movs	r2, #8
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4413      	add	r3, r2
 800701a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	2b00      	cmp	r3, #0
 8007024:	d013      	beq.n	800704e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f023 0307 	bic.w	r3, r3, #7
 800702c:	3308      	adds	r3, #8
 800702e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	2b00      	cmp	r3, #0
 8007038:	d009      	beq.n	800704e <pvPortMalloc+0x6a>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	e7fe      	b.n	800704c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d068      	beq.n	8007126 <pvPortMalloc+0x142>
 8007054:	4b41      	ldr	r3, [pc, #260]	; (800715c <pvPortMalloc+0x178>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	429a      	cmp	r2, r3
 800705c:	d863      	bhi.n	8007126 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800705e:	4b40      	ldr	r3, [pc, #256]	; (8007160 <pvPortMalloc+0x17c>)
 8007060:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007062:	4b3f      	ldr	r3, [pc, #252]	; (8007160 <pvPortMalloc+0x17c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007068:	e004      	b.n	8007074 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	429a      	cmp	r2, r3
 800707c:	d903      	bls.n	8007086 <pvPortMalloc+0xa2>
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1f1      	bne.n	800706a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007086:	4b33      	ldr	r3, [pc, #204]	; (8007154 <pvPortMalloc+0x170>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800708c:	429a      	cmp	r2, r3
 800708e:	d04a      	beq.n	8007126 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2208      	movs	r2, #8
 8007096:	4413      	add	r3, r2
 8007098:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	1ad2      	subs	r2, r2, r3
 80070aa:	2308      	movs	r3, #8
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d91e      	bls.n	80070f0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4413      	add	r3, r2
 80070b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d009      	beq.n	80070d8 <pvPortMalloc+0xf4>
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	e7fe      	b.n	80070d6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070ea:	69b8      	ldr	r0, [r7, #24]
 80070ec:	f000 f8f6 	bl	80072dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070f0:	4b1a      	ldr	r3, [pc, #104]	; (800715c <pvPortMalloc+0x178>)
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	4a18      	ldr	r2, [pc, #96]	; (800715c <pvPortMalloc+0x178>)
 80070fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070fe:	4b17      	ldr	r3, [pc, #92]	; (800715c <pvPortMalloc+0x178>)
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	4b18      	ldr	r3, [pc, #96]	; (8007164 <pvPortMalloc+0x180>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d203      	bcs.n	8007112 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800710a:	4b14      	ldr	r3, [pc, #80]	; (800715c <pvPortMalloc+0x178>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a15      	ldr	r2, [pc, #84]	; (8007164 <pvPortMalloc+0x180>)
 8007110:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	4b10      	ldr	r3, [pc, #64]	; (8007158 <pvPortMalloc+0x174>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	431a      	orrs	r2, r3
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007126:	f7ff fa69 	bl	80065fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	2b00      	cmp	r3, #0
 8007132:	d009      	beq.n	8007148 <pvPortMalloc+0x164>
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	e7fe      	b.n	8007146 <pvPortMalloc+0x162>
	return pvReturn;
 8007148:	69fb      	ldr	r3, [r7, #28]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3728      	adds	r7, #40	; 0x28
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000fc0 	.word	0x20000fc0
 8007158:	20000fcc 	.word	0x20000fcc
 800715c:	20000fc4 	.word	0x20000fc4
 8007160:	20000fb8 	.word	0x20000fb8
 8007164:	20000fc8 	.word	0x20000fc8

08007168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d046      	beq.n	8007208 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800717a:	2308      	movs	r3, #8
 800717c:	425b      	negs	r3, r3
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4413      	add	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	4b20      	ldr	r3, [pc, #128]	; (8007210 <vPortFree+0xa8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4013      	ands	r3, r2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <vPortFree+0x42>
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e7fe      	b.n	80071a8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d009      	beq.n	80071c6 <vPortFree+0x5e>
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	60bb      	str	r3, [r7, #8]
 80071c4:	e7fe      	b.n	80071c4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	4b11      	ldr	r3, [pc, #68]	; (8007210 <vPortFree+0xa8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4013      	ands	r3, r2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d019      	beq.n	8007208 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d115      	bne.n	8007208 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <vPortFree+0xa8>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	43db      	mvns	r3, r3
 80071e6:	401a      	ands	r2, r3
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071ec:	f7ff f9f8 	bl	80065e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	4b07      	ldr	r3, [pc, #28]	; (8007214 <vPortFree+0xac>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4413      	add	r3, r2
 80071fa:	4a06      	ldr	r2, [pc, #24]	; (8007214 <vPortFree+0xac>)
 80071fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071fe:	6938      	ldr	r0, [r7, #16]
 8007200:	f000 f86c 	bl	80072dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007204:	f7ff f9fa 	bl	80065fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007208:	bf00      	nop
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20000fcc 	.word	0x20000fcc
 8007214:	20000fc4 	.word	0x20000fc4

08007218 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800721e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007222:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007224:	4b27      	ldr	r3, [pc, #156]	; (80072c4 <prvHeapInit+0xac>)
 8007226:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f003 0307 	and.w	r3, r3, #7
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00c      	beq.n	800724c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3307      	adds	r3, #7
 8007236:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0307 	bic.w	r3, r3, #7
 800723e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	4a1f      	ldr	r2, [pc, #124]	; (80072c4 <prvHeapInit+0xac>)
 8007248:	4413      	add	r3, r2
 800724a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007250:	4a1d      	ldr	r2, [pc, #116]	; (80072c8 <prvHeapInit+0xb0>)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007256:	4b1c      	ldr	r3, [pc, #112]	; (80072c8 <prvHeapInit+0xb0>)
 8007258:	2200      	movs	r2, #0
 800725a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	4413      	add	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007264:	2208      	movs	r2, #8
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	1a9b      	subs	r3, r3, r2
 800726a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0307 	bic.w	r3, r3, #7
 8007272:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4a15      	ldr	r2, [pc, #84]	; (80072cc <prvHeapInit+0xb4>)
 8007278:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800727a:	4b14      	ldr	r3, [pc, #80]	; (80072cc <prvHeapInit+0xb4>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2200      	movs	r2, #0
 8007280:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007282:	4b12      	ldr	r3, [pc, #72]	; (80072cc <prvHeapInit+0xb4>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	1ad2      	subs	r2, r2, r3
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007298:	4b0c      	ldr	r3, [pc, #48]	; (80072cc <prvHeapInit+0xb4>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	4a0a      	ldr	r2, [pc, #40]	; (80072d0 <prvHeapInit+0xb8>)
 80072a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	4a09      	ldr	r2, [pc, #36]	; (80072d4 <prvHeapInit+0xbc>)
 80072ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072b0:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <prvHeapInit+0xc0>)
 80072b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072b6:	601a      	str	r2, [r3, #0]
}
 80072b8:	bf00      	nop
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	200003b8 	.word	0x200003b8
 80072c8:	20000fb8 	.word	0x20000fb8
 80072cc:	20000fc0 	.word	0x20000fc0
 80072d0:	20000fc8 	.word	0x20000fc8
 80072d4:	20000fc4 	.word	0x20000fc4
 80072d8:	20000fcc 	.word	0x20000fcc

080072dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072e4:	4b28      	ldr	r3, [pc, #160]	; (8007388 <prvInsertBlockIntoFreeList+0xac>)
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	e002      	b.n	80072f0 <prvInsertBlockIntoFreeList+0x14>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d8f7      	bhi.n	80072ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	4413      	add	r3, r2
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	429a      	cmp	r2, r3
 800730a:	d108      	bne.n	800731e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	441a      	add	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	441a      	add	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	429a      	cmp	r2, r3
 8007330:	d118      	bne.n	8007364 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	4b15      	ldr	r3, [pc, #84]	; (800738c <prvInsertBlockIntoFreeList+0xb0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	429a      	cmp	r2, r3
 800733c:	d00d      	beq.n	800735a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	441a      	add	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	e008      	b.n	800736c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800735a:	4b0c      	ldr	r3, [pc, #48]	; (800738c <prvInsertBlockIntoFreeList+0xb0>)
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	e003      	b.n	800736c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	429a      	cmp	r2, r3
 8007372:	d002      	beq.n	800737a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800737a:	bf00      	nop
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	20000fb8 	.word	0x20000fb8
 800738c:	20000fc0 	.word	0x20000fc0

08007390 <__libc_init_array>:
 8007390:	b570      	push	{r4, r5, r6, lr}
 8007392:	4e0d      	ldr	r6, [pc, #52]	; (80073c8 <__libc_init_array+0x38>)
 8007394:	4c0d      	ldr	r4, [pc, #52]	; (80073cc <__libc_init_array+0x3c>)
 8007396:	1ba4      	subs	r4, r4, r6
 8007398:	10a4      	asrs	r4, r4, #2
 800739a:	2500      	movs	r5, #0
 800739c:	42a5      	cmp	r5, r4
 800739e:	d109      	bne.n	80073b4 <__libc_init_array+0x24>
 80073a0:	4e0b      	ldr	r6, [pc, #44]	; (80073d0 <__libc_init_array+0x40>)
 80073a2:	4c0c      	ldr	r4, [pc, #48]	; (80073d4 <__libc_init_array+0x44>)
 80073a4:	f000 f820 	bl	80073e8 <_init>
 80073a8:	1ba4      	subs	r4, r4, r6
 80073aa:	10a4      	asrs	r4, r4, #2
 80073ac:	2500      	movs	r5, #0
 80073ae:	42a5      	cmp	r5, r4
 80073b0:	d105      	bne.n	80073be <__libc_init_array+0x2e>
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073b8:	4798      	blx	r3
 80073ba:	3501      	adds	r5, #1
 80073bc:	e7ee      	b.n	800739c <__libc_init_array+0xc>
 80073be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073c2:	4798      	blx	r3
 80073c4:	3501      	adds	r5, #1
 80073c6:	e7f2      	b.n	80073ae <__libc_init_array+0x1e>
 80073c8:	08007490 	.word	0x08007490
 80073cc:	08007490 	.word	0x08007490
 80073d0:	08007490 	.word	0x08007490
 80073d4:	08007494 	.word	0x08007494

080073d8 <memset>:
 80073d8:	4402      	add	r2, r0
 80073da:	4603      	mov	r3, r0
 80073dc:	4293      	cmp	r3, r2
 80073de:	d100      	bne.n	80073e2 <memset+0xa>
 80073e0:	4770      	bx	lr
 80073e2:	f803 1b01 	strb.w	r1, [r3], #1
 80073e6:	e7f9      	b.n	80073dc <memset+0x4>

080073e8 <_init>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	bf00      	nop
 80073ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ee:	bc08      	pop	{r3}
 80073f0:	469e      	mov	lr, r3
 80073f2:	4770      	bx	lr

080073f4 <_fini>:
 80073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f6:	bf00      	nop
 80073f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fa:	bc08      	pop	{r3}
 80073fc:	469e      	mov	lr, r3
 80073fe:	4770      	bx	lr
