
MD2020-303k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ce8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08008e78  08008e78  00018e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009334  08009334  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009334  08009334  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009334  08009334  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009334  08009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009338  08009338  00019338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800933c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026b8  20000010  0800934c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026c8  0800934c  000226c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9c5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003952  00000000  00000000  0003aa05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c8  00000000  00000000  0003e358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013f0  00000000  00000000  0003f920  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b92a  00000000  00000000  00040d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012cea  00000000  00000000  0005c63a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009cd78  00000000  00000000  0006f324  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010c09c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c48  00000000  00000000  0010c118  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e60 	.word	0x08008e60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008e60 	.word	0x08008e60

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000a70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a76:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000a78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a90:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000aba:	2204      	movs	r2, #4
 8000abc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aca:	4817      	ldr	r0, [pc, #92]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000acc:	f001 f8ba 	bl	8001c44 <HAL_ADC_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ad6:	f000 fc7f 	bl	80013d8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4810      	ldr	r0, [pc, #64]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000ae6:	f001 ff49 	bl	800297c <HAL_ADCEx_MultiModeConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000af0:	f000 fc72 	bl	80013d8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000b00:	2304      	movs	r3, #4
 8000b02:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_ADC1_Init+0xdc>)
 8000b12:	f001 fc71 	bl	80023f8 <HAL_ADC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000b1c:	f000 fc5c 	bl	80013d8 <Error_Handler>
  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000242c 	.word	0x2000242c

08000b2c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b32:	463b      	mov	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
 8000b40:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000b42:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b44:	4a2e      	ldr	r2, [pc, #184]	; (8000c00 <MX_ADC2_Init+0xd4>)
 8000b46:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b48:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b4a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b4e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b50:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b6a:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b7e:	2202      	movs	r2, #2
 8000b80:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b8c:	2208      	movs	r2, #8
 8000b8e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b9c:	4817      	ldr	r0, [pc, #92]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000b9e:	f001 f851 	bl	8001c44 <HAL_ADC_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000ba8:	f000 fc16 	bl	80013d8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000bca:	f001 fc15 	bl	80023f8 <HAL_ADC_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000bd4:	f000 fc00 	bl	80013d8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_ADC2_Init+0xd0>)
 8000be6:	f001 fc07 	bl	80023f8 <HAL_ADC_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000bf0:	f000 fbf2 	bl	80013d8 <Error_Handler>
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200023dc 	.word	0x200023dc
 8000c00:	50000100 	.word	0x50000100

08000c04 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c24:	d15e      	bne.n	8000ce4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c26:	4b63      	ldr	r3, [pc, #396]	; (8000db4 <HAL_ADC_MspInit+0x1b0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	4a61      	ldr	r2, [pc, #388]	; (8000db4 <HAL_ADC_MspInit+0x1b0>)
 8000c2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c30:	4b60      	ldr	r3, [pc, #384]	; (8000db4 <HAL_ADC_MspInit+0x1b0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d10b      	bne.n	8000c50 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c38:	4b5f      	ldr	r3, [pc, #380]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	4a5e      	ldr	r2, [pc, #376]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c42:	6153      	str	r3, [r2, #20]
 8000c44:	4b5c      	ldr	r3, [pc, #368]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	61bb      	str	r3, [r7, #24]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	4b59      	ldr	r3, [pc, #356]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	4a58      	ldr	r2, [pc, #352]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5a:	6153      	str	r3, [r2, #20]
 8000c5c:	4b56      	ldr	r3, [pc, #344]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = POT_Pin;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(POT_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f003 f847 	bl	8003d10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c82:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000c84:	4a4e      	ldr	r2, [pc, #312]	; (8000dc0 <HAL_ADC_MspInit+0x1bc>)
 8000c86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c88:	4b4c      	ldr	r3, [pc, #304]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c94:	4b49      	ldr	r3, [pc, #292]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c9a:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ca2:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000caa:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000cac:	2220      	movs	r2, #32
 8000cae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cb0:	4b42      	ldr	r3, [pc, #264]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb6:	4841      	ldr	r0, [pc, #260]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000cb8:	f002 fee2 	bl	8003a80 <HAL_DMA_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000cc2:	f000 fb89 	bl	80013d8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a3c      	ldr	r2, [pc, #240]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000cca:	639a      	str	r2, [r3, #56]	; 0x38
 8000ccc:	4a3b      	ldr	r2, [pc, #236]	; (8000dbc <HAL_ADC_MspInit+0x1b8>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	2012      	movs	r0, #18
 8000cd8:	f002 fea8 	bl	8003a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000cdc:	2012      	movs	r0, #18
 8000cde:	f002 fec1 	bl	8003a64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000ce2:	e062      	b.n	8000daa <HAL_ADC_MspInit+0x1a6>
  else if(adcHandle->Instance==ADC2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a36      	ldr	r2, [pc, #216]	; (8000dc4 <HAL_ADC_MspInit+0x1c0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d15d      	bne.n	8000daa <HAL_ADC_MspInit+0x1a6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <HAL_ADC_MspInit+0x1b0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <HAL_ADC_MspInit+0x1b0>)
 8000cf6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <HAL_ADC_MspInit+0x1b0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10b      	bne.n	8000d18 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d00:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	4a2c      	ldr	r2, [pc, #176]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	6153      	str	r3, [r2, #20]
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	4a26      	ldr	r2, [pc, #152]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d22:	6153      	str	r3, [r2, #20]
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <HAL_ADC_MspInit+0x1b4>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Current_Pin|Voltage_Pin;
 8000d30:	2330      	movs	r3, #48	; 0x30
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d46:	f002 ffe3 	bl	8003d10 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d4c:	4a1f      	ldr	r2, [pc, #124]	; (8000dcc <HAL_ADC_MspInit+0x1c8>)
 8000d4e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d68:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d70:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d74:	2220      	movs	r2, #32
 8000d76:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000d7e:	4812      	ldr	r0, [pc, #72]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d80:	f002 fe7e 	bl	8003a80 <HAL_DMA_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 8000d8a:	f000 fb25 	bl	80013d8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
 8000d94:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <HAL_ADC_MspInit+0x1c4>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	2012      	movs	r0, #18
 8000da0:	f002 fe44 	bl	8003a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000da4:	2012      	movs	r0, #18
 8000da6:	f002 fe5d 	bl	8003a64 <HAL_NVIC_EnableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	3730      	adds	r7, #48	; 0x30
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000002c 	.word	0x2000002c
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	2000247c 	.word	0x2000247c
 8000dc0:	40020008 	.word	0x40020008
 8000dc4:	50000100 	.word	0x50000100
 8000dc8:	200024c0 	.word	0x200024c0
 8000dcc:	4002001c 	.word	0x4002001c

08000dd0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <MX_CAN_Init+0xb0>)
 8000dd8:	4a2a      	ldr	r2, [pc, #168]	; (8000e84 <MX_CAN_Init+0xb4>)
 8000dda:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000ddc:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <MX_CAN_Init+0xb0>)
 8000dde:	2202      	movs	r2, #2
 8000de0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000de2:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <MX_CAN_Init+0xb0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000de8:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <MX_CAN_Init+0xb0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <MX_CAN_Init+0xb0>)
 8000df0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000df4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <MX_CAN_Init+0xb0>)
 8000df8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000dfc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <MX_CAN_Init+0xb0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <MX_CAN_Init+0xb0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_CAN_Init+0xb0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <MX_CAN_Init+0xb0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_CAN_Init+0xb0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <MX_CAN_Init+0xb0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e22:	4817      	ldr	r0, [pc, #92]	; (8000e80 <MX_CAN_Init+0xb0>)
 8000e24:	f001 fecf 	bl	8002bc6 <HAL_CAN_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000e2e:	f000 fad3 	bl	80013d8 <Error_Handler>
  }

  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterBank=0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode=CAN_FILTERMODE_IDLIST;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale=CAN_FILTERSCALE_16BIT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh=0x45<<5;
 8000e3e:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
 8000e42:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterMaskIdLow=0x45<<5;
 8000e44:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
 8000e48:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterMaskIdHigh=0x45<<5;
 8000e4a:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
 8000e4e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow=0x45<<5;
 8000e50:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
 8000e54:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation=ENABLE;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 8000e5e:	230e      	movs	r3, #14
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig)!=HAL_OK)Error_Handler();
 8000e62:	463b      	mov	r3, r7
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <MX_CAN_Init+0xb0>)
 8000e68:	f001 ffa8 	bl	8002dbc <HAL_CAN_ConfigFilter>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_CAN_Init+0xa6>
 8000e72:	f000 fab1 	bl	80013d8 <Error_Handler>

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20002504 	.word	0x20002504
 8000e84:	40006400 	.word	0x40006400

08000e88 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a24      	ldr	r2, [pc, #144]	; (8000f38 <HAL_CAN_MspInit+0xb0>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d141      	bne.n	8000f2e <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eaa:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <HAL_CAN_MspInit+0xb4>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	4a23      	ldr	r2, [pc, #140]	; (8000f3c <HAL_CAN_MspInit+0xb4>)
 8000eb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb4:	61d3      	str	r3, [r2, #28]
 8000eb6:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <HAL_CAN_MspInit+0xb4>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <HAL_CAN_MspInit+0xb4>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <HAL_CAN_MspInit+0xb4>)
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	6153      	str	r3, [r2, #20]
 8000ece:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <HAL_CAN_MspInit+0xb4>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000eda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000eec:	2309      	movs	r3, #9
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f002 ff09 	bl	8003d10 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 5, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2105      	movs	r1, #5
 8000f02:	2013      	movs	r0, #19
 8000f04:	f002 fd92 	bl	8003a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8000f08:	2013      	movs	r0, #19
 8000f0a:	f002 fdab 	bl	8003a64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 5, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2105      	movs	r1, #5
 8000f12:	2014      	movs	r0, #20
 8000f14:	f002 fd8a 	bl	8003a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000f18:	2014      	movs	r0, #20
 8000f1a:	f002 fda3 	bl	8003a64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 5, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2105      	movs	r1, #5
 8000f22:	2015      	movs	r0, #21
 8000f24:	f002 fd82 	bl	8003a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000f28:	2015      	movs	r0, #21
 8000f2a:	f002 fd9b 	bl	8003a64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40006400 	.word	0x40006400
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END CAN_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcanx){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) !=HAL_OK){
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4808      	ldr	r0, [pc, #32]	; (8000f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000f50:	f002 f952 	bl	80031f8 <HAL_CAN_GetRxMessage>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000f5a:	f000 fa3d 	bl	80013d8 <Error_Handler>
	}

}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20002538 	.word	0x20002538
 8000f6c:	20002558 	.word	0x20002558
 8000f70:	20002504 	.word	0x20002504

08000f74 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_DMA_Init+0x48>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <MX_DMA_Init+0x48>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6153      	str	r3, [r2, #20]
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <MX_DMA_Init+0x48>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2105      	movs	r1, #5
 8000f96:	200b      	movs	r0, #11
 8000f98:	f002 fd48 	bl	8003a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f9c:	200b      	movs	r0, #11
 8000f9e:	f002 fd61 	bl	8003a64 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	200c      	movs	r0, #12
 8000fa8:	f002 fd40 	bl	8003a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000fac:	200c      	movs	r0, #12
 8000fae:	f002 fd59 	bl	8003a64 <HAL_NVIC_EnableIRQ>

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4a07      	ldr	r2, [pc, #28]	; (8000fec <vApplicationGetIdleTaskMemory+0x2c>)
 8000fd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <vApplicationGetIdleTaskMemory+0x30>)
 8000fd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000034 	.word	0x20000034
 8000ff0:	20000088 	.word	0x20000088

08000ff4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b09c      	sub	sp, #112	; 0x70
 8000ff8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <MX_FREERTOS_Init+0xa4>)
 8000ffc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001000:	461d      	mov	r5, r3
 8001002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001006:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800100a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800100e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f005 ffa5 	bl	8006f64 <osThreadCreate>
 800101a:	4602      	mov	r2, r0
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <MX_FREERTOS_Init+0xa8>)
 800101e:	601a      	str	r2, [r3, #0]

  /* definition and creation of MinorLoopTask */
  osThreadDef(MinorLoopTask, StartMinorLoopTask, osPriorityRealtime, 0, 256);
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_FREERTOS_Init+0xac>)
 8001022:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001026:	461d      	mov	r5, r3
 8001028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001030:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MinorLoopTaskHandle = osThreadCreate(osThread(MinorLoopTask), NULL);
 8001034:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f005 ff92 	bl	8006f64 <osThreadCreate>
 8001040:	4602      	mov	r2, r0
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_FREERTOS_Init+0xb0>)
 8001044:	601a      	str	r2, [r3, #0]

  /* definition and creation of MajorLoopTask */
  osThreadDef(MajorLoopTask, StartMajorLoopTask, osPriorityHigh, 0, 1024);
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_FREERTOS_Init+0xb4>)
 8001048:	f107 041c 	add.w	r4, r7, #28
 800104c:	461d      	mov	r5, r3
 800104e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001052:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001056:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MajorLoopTaskHandle = osThreadCreate(osThread(MajorLoopTask), NULL);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f005 ff7f 	bl	8006f64 <osThreadCreate>
 8001066:	4602      	mov	r2, r0
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_FREERTOS_Init+0xb8>)
 800106a:	601a      	str	r2, [r3, #0]

  /* definition and creation of CanCommunicatio */
  osThreadDef(CanCommunicatio, StartCanCommunicationTask, osPriorityAboveNormal, 0, 512);
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <MX_FREERTOS_Init+0xbc>)
 800106e:	463c      	mov	r4, r7
 8001070:	461d      	mov	r5, r3
 8001072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001076:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800107a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CanCommunicatioHandle = osThreadCreate(osThread(CanCommunicatio), NULL);
 800107e:	463b      	mov	r3, r7
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f005 ff6e 	bl	8006f64 <osThreadCreate>
 8001088:	4602      	mov	r2, r0
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <MX_FREERTOS_Init+0xc0>)
 800108c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800108e:	bf00      	nop
 8001090:	3770      	adds	r7, #112	; 0x70
 8001092:	46bd      	mov	sp, r7
 8001094:	bdb0      	pop	{r4, r5, r7, pc}
 8001096:	bf00      	nop
 8001098:	08008e84 	.word	0x08008e84
 800109c:	20002574 	.word	0x20002574
 80010a0:	08008eb0 	.word	0x08008eb0
 80010a4:	20002580 	.word	0x20002580
 80010a8:	08008edc 	.word	0x08008edc
 80010ac:	2000257c 	.word	0x2000257c
 80010b0:	08008f08 	.word	0x08008f08
 80010b4:	20002578 	.word	0x20002578

080010b8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f005 ff9b 	bl	8006ffc <osDelay>
 80010c6:	e7fb      	b.n	80010c0 <StartDefaultTask+0x8>

080010c8 <StartMinorLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMinorLoopTask */
void StartMinorLoopTask(void const * argument)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMinorLoopTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f005 ff93 	bl	8006ffc <osDelay>
 80010d6:	e7fb      	b.n	80010d0 <StartMinorLoopTask+0x8>

080010d8 <StartMajorLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMajorLoopTask */
void StartMajorLoopTask(void const * argument)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMajorLoopTask */
  /* Infinite loop */
  for(;;)
  {
	encval=TIM_Encoder_Value();
 80010e0:	f000 fc24 	bl	800192c <TIM_Encoder_Value>
 80010e4:	4602      	mov	r2, r0
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <StartMajorLoopTask+0xb0>)
 80010e8:	601a      	str	r2, [r3, #0]
//	TxData[5]=encval%200;
	memcpy(TxData,encval,4);
 80010ea:	4b27      	ldr	r3, [pc, #156]	; (8001188 <StartMajorLoopTask+0xb0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <StartMajorLoopTask+0xb4>)
 80010f4:	601a      	str	r2, [r3, #0]
	uint32_t tim=HAL_GetTick();
 80010f6:	f000 fd7b 	bl	8001bf0 <HAL_GetTick>
 80010fa:	6178      	str	r0, [r7, #20]
	float sec=tim/1000.0;
 80010fc:	6978      	ldr	r0, [r7, #20]
 80010fe:	f7ff f9a9 	bl	8000454 <__aeabi_ui2d>
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b22      	ldr	r3, [pc, #136]	; (8001190 <StartMajorLoopTask+0xb8>)
 8001108:	f7ff fb48 	bl	800079c <__aeabi_ddiv>
 800110c:	4603      	mov	r3, r0
 800110e:	460c      	mov	r4, r1
 8001110:	4618      	mov	r0, r3
 8001112:	4621      	mov	r1, r4
 8001114:	f7ff fc4a 	bl	80009ac <__aeabi_d2f>
 8001118:	4603      	mov	r3, r0
 800111a:	613b      	str	r3, [r7, #16]
	float duty=0.1*sinf(M_TWOPI*sec);
 800111c:	6938      	ldr	r0, [r7, #16]
 800111e:	f7ff f9bb 	bl	8000498 <__aeabi_f2d>
 8001122:	a315      	add	r3, pc, #84	; (adr r3, 8001178 <StartMajorLoopTask+0xa0>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fa0e 	bl	8000548 <__aeabi_dmul>
 800112c:	4603      	mov	r3, r0
 800112e:	460c      	mov	r4, r1
 8001130:	4618      	mov	r0, r3
 8001132:	4621      	mov	r1, r4
 8001134:	f7ff fc3a 	bl	80009ac <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	ee00 3a10 	vmov	s0, r3
 800113e:	f007 f943 	bl	80083c8 <sinf>
 8001142:	ee10 3a10 	vmov	r3, s0
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9a6 	bl	8000498 <__aeabi_f2d>
 800114c:	a30c      	add	r3, pc, #48	; (adr r3, 8001180 <StartMajorLoopTask+0xa8>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff f9f9 	bl	8000548 <__aeabi_dmul>
 8001156:	4603      	mov	r3, r0
 8001158:	460c      	mov	r4, r1
 800115a:	4618      	mov	r0, r3
 800115c:	4621      	mov	r1, r4
 800115e:	f7ff fc25 	bl	80009ac <__aeabi_d2f>
 8001162:	4603      	mov	r3, r0
 8001164:	60fb      	str	r3, [r7, #12]
	Duty_Set(duty);
 8001166:	ed97 0a03 	vldr	s0, [r7, #12]
 800116a:	f000 fc29 	bl	80019c0 <Duty_Set>
    osDelay(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f005 ff44 	bl	8006ffc <osDelay>
  {
 8001174:	e7b4      	b.n	80010e0 <StartMajorLoopTask+0x8>
 8001176:	bf00      	nop
 8001178:	54442d18 	.word	0x54442d18
 800117c:	401921fb 	.word	0x401921fb
 8001180:	9999999a 	.word	0x9999999a
 8001184:	3fb99999 	.word	0x3fb99999
 8001188:	20000030 	.word	0x20000030
 800118c:	2000252c 	.word	0x2000252c
 8001190:	408f4000 	.word	0x408f4000

08001194 <StartCanCommunicationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanCommunicationTask */
void StartCanCommunicationTask(void const * argument)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanCommunicationTask */
  /* Infinite loop */
	HAL_CAN_Start(&hcan);
 800119c:	481f      	ldr	r0, [pc, #124]	; (800121c <StartCanCommunicationTask+0x88>)
 800119e:	f001 fed7 	bl	8002f50 <HAL_CAN_Start>
	if (HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK){
 80011a2:	2102      	movs	r1, #2
 80011a4:	481d      	ldr	r0, [pc, #116]	; (800121c <StartCanCommunicationTask+0x88>)
 80011a6:	f002 f939 	bl	800341c <HAL_CAN_ActivateNotification>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <StartCanCommunicationTask+0x20>
		Error_Handler();
 80011b0:	f000 f912 	bl	80013d8 <Error_Handler>
	}

  for(;;)
  {
		TxHeader.StdId = 0x100;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <StartCanCommunicationTask+0x8c>)
 80011b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ba:	601a      	str	r2, [r3, #0]
		TxHeader.RTR = CAN_RTR_DATA;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <StartCanCommunicationTask+0x8c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
		TxHeader.IDE = CAN_ID_STD;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <StartCanCommunicationTask+0x8c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
		TxHeader.DLC = 8;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <StartCanCommunicationTask+0x8c>)
 80011ca:	2208      	movs	r2, #8
 80011cc:	611a      	str	r2, [r3, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <StartCanCommunicationTask+0x8c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	751a      	strb	r2, [r3, #20]
		TxData[0] = 100;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <StartCanCommunicationTask+0x90>)
 80011d6:	2264      	movs	r2, #100	; 0x64
 80011d8:	701a      	strb	r2, [r3, #0]
		TxData[1] = RxData[1];
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <StartCanCommunicationTask+0x94>)
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <StartCanCommunicationTask+0x90>)
 80011e2:	705a      	strb	r2, [r3, #1]
		TxData[7] = RxData[2];
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <StartCanCommunicationTask+0x94>)
 80011e6:	789b      	ldrb	r3, [r3, #2]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <StartCanCommunicationTask+0x90>)
 80011ec:	71da      	strb	r2, [r3, #7]
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox)
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <StartCanCommunicationTask+0x98>)
 80011f0:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <StartCanCommunicationTask+0x90>)
 80011f2:	490b      	ldr	r1, [pc, #44]	; (8001220 <StartCanCommunicationTask+0x8c>)
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <StartCanCommunicationTask+0x88>)
 80011f6:	f001 feef 	bl	8002fd8 <HAL_CAN_AddTxMessage>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <StartCanCommunicationTask+0x70>
				!= HAL_OK)
			Error_Handler();
 8001200:	f000 f8ea 	bl	80013d8 <Error_Handler>
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) != 3) {
 8001204:	bf00      	nop
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <StartCanCommunicationTask+0x88>)
 8001208:	f001 ffc1 	bl	800318e <HAL_CAN_GetTxMailboxesFreeLevel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b03      	cmp	r3, #3
 8001210:	d1f9      	bne.n	8001206 <StartCanCommunicationTask+0x72>

		}
		osDelay(1);
 8001212:	2001      	movs	r0, #1
 8001214:	f005 fef2 	bl	8006ffc <osDelay>
		TxHeader.StdId = 0x100;
 8001218:	e7cc      	b.n	80011b4 <StartCanCommunicationTask+0x20>
 800121a:	bf00      	nop
 800121c:	20002504 	.word	0x20002504
 8001220:	20002540 	.word	0x20002540
 8001224:	2000252c 	.word	0x2000252c
 8001228:	20002538 	.word	0x20002538
 800122c:	20002534 	.word	0x20002534

08001230 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <MX_GPIO_Init+0xa8>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a23      	ldr	r2, [pc, #140]	; (80012d8 <MX_GPIO_Init+0xa8>)
 800124c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <MX_GPIO_Init+0xa8>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <MX_GPIO_Init+0xa8>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	4a1d      	ldr	r2, [pc, #116]	; (80012d8 <MX_GPIO_Init+0xa8>)
 8001264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001268:	6153      	str	r3, [r2, #20]
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_GPIO_Init+0xa8>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_GPIO_Init+0xa8>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <MX_GPIO_Init+0xa8>)
 800127c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001280:	6153      	str	r3, [r2, #20]
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_GPIO_Init+0xa8>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A2C8_Pin|D2D8_Pin|D3D9_Pin|D4D10_Pin 
 800128e:	2200      	movs	r2, #0
 8001290:	21f8      	movs	r1, #248	; 0xf8
 8001292:	4812      	ldr	r0, [pc, #72]	; (80012dc <MX_GPIO_Init+0xac>)
 8001294:	f002 feae 	bl	8003ff4 <HAL_GPIO_WritePin>
                          |D5D11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = p1_Pin|p2_Pin|p3_Pin;
 8001298:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800129c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b0:	f002 fd2e 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = A2C8_Pin|D2D8_Pin|D3D9_Pin|D4D10_Pin 
 80012b4:	23f8      	movs	r3, #248	; 0xf8
 80012b6:	60fb      	str	r3, [r7, #12]
                          |D5D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	4804      	ldr	r0, [pc, #16]	; (80012dc <MX_GPIO_Init+0xac>)
 80012cc:	f002 fd20 	bl	8003d10 <HAL_GPIO_Init>

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000
 80012dc:	48000400 	.word	0x48000400

080012e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e4:	f000 fc5a 	bl	8001b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e8:	f000 f81e 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ec:	f7ff ffa0 	bl	8001230 <MX_GPIO_Init>
  MX_DMA_Init();
 80012f0:	f7ff fe40 	bl	8000f74 <MX_DMA_Init>
  MX_ADC1_Init();
 80012f4:	f7ff fbaa 	bl	8000a4c <MX_ADC1_Init>
  MX_ADC2_Init();
 80012f8:	f7ff fc18 	bl	8000b2c <MX_ADC2_Init>
  MX_CAN_Init();
 80012fc:	f7ff fd68 	bl	8000dd0 <MX_CAN_Init>
  MX_TIM2_Init();
 8001300:	f000 f974 	bl	80015ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8001304:	f000 f9c6 	bl	8001694 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001308:	f000 fba2 	bl	8001a50 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800130c:	213c      	movs	r1, #60	; 0x3c
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <main+0x44>)
 8001310:	f004 f96a 	bl	80055e8 <HAL_TIM_Encoder_Start>
  TIM_PWM_Start();
 8001314:	f000 fb1e 	bl	8001954 <TIM_PWM_Start>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8001318:	f7ff fe6c 	bl	8000ff4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800131c:	f005 fe1b 	bl	8006f56 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001320:	e7fe      	b.n	8001320 <main+0x40>
 8001322:	bf00      	nop
 8001324:	20002604 	.word	0x20002604

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b090      	sub	sp, #64	; 0x40
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0318 	add.w	r3, r7, #24
 8001332:	2228      	movs	r2, #40	; 0x28
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f007 f83e 	bl	80083b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800134e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001354:	2301      	movs	r3, #1
 8001356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001358:	2301      	movs	r3, #1
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135c:	2302      	movs	r3, #2
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001366:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 0318 	add.w	r3, r7, #24
 8001370:	4618      	mov	r0, r3
 8001372:	f002 fe57 	bl	8004024 <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800137c:	f000 f82c 	bl	80013d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001380:	230f      	movs	r3, #15
 8001382:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001384:	2302      	movs	r3, #2
 8001386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2102      	movs	r1, #2
 800139a:	4618      	mov	r0, r3
 800139c:	f003 fd4a 	bl	8004e34 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013a6:	f000 f817 	bl	80013d8 <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3740      	adds	r7, #64	; 0x40
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013c6:	f000 fbff 	bl	8001bc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40014800 	.word	0x40014800

080013d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_MspInit+0x4c>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <HAL_MspInit+0x4c>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6193      	str	r3, [r2, #24]
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_MspInit+0x4c>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_MspInit+0x4c>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_MspInit+0x4c>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_MspInit+0x4c>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	210f      	movs	r1, #15
 8001422:	f06f 0001 	mvn.w	r0, #1
 8001426:	f002 fb01 	bl	8003a2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000

08001438 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08c      	sub	sp, #48	; 0x30
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0); 
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	201a      	movs	r0, #26
 800144e:	f002 faed 	bl	8003a2c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn); 
 8001452:	201a      	movs	r0, #26
 8001454:	f002 fb06 	bl	8003a64 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001458:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <HAL_InitTick+0x9c>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <HAL_InitTick+0x9c>)
 800145e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_InitTick+0x9c>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001470:	f107 0210 	add.w	r2, r7, #16
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4611      	mov	r1, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f003 ff12 	bl	80052a4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001480:	f003 feee 	bl	8005260 <HAL_RCC_GetPCLK2Freq>
 8001484:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001488:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <HAL_InitTick+0xa0>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	0c9b      	lsrs	r3, r3, #18
 8001490:	3b01      	subs	r3, #1
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_InitTick+0xa4>)
 8001496:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <HAL_InitTick+0xa8>)
 8001498:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_InitTick+0xa4>)
 800149c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014a0:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_InitTick+0xa4>)
 80014a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a6:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_InitTick+0xa4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_InitTick+0xa4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <HAL_InitTick+0xa4>)
 80014b6:	f003 ff27 	bl	8005308 <HAL_TIM_Base_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d104      	bne.n	80014ca <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80014c0:	4806      	ldr	r0, [pc, #24]	; (80014dc <HAL_InitTick+0xa4>)
 80014c2:	f003 ff4d 	bl	8005360 <HAL_TIM_Base_Start_IT>
 80014c6:	4603      	mov	r3, r0
 80014c8:	e000      	b.n	80014cc <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3730      	adds	r7, #48	; 0x30
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	431bde83 	.word	0x431bde83
 80014dc:	20002584 	.word	0x20002584
 80014e0:	40014800 	.word	0x40014800

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <MemManage_Handler+0x4>

080014fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <UsageFault_Handler+0x4>

0800150a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <DMA1_Channel1_IRQHandler+0x10>)
 800151e:	f002 fb34 	bl	8003b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000247c 	.word	0x2000247c

0800152c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <DMA1_Channel2_IRQHandler+0x10>)
 8001532:	f002 fb2a 	bl	8003b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200024c0 	.word	0x200024c0

08001540 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001544:	4803      	ldr	r0, [pc, #12]	; (8001554 <ADC1_2_IRQHandler+0x14>)
 8001546:	f000 fd0f 	bl	8001f68 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800154a:	4803      	ldr	r0, [pc, #12]	; (8001558 <ADC1_2_IRQHandler+0x18>)
 800154c:	f000 fd0c 	bl	8001f68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000242c 	.word	0x2000242c
 8001558:	200023dc 	.word	0x200023dc

0800155c <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <CAN_TX_IRQHandler+0x10>)
 8001562:	f001 ff81 	bl	8003468 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20002504 	.word	0x20002504

08001570 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <CAN_RX0_IRQHandler+0x10>)
 8001576:	f001 ff77 	bl	8003468 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20002504 	.word	0x20002504

08001584 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <CAN_RX1_IRQHandler+0x10>)
 800158a:	f001 ff6d 	bl	8003468 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20002504 	.word	0x20002504

08001598 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800159e:	f004 f85a 	bl	8005656 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20002584 	.word	0x20002584

080015ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <USART2_IRQHandler+0x10>)
 80015b2:	f005 f821 	bl	80065f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20002644 	.word	0x20002644

080015c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <SystemInit+0x28>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <SystemInit+0x28>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SystemInit+0x28>)
 80015d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015da:	609a      	str	r2, [r3, #8]
#endif
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	2224      	movs	r2, #36	; 0x24
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f006 fedc 	bl	80083b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <MX_TIM2_Init+0xa4>)
 800160c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001610:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <MX_TIM2_Init+0xa4>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <MX_TIM2_Init+0xa4>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_TIM2_Init+0xa4>)
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_TIM2_Init+0xa4>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_TIM2_Init+0xa4>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001632:	2303      	movs	r3, #3
 8001634:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001636:	2302      	movs	r3, #2
 8001638:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800163a:	2301      	movs	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8001642:	2303      	movs	r3, #3
 8001644:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001646:	2302      	movs	r3, #2
 8001648:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800164a:	2301      	movs	r3, #1
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 3;
 8001652:	2303      	movs	r3, #3
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <MX_TIM2_Init+0xa4>)
 800165e:	f003 ff31 	bl	80054c4 <HAL_TIM_Encoder_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001668:	f7ff feb6 	bl	80013d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001674:	463b      	mov	r3, r7
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_TIM2_Init+0xa4>)
 800167a:	f004 fee3 	bl	8006444 <HAL_TIMEx_MasterConfigSynchronization>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001684:	f7ff fea8 	bl	80013d8 <Error_Handler>
  }

}
 8001688:	bf00      	nop
 800168a:	3730      	adds	r7, #48	; 0x30
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20002604 	.word	0x20002604

08001694 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08e      	sub	sp, #56	; 0x38
 8001698:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b4:	463b      	mov	r3, r7
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]
 80016c2:	615a      	str	r2, [r3, #20]
 80016c4:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80016c6:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <MX_TIM3_Init+0x128>)
 80016c8:	4a3d      	ldr	r2, [pc, #244]	; (80017c0 <MX_TIM3_Init+0x12c>)
 80016ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016cc:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <MX_TIM3_Init+0x128>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80016d2:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <MX_TIM3_Init+0x128>)
 80016d4:	2220      	movs	r2, #32
 80016d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80016d8:	4b38      	ldr	r3, [pc, #224]	; (80017bc <MX_TIM3_Init+0x128>)
 80016da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e0:	4b36      	ldr	r3, [pc, #216]	; (80017bc <MX_TIM3_Init+0x128>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016e6:	4b35      	ldr	r3, [pc, #212]	; (80017bc <MX_TIM3_Init+0x128>)
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016ec:	4833      	ldr	r0, [pc, #204]	; (80017bc <MX_TIM3_Init+0x128>)
 80016ee:	f003 fe0b 	bl	8005308 <HAL_TIM_Base_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80016f8:	f7ff fe6e 	bl	80013d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001706:	4619      	mov	r1, r3
 8001708:	482c      	ldr	r0, [pc, #176]	; (80017bc <MX_TIM3_Init+0x128>)
 800170a:	f004 f9db 	bl	8005ac4 <HAL_TIM_ConfigClockSource>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001714:	f7ff fe60 	bl	80013d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001718:	4828      	ldr	r0, [pc, #160]	; (80017bc <MX_TIM3_Init+0x128>)
 800171a:	f003 fe4b 	bl	80053b4 <HAL_TIM_PWM_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001724:	f7ff fe58 	bl	80013d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001728:	2320      	movs	r3, #32
 800172a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	4821      	ldr	r0, [pc, #132]	; (80017bc <MX_TIM3_Init+0x128>)
 8001738:	f004 fe84 	bl	8006444 <HAL_TIMEx_MasterConfigSynchronization>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001742:	f7ff fe49 	bl	80013d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001746:	2360      	movs	r3, #96	; 0x60
 8001748:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001756:	463b      	mov	r3, r7
 8001758:	2200      	movs	r2, #0
 800175a:	4619      	mov	r1, r3
 800175c:	4817      	ldr	r0, [pc, #92]	; (80017bc <MX_TIM3_Init+0x128>)
 800175e:	f004 f899 	bl	8005894 <HAL_TIM_PWM_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001768:	f7ff fe36 	bl	80013d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800176c:	463b      	mov	r3, r7
 800176e:	2204      	movs	r2, #4
 8001770:	4619      	mov	r1, r3
 8001772:	4812      	ldr	r0, [pc, #72]	; (80017bc <MX_TIM3_Init+0x128>)
 8001774:	f004 f88e 	bl	8005894 <HAL_TIM_PWM_ConfigChannel>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800177e:	f7ff fe2b 	bl	80013d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001782:	463b      	mov	r3, r7
 8001784:	2208      	movs	r2, #8
 8001786:	4619      	mov	r1, r3
 8001788:	480c      	ldr	r0, [pc, #48]	; (80017bc <MX_TIM3_Init+0x128>)
 800178a:	f004 f883 	bl	8005894 <HAL_TIM_PWM_ConfigChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001794:	f7ff fe20 	bl	80013d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001798:	463b      	mov	r3, r7
 800179a:	220c      	movs	r2, #12
 800179c:	4619      	mov	r1, r3
 800179e:	4807      	ldr	r0, [pc, #28]	; (80017bc <MX_TIM3_Init+0x128>)
 80017a0:	f004 f878 	bl	8005894 <HAL_TIM_PWM_ConfigChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80017aa:	f7ff fe15 	bl	80013d8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <MX_TIM3_Init+0x128>)
 80017b0:	f000 f868 	bl	8001884 <HAL_TIM_MspPostInit>

}
 80017b4:	bf00      	nop
 80017b6:	3738      	adds	r7, #56	; 0x38
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200025c4 	.word	0x200025c4
 80017c0:	40000400 	.word	0x40000400

080017c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e4:	d128      	bne.n	8001838 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_TIM_Encoder_MspInit+0x7c>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <HAL_TIM_Encoder_MspInit+0x7c>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	61d3      	str	r3, [r2, #28]
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_TIM_Encoder_MspInit+0x7c>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	6153      	str	r3, [r2, #20]
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_TIM_Encoder_MspInit+0x7c>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001816:	2303      	movs	r3, #3
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001826:	2301      	movs	r3, #1
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001834:	f002 fa6c 	bl	8003d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_TIM_Base_MspInit+0x38>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d10b      	bne.n	800186e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_TIM_Base_MspInit+0x3c>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <HAL_TIM_Base_MspInit+0x3c>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <HAL_TIM_Base_MspInit+0x3c>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40000400 	.word	0x40000400
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1f      	ldr	r2, [pc, #124]	; (8001920 <HAL_TIM_MspPostInit+0x9c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d138      	bne.n	8001918 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <HAL_TIM_MspPostInit+0xa0>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_TIM_MspPostInit+0xa0>)
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	6153      	str	r3, [r2, #20]
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_TIM_MspPostInit+0xa0>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_TIM_MspPostInit+0xa0>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a18      	ldr	r2, [pc, #96]	; (8001924 <HAL_TIM_MspPostInit+0xa0>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c8:	6153      	str	r3, [r2, #20]
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_TIM_MspPostInit+0xa0>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018d6:	23c0      	movs	r3, #192	; 0xc0
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e6:	2302      	movs	r3, #2
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f4:	f002 fa0c 	bl	8003d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018f8:	2303      	movs	r3, #3
 80018fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001908:	2302      	movs	r3, #2
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <HAL_TIM_MspPostInit+0xa4>)
 8001914:	f002 f9fc 	bl	8003d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001918:	bf00      	nop
 800191a:	3728      	adds	r7, #40	; 0x28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40000400 	.word	0x40000400
 8001924:	40021000 	.word	0x40021000
 8001928:	48000400 	.word	0x48000400

0800192c <TIM_Encoder_Value>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
int32_t TIM_Encoder_Value(void){
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
	uint32_t encbuff = TIM2->CNT;
 8001932:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	607b      	str	r3, [r7, #4]
	if (encbuff > 2147483647)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	da02      	bge.n	8001946 <TIM_Encoder_Value+0x1a>
		return (int32_t) encbuff * -1;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	425b      	negs	r3, r3
 8001944:	e000      	b.n	8001948 <TIM_Encoder_Value+0x1c>
	else
		return (int32_t) encbuff;
 8001946:	687b      	ldr	r3, [r7, #4]

}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <TIM_PWM_Start>:
void TIM_PWM_Start(void){
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001958:	2100      	movs	r1, #0
 800195a:	4808      	ldr	r0, [pc, #32]	; (800197c <TIM_PWM_Start+0x28>)
 800195c:	f003 fd60 	bl	8005420 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001960:	2104      	movs	r1, #4
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <TIM_PWM_Start+0x28>)
 8001964:	f003 fd5c 	bl	8005420 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001968:	2108      	movs	r1, #8
 800196a:	4804      	ldr	r0, [pc, #16]	; (800197c <TIM_PWM_Start+0x28>)
 800196c:	f003 fd58 	bl	8005420 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001970:	210c      	movs	r1, #12
 8001972:	4802      	ldr	r0, [pc, #8]	; (800197c <TIM_PWM_Start+0x28>)
 8001974:	f003 fd54 	bl	8005420 <HAL_TIM_PWM_Start>
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200025c4 	.word	0x200025c4

08001980 <TIM_PWM_Set>:
void TIM_PWM_Set(uint16_t *pwms){
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	TIM3->CCR1 = pwms[0];
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	881a      	ldrh	r2, [r3, #0]
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <TIM_PWM_Set+0x3c>)
 800198e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = pwms[1];
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3302      	adds	r3, #2
 8001994:	881a      	ldrh	r2, [r3, #0]
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <TIM_PWM_Set+0x3c>)
 8001998:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = pwms[2];
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3304      	adds	r3, #4
 800199e:	881a      	ldrh	r2, [r3, #0]
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <TIM_PWM_Set+0x3c>)
 80019a2:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = pwms[3];
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3306      	adds	r3, #6
 80019a8:	881a      	ldrh	r2, [r3, #0]
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <TIM_PWM_Set+0x3c>)
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40000400 	.word	0x40000400

080019c0 <Duty_Set>:
void Duty_Set(float duty){
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t pwms[4];
	pwms[0]=pwms[1]=500.0+duty*500.0;
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7fe fd64 	bl	8000498 <__aeabi_f2d>
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <Duty_Set+0x8c>)
 80019d6:	f7fe fdb7 	bl	8000548 <__aeabi_dmul>
 80019da:	4603      	mov	r3, r0
 80019dc:	460c      	mov	r4, r1
 80019de:	4618      	mov	r0, r3
 80019e0:	4621      	mov	r1, r4
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <Duty_Set+0x8c>)
 80019e8:	f7fe fbf8 	bl	80001dc <__adddf3>
 80019ec:	4603      	mov	r3, r0
 80019ee:	460c      	mov	r4, r1
 80019f0:	4618      	mov	r0, r3
 80019f2:	4621      	mov	r1, r4
 80019f4:	f7fe ffba 	bl	800096c <__aeabi_d2uiz>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	817b      	strh	r3, [r7, #10]
 80019fe:	897b      	ldrh	r3, [r7, #10]
 8001a00:	813b      	strh	r3, [r7, #8]
	pwms[2]=pwms[3]=500.0-duty*500.0;
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7fe fd48 	bl	8000498 <__aeabi_f2d>
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <Duty_Set+0x8c>)
 8001a0e:	f7fe fd9b 	bl	8000548 <__aeabi_dmul>
 8001a12:	4603      	mov	r3, r0
 8001a14:	460c      	mov	r4, r1
 8001a16:	461a      	mov	r2, r3
 8001a18:	4623      	mov	r3, r4
 8001a1a:	f04f 0000 	mov.w	r0, #0
 8001a1e:	490b      	ldr	r1, [pc, #44]	; (8001a4c <Duty_Set+0x8c>)
 8001a20:	f7fe fbda 	bl	80001d8 <__aeabi_dsub>
 8001a24:	4603      	mov	r3, r0
 8001a26:	460c      	mov	r4, r1
 8001a28:	4618      	mov	r0, r3
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	f7fe ff9e 	bl	800096c <__aeabi_d2uiz>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	81fb      	strh	r3, [r7, #14]
 8001a36:	89fb      	ldrh	r3, [r7, #14]
 8001a38:	81bb      	strh	r3, [r7, #12]
	TIM_PWM_Set(pwms);
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff9e 	bl	8001980 <TIM_PWM_Set>
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd90      	pop	{r4, r7, pc}
 8001a4c:	407f4000 	.word	0x407f4000

08001a50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a56:	4a15      	ldr	r2, [pc, #84]	; (8001aac <MX_USART2_UART_Init+0x5c>)
 8001a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a76:	220c      	movs	r2, #12
 8001a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a94:	f004 fd62 	bl	800655c <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a9e:	f7ff fc9b 	bl	80013d8 <Error_Handler>
  }

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20002644 	.word	0x20002644
 8001aac:	40004400 	.word	0x40004400

08001ab0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <HAL_UART_MspInit+0x90>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d131      	bne.n	8001b36 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <HAL_UART_MspInit+0x94>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <HAL_UART_MspInit+0x94>)
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001adc:	61d3      	str	r3, [r2, #28]
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_UART_MspInit+0x94>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_UART_MspInit+0x94>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <HAL_UART_MspInit+0x94>)
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af4:	6153      	str	r3, [r2, #20]
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_UART_MspInit+0x94>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001b02:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b14:	2307      	movs	r3, #7
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f002 f8f5 	bl	8003d10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2105      	movs	r1, #5
 8001b2a:	2026      	movs	r0, #38	; 0x26
 8001b2c:	f001 ff7e 	bl	8003a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b30:	2026      	movs	r0, #38	; 0x26
 8001b32:	f001 ff97 	bl	8003a64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40004400 	.word	0x40004400
 8001b44:	40021000 	.word	0x40021000

08001b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b4e:	e003      	b.n	8001b58 <LoopCopyDataInit>

08001b50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b56:	3104      	adds	r1, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b58:	480b      	ldr	r0, [pc, #44]	; (8001b88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b60:	d3f6      	bcc.n	8001b50 <CopyDataInit>
	ldr	r2, =_sbss
 8001b62:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b64:	e002      	b.n	8001b6c <LoopFillZerobss>

08001b66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b68:	f842 3b04 	str.w	r3, [r2], #4

08001b6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <LoopForever+0x16>)
	cmp	r2, r3
 8001b6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b70:	d3f9      	bcc.n	8001b66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b72:	f7ff fd25 	bl	80015c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b76:	f006 fbfb 	bl	8008370 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b7a:	f7ff fbb1 	bl	80012e0 <main>

08001b7e <LoopForever>:

LoopForever:
    b LoopForever
 8001b7e:	e7fe      	b.n	8001b7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b80:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001b84:	0800933c 	.word	0x0800933c
	ldr	r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b8c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001b90:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001b94:	200026c8 	.word	0x200026c8

08001b98 <CAN_SCE_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <CAN_SCE_IRQHandler>
	...

08001b9c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_Init+0x28>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_Init+0x28>)
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f001 ff32 	bl	8003a16 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f7ff fc40 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff fc16 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40022000 	.word	0x40022000

08001bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_IncTick+0x20>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_IncTick+0x24>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <HAL_IncTick+0x24>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000008 	.word	0x20000008
 8001bec:	200026c4 	.word	0x200026c4

08001bf0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_GetTick+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	200026c4 	.word	0x200026c4

08001c08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b09a      	sub	sp, #104	; 0x68
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e172      	b.n	8001f4a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d176      	bne.n	8001d64 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d152      	bne.n	8001d24 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7fe ffb3 	bl	8000c04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d13b      	bne.n	8001d24 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 ff2b 	bl	8002b08 <ADC_Disable>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d12f      	bne.n	8001d24 <HAL_ADC_Init+0xe0>
 8001cc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d12b      	bne.n	8001d24 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cd4:	f023 0302 	bic.w	r3, r3, #2
 8001cd8:	f043 0202 	orr.w	r2, r3, #2
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cfe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d00:	4b94      	ldr	r3, [pc, #592]	; (8001f54 <HAL_ADC_Init+0x310>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a94      	ldr	r2, [pc, #592]	; (8001f58 <HAL_ADC_Init+0x314>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0c9a      	lsrs	r2, r3, #18
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d16:	e002      	b.n	8001d1e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f9      	bne.n	8001d18 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d40:	d110      	bne.n	8001d64 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f023 0312 	bic.w	r3, r3, #18
 8001d4a:	f043 0210 	orr.w	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f040 80df 	bne.w	8001f30 <HAL_ADC_Init+0x2ec>
 8001d72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 80da 	bne.w	8001f30 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 80d2 	bne.w	8001f30 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d94:	f043 0202 	orr.w	r2, r3, #2
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_ADC_Init+0x318>)
 8001d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001da8:	d102      	bne.n	8001db0 <HAL_ADC_Init+0x16c>
 8001daa:	4b6d      	ldr	r3, [pc, #436]	; (8001f60 <HAL_ADC_Init+0x31c>)
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	e002      	b.n	8001db6 <HAL_ADC_Init+0x172>
 8001db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001db4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d108      	bne.n	8001dd6 <HAL_ADC_Init+0x192>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Init+0x192>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_ADC_Init+0x194>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d11c      	bne.n	8001e16 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d010      	beq.n	8001e04 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d107      	bne.n	8001dfe <HAL_ADC_Init+0x1ba>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_Init+0x1ba>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_ADC_Init+0x1bc>
 8001dfe:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d108      	bne.n	8001e16 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e14:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7e5b      	ldrb	r3, [r3, #25]
 8001e1a:	035b      	lsls	r3, r3, #13
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e20:	2a01      	cmp	r2, #1
 8001e22:	d002      	beq.n	8001e2a <HAL_ADC_Init+0x1e6>
 8001e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e28:	e000      	b.n	8001e2c <HAL_ADC_Init+0x1e8>
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d11b      	bne.n	8001e82 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	7e5b      	ldrb	r3, [r3, #25]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	3b01      	subs	r3, #1
 8001e58:	045a      	lsls	r2, r3, #17
 8001e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e62:	663b      	str	r3, [r7, #96]	; 0x60
 8001e64:	e00d      	b.n	8001e82 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e6e:	f043 0220 	orr.w	r2, r3, #32
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f043 0201 	orr.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d007      	beq.n	8001e9a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	4313      	orrs	r3, r2
 8001e94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e96:	4313      	orrs	r3, r2
 8001e98:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d114      	bne.n	8001ed2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eb6:	f023 0302 	bic.w	r3, r3, #2
 8001eba:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7e1b      	ldrb	r3, [r3, #24]
 8001ec0:	039a      	lsls	r2, r3, #14
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <HAL_ADC_Init+0x320>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d10c      	bne.n	8001f08 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	f023 010f 	bic.w	r1, r3, #15
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	1e5a      	subs	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
 8001f06:	e007      	b.n	8001f18 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 020f 	bic.w	r2, r2, #15
 8001f16:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f023 0303 	bic.w	r3, r3, #3
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f2e:	e00a      	b.n	8001f46 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f023 0312 	bic.w	r3, r3, #18
 8001f38:	f043 0210 	orr.w	r2, r3, #16
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001f40:	2301      	movs	r3, #1
 8001f42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001f46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3768      	adds	r7, #104	; 0x68
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000000 	.word	0x20000000
 8001f58:	431bde83 	.word	0x431bde83
 8001f5c:	50000300 	.word	0x50000300
 8001f60:	50000100 	.word	0x50000100
 8001f64:	fff0c007 	.word	0xfff0c007

08001f68 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d106      	bne.n	8001f98 <HAL_ADC_IRQHandler+0x30>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d00d      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d17a      	bne.n	800209c <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d173      	bne.n	800209c <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001fcc:	4b88      	ldr	r3, [pc, #544]	; (80021f0 <HAL_ADC_IRQHandler+0x288>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x92>
 8001fd8:	4b85      	ldr	r3, [pc, #532]	; (80021f0 <HAL_ADC_IRQHandler+0x288>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d00a      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x92>
 8001fe4:	4b82      	ldr	r3, [pc, #520]	; (80021f0 <HAL_ADC_IRQHandler+0x288>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	2b09      	cmp	r3, #9
 8001fee:	d004      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x92>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ff8:	d104      	bne.n	8002004 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	e003      	b.n	800200c <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002016:	2b00      	cmp	r3, #0
 8002018:	d139      	bne.n	800208e <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002020:	2b00      	cmp	r3, #0
 8002022:	d134      	bne.n	800208e <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b08      	cmp	r3, #8
 8002030:	d12d      	bne.n	800208e <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d11a      	bne.n	8002076 <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 020c 	bic.w	r2, r2, #12
 800204e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d112      	bne.n	800208e <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
 8002074:	e00b      	b.n	800208e <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f043 0210 	orr.w	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fdba 	bl	8001c08 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	220c      	movs	r2, #12
 800209a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d106      	bne.n	80020b8 <HAL_ADC_IRQHandler+0x150>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d00f      	beq.n	80020d8 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80020c2:	2b40      	cmp	r3, #64	; 0x40
 80020c4:	f040 80a9 	bne.w	800221a <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	2b40      	cmp	r3, #64	; 0x40
 80020d4:	f040 80a1 	bne.w	800221a <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80020e4:	4b42      	ldr	r3, [pc, #264]	; (80021f0 <HAL_ADC_IRQHandler+0x288>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d010      	beq.n	8002112 <HAL_ADC_IRQHandler+0x1aa>
 80020f0:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <HAL_ADC_IRQHandler+0x288>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	2b05      	cmp	r3, #5
 80020fa:	d00a      	beq.n	8002112 <HAL_ADC_IRQHandler+0x1aa>
 80020fc:	4b3c      	ldr	r3, [pc, #240]	; (80021f0 <HAL_ADC_IRQHandler+0x288>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	2b09      	cmp	r3, #9
 8002106:	d004      	beq.n	8002112 <HAL_ADC_IRQHandler+0x1aa>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002110:	d104      	bne.n	800211c <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	e003      	b.n	8002124 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800211c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d010      	beq.n	8002154 <HAL_ADC_IRQHandler+0x1ec>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002138:	2b00      	cmp	r3, #0
 800213a:	d167      	bne.n	800220c <HAL_ADC_IRQHandler+0x2a4>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8002146:	2b00      	cmp	r3, #0
 8002148:	d160      	bne.n	800220c <HAL_ADC_IRQHandler+0x2a4>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002150:	2b00      	cmp	r3, #0
 8002152:	d15b      	bne.n	800220c <HAL_ADC_IRQHandler+0x2a4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b40      	cmp	r3, #64	; 0x40
 8002160:	d154      	bne.n	800220c <HAL_ADC_IRQHandler+0x2a4>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002162:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_ADC_IRQHandler+0x288>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	2b00      	cmp	r3, #0
 800216c:	d010      	beq.n	8002190 <HAL_ADC_IRQHandler+0x228>
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_ADC_IRQHandler+0x288>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2b06      	cmp	r3, #6
 8002178:	d00a      	beq.n	8002190 <HAL_ADC_IRQHandler+0x228>
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_ADC_IRQHandler+0x288>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2b07      	cmp	r3, #7
 8002184:	d004      	beq.n	8002190 <HAL_ADC_IRQHandler+0x228>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800218e:	d104      	bne.n	800219a <HAL_ADC_IRQHandler+0x232>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e003      	b.n	80021a2 <HAL_ADC_IRQHandler+0x23a>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800219a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d12f      	bne.n	800220c <HAL_ADC_IRQHandler+0x2a4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11c      	bne.n	80021f4 <HAL_ADC_IRQHandler+0x28c>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021c8:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d114      	bne.n	800220c <HAL_ADC_IRQHandler+0x2a4>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
 80021ee:	e00d      	b.n	800220c <HAL_ADC_IRQHandler+0x2a4>
 80021f0:	50000300 	.word	0x50000300
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f043 0210 	orr.w	r2, r3, #16
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f043 0201 	orr.w	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f8cb 	bl	80023a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2260      	movs	r2, #96	; 0x60
 8002218:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002224:	2b80      	cmp	r3, #128	; 0x80
 8002226:	d113      	bne.n	8002250 <HAL_ADC_IRQHandler+0x2e8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	2b80      	cmp	r3, #128	; 0x80
 8002234:	d10c      	bne.n	8002250 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fcea 	bl	8001c1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800225e:	d115      	bne.n	800228c <HAL_ADC_IRQHandler+0x324>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800226e:	d10d      	bne.n	800228c <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f8a7 	bl	80023d0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800228a:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800229a:	d115      	bne.n	80022c8 <HAL_ADC_IRQHandler+0x360>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022aa:	d10d      	bne.n	80022c8 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f893 	bl	80023e4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b10      	cmp	r3, #16
 80022d4:	d13d      	bne.n	8002352 <HAL_ADC_IRQHandler+0x3ea>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b10      	cmp	r3, #16
 80022e2:	d136      	bne.n	8002352 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d102      	bne.n	80022f2 <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 80022ec:	2301      	movs	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	e019      	b.n	8002326 <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022f2:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <HAL_ADC_IRQHandler+0x43c>)
 80022f4:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d10a      	bne.n	8002326 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 8002310:	2301      	movs	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e007      	b.n	8002326 <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 8002322:	2301      	movs	r3, #1
 8002324:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d10e      	bne.n	800234a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	f043 0202 	orr.w	r2, r3, #2
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff fc73 	bl	8001c30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2210      	movs	r2, #16
 8002350:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002360:	d11b      	bne.n	800239a <HAL_ADC_IRQHandler+0x432>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002370:	d113      	bne.n	800239a <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f043 0208 	orr.w	r2, r3, #8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002392:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f811 	bl	80023bc <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	50000300 	.word	0x50000300

080023a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b09b      	sub	sp, #108	; 0x6c
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_ADC_ConfigChannel+0x22>
 8002416:	2302      	movs	r3, #2
 8002418:	e2a5      	b.n	8002966 <HAL_ADC_ConfigChannel+0x56e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	f040 8289 	bne.w	8002944 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b04      	cmp	r3, #4
 8002438:	d81c      	bhi.n	8002474 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	461a      	mov	r2, r3
 800244e:	231f      	movs	r3, #31
 8002450:	4093      	lsls	r3, r2
 8002452:	43db      	mvns	r3, r3
 8002454:	4019      	ands	r1, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa00 f203 	lsl.w	r2, r0, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
 8002472:	e063      	b.n	800253c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b09      	cmp	r3, #9
 800247a:	d81e      	bhi.n	80024ba <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	3b1e      	subs	r3, #30
 8002490:	221f      	movs	r2, #31
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	4019      	ands	r1, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	3b1e      	subs	r3, #30
 80024ac:	fa00 f203 	lsl.w	r2, r0, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	635a      	str	r2, [r3, #52]	; 0x34
 80024b8:	e040      	b.n	800253c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b0e      	cmp	r3, #14
 80024c0:	d81e      	bhi.n	8002500 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	3b3c      	subs	r3, #60	; 0x3c
 80024d6:	221f      	movs	r2, #31
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	4019      	ands	r1, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	3b3c      	subs	r3, #60	; 0x3c
 80024f2:	fa00 f203 	lsl.w	r2, r0, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	639a      	str	r2, [r3, #56]	; 0x38
 80024fe:	e01d      	b.n	800253c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	3b5a      	subs	r3, #90	; 0x5a
 8002514:	221f      	movs	r2, #31
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	4019      	ands	r1, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	3b5a      	subs	r3, #90	; 0x5a
 8002530:	fa00 f203 	lsl.w	r2, r0, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 80e5 	bne.w	8002716 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b09      	cmp	r3, #9
 8002552:	d91c      	bls.n	800258e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6999      	ldr	r1, [r3, #24]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4613      	mov	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	3b1e      	subs	r3, #30
 8002566:	2207      	movs	r2, #7
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	4019      	ands	r1, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6898      	ldr	r0, [r3, #8]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	3b1e      	subs	r3, #30
 8002580:	fa00 f203 	lsl.w	r2, r0, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	619a      	str	r2, [r3, #24]
 800258c:	e019      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6959      	ldr	r1, [r3, #20]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	2207      	movs	r2, #7
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	4019      	ands	r1, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6898      	ldr	r0, [r3, #8]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	3b01      	subs	r3, #1
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d84f      	bhi.n	8002684 <HAL_ADC_ConfigChannel+0x28c>
 80025e4:	a201      	add	r2, pc, #4	; (adr r2, 80025ec <HAL_ADC_ConfigChannel+0x1f4>)
 80025e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ea:	bf00      	nop
 80025ec:	080025fd 	.word	0x080025fd
 80025f0:	0800261f 	.word	0x0800261f
 80025f4:	08002641 	.word	0x08002641
 80025f8:	08002663 	.word	0x08002663
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002602:	4b9e      	ldr	r3, [pc, #632]	; (800287c <HAL_ADC_ConfigChannel+0x484>)
 8002604:	4013      	ands	r3, r2
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	0691      	lsls	r1, r2, #26
 800260c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800260e:	430a      	orrs	r2, r1
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800261a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800261c:	e07e      	b.n	800271c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002624:	4b95      	ldr	r3, [pc, #596]	; (800287c <HAL_ADC_ConfigChannel+0x484>)
 8002626:	4013      	ands	r3, r2
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	0691      	lsls	r1, r2, #26
 800262e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002630:	430a      	orrs	r2, r1
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800263c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800263e:	e06d      	b.n	800271c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002646:	4b8d      	ldr	r3, [pc, #564]	; (800287c <HAL_ADC_ConfigChannel+0x484>)
 8002648:	4013      	ands	r3, r2
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	0691      	lsls	r1, r2, #26
 8002650:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002652:	430a      	orrs	r2, r1
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800265e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002660:	e05c      	b.n	800271c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002668:	4b84      	ldr	r3, [pc, #528]	; (800287c <HAL_ADC_ConfigChannel+0x484>)
 800266a:	4013      	ands	r3, r2
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	0691      	lsls	r1, r2, #26
 8002672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002674:	430a      	orrs	r2, r1
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002680:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002682:	e04b      	b.n	800271c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	069b      	lsls	r3, r3, #26
 8002694:	429a      	cmp	r2, r3
 8002696:	d107      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026a6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	069b      	lsls	r3, r3, #26
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d107      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026ca:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	069b      	lsls	r3, r3, #26
 80026dc:	429a      	cmp	r2, r3
 80026de:	d107      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026ee:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	069b      	lsls	r3, r3, #26
 8002700:	429a      	cmp	r2, r3
 8002702:	d10a      	bne.n	800271a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002712:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002714:	e001      	b.n	800271a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002716:	bf00      	nop
 8002718:	e000      	b.n	800271c <HAL_ADC_ConfigChannel+0x324>
      break;
 800271a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d108      	bne.n	800273c <HAL_ADC_ConfigChannel+0x344>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x344>
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <HAL_ADC_ConfigChannel+0x346>
 800273c:	2300      	movs	r3, #0
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 810b 	bne.w	800295a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d00f      	beq.n	800276c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2201      	movs	r2, #1
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43da      	mvns	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	400a      	ands	r2, r1
 8002766:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800276a:	e049      	b.n	8002800 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2201      	movs	r2, #1
 800277a:	409a      	lsls	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b09      	cmp	r3, #9
 800278c:	d91c      	bls.n	80027c8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6999      	ldr	r1, [r3, #24]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	3b1b      	subs	r3, #27
 80027a0:	2207      	movs	r2, #7
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	4019      	ands	r1, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6898      	ldr	r0, [r3, #8]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	3b1b      	subs	r3, #27
 80027ba:	fa00 f203 	lsl.w	r2, r0, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	619a      	str	r2, [r3, #24]
 80027c6:	e01b      	b.n	8002800 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6959      	ldr	r1, [r3, #20]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	2207      	movs	r2, #7
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	4019      	ands	r1, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	6898      	ldr	r0, [r3, #8]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	fa00 f203 	lsl.w	r2, r0, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002800:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <HAL_ADC_ConfigChannel+0x488>)
 8002802:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b10      	cmp	r3, #16
 800280a:	d105      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800280c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800281c:	2b11      	cmp	r3, #17
 800281e:	d105      	bne.n	800282c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00b      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002830:	2b12      	cmp	r3, #18
 8002832:	f040 8092 	bne.w	800295a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 808b 	bne.w	800295a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800284c:	d102      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x45c>
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_ADC_ConfigChannel+0x48c>)
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	e002      	b.n	800285a <HAL_ADC_ConfigChannel+0x462>
 8002854:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002858:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b01      	cmp	r3, #1
 8002866:	d10f      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x490>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b01      	cmp	r3, #1
 8002874:	d108      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x490>
 8002876:	2301      	movs	r3, #1
 8002878:	e007      	b.n	800288a <HAL_ADC_ConfigChannel+0x492>
 800287a:	bf00      	nop
 800287c:	83fff000 	.word	0x83fff000
 8002880:	50000300 	.word	0x50000300
 8002884:	50000100 	.word	0x50000100
 8002888:	2300      	movs	r3, #0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d150      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800288e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002890:	2b00      	cmp	r3, #0
 8002892:	d010      	beq.n	80028b6 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	2b01      	cmp	r3, #1
 800289e:	d107      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x4b8>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x4b8>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x4ba>
 80028b0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d13c      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	d11d      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x502>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c6:	d118      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80028c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028d4:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_ADC_ConfigChannel+0x57c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a27      	ldr	r2, [pc, #156]	; (8002978 <HAL_ADC_ConfigChannel+0x580>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	0c9a      	lsrs	r2, r3, #18
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028ea:	e002      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f9      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028f8:	e02e      	b.n	8002958 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b11      	cmp	r3, #17
 8002900:	d10b      	bne.n	800291a <HAL_ADC_ConfigChannel+0x522>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800290a:	d106      	bne.n	800291a <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800290c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002916:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002918:	e01e      	b.n	8002958 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b12      	cmp	r3, #18
 8002920:	d11a      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800292a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800292c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800292e:	e013      	b.n	8002958 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002942:	e00a      	b.n	800295a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	f043 0220 	orr.w	r2, r3, #32
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002956:	e000      	b.n	800295a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002958:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002962:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002966:	4618      	mov	r0, r3
 8002968:	376c      	adds	r7, #108	; 0x6c
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000000 	.word	0x20000000
 8002978:	431bde83 	.word	0x431bde83

0800297c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800297c:	b480      	push	{r7}
 800297e:	b099      	sub	sp, #100	; 0x64
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002994:	d102      	bne.n	800299c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002996:	4b5a      	ldr	r3, [pc, #360]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	e002      	b.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800299c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029a0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0a2      	b.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e09b      	b.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d17f      	bne.n	8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d179      	bne.n	8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029dc:	4b49      	ldr	r3, [pc, #292]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80029de:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d040      	beq.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80029e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029fa:	035b      	lsls	r3, r3, #13
 80029fc:	430b      	orrs	r3, r1
 80029fe:	431a      	orrs	r2, r3
 8002a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a02:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d108      	bne.n	8002a24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002a24:	2300      	movs	r3, #0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d15c      	bne.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d107      	bne.n	8002a46 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002a46:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d14b      	bne.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002a4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a54:	f023 030f 	bic.w	r3, r3, #15
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	6811      	ldr	r1, [r2, #0]
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	6892      	ldr	r2, [r2, #8]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	431a      	orrs	r2, r3
 8002a64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a66:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a68:	e03c      	b.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a74:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d108      	bne.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002a96:	2300      	movs	r3, #0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d123      	bne.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d107      	bne.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002ab8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d112      	bne.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ac6:	f023 030f 	bic.w	r3, r3, #15
 8002aca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002acc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ace:	e009      	b.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ae2:	e000      	b.n	8002ae6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ae4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002aee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002af2:	4618      	mov	r0, r3
 8002af4:	3764      	adds	r7, #100	; 0x64
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	50000100 	.word	0x50000100
 8002b04:	50000300 	.word	0x50000300

08002b08 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d108      	bne.n	8002b34 <ADC_Disable+0x2c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <ADC_Disable+0x2c>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <ADC_Disable+0x2e>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d040      	beq.n	8002bbc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030d 	and.w	r3, r3, #13
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d10f      	bne.n	8002b68 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0202 	orr.w	r2, r2, #2
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002b60:	f7ff f846 	bl	8001bf0 <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b66:	e022      	b.n	8002bae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f043 0210 	orr.w	r2, r3, #16
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b78:	f043 0201 	orr.w	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e01c      	b.n	8002bbe <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b84:	f7ff f834 	bl	8001bf0 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d90d      	bls.n	8002bae <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f043 0210 	orr.w	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	f043 0201 	orr.w	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e007      	b.n	8002bbe <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d0e3      	beq.n	8002b84 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0ed      	b.n	8002db4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fe f94f 	bl	8000e88 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0202 	bic.w	r2, r2, #2
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bfa:	f7fe fff9 	bl	8001bf0 <HAL_GetTick>
 8002bfe:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c00:	e012      	b.n	8002c28 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c02:	f7fe fff5 	bl	8001bf0 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b0a      	cmp	r3, #10
 8002c0e:	d90b      	bls.n	8002c28 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2205      	movs	r2, #5
 8002c20:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0c5      	b.n	8002db4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1e5      	bne.n	8002c02 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c46:	f7fe ffd3 	bl	8001bf0 <HAL_GetTick>
 8002c4a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c4c:	e012      	b.n	8002c74 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c4e:	f7fe ffcf 	bl	8001bf0 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b0a      	cmp	r3, #10
 8002c5a:	d90b      	bls.n	8002c74 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2205      	movs	r2, #5
 8002c6c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e09f      	b.n	8002db4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0e5      	beq.n	8002c4e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7e1b      	ldrb	r3, [r3, #24]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d108      	bne.n	8002c9c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e007      	b.n	8002cac <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002caa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7e5b      	ldrb	r3, [r3, #25]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d108      	bne.n	8002cc6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	e007      	b.n	8002cd6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	7e9b      	ldrb	r3, [r3, #26]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d108      	bne.n	8002cf0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0220 	orr.w	r2, r2, #32
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e007      	b.n	8002d00 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0220 	bic.w	r2, r2, #32
 8002cfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	7edb      	ldrb	r3, [r3, #27]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d108      	bne.n	8002d1a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0210 	bic.w	r2, r2, #16
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e007      	b.n	8002d2a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0210 	orr.w	r2, r2, #16
 8002d28:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7f1b      	ldrb	r3, [r3, #28]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d108      	bne.n	8002d44 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0208 	orr.w	r2, r2, #8
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	e007      	b.n	8002d54 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0208 	bic.w	r2, r2, #8
 8002d52:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7f5b      	ldrb	r3, [r3, #29]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d108      	bne.n	8002d6e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0204 	orr.w	r2, r2, #4
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	e007      	b.n	8002d7e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0204 	bic.w	r2, r2, #4
 8002d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	ea42 0103 	orr.w	r1, r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	1e5a      	subs	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d003      	beq.n	8002de2 <HAL_CAN_ConfigFilter+0x26>
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	f040 80aa 	bne.w	8002f36 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	401a      	ands	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d123      	bne.n	8002e64 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	401a      	ands	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e3e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	3248      	adds	r2, #72	; 0x48
 8002e44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e58:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e5a:	6979      	ldr	r1, [r7, #20]
 8002e5c:	3348      	adds	r3, #72	; 0x48
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	440b      	add	r3, r1
 8002e62:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d122      	bne.n	8002eb2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	431a      	orrs	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3248      	adds	r2, #72	; 0x48
 8002e92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ea6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ea8:	6979      	ldr	r1, [r7, #20]
 8002eaa:	3348      	adds	r3, #72	; 0x48
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ecc:	e007      	b.n	8002ede <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002ef8:	e007      	b.n	8002f0a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d107      	bne.n	8002f22 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f28:	f023 0201 	bic.w	r2, r3, #1
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e006      	b.n	8002f44 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
  }
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	371c      	adds	r7, #28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d12e      	bne.n	8002fc2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f7c:	f7fe fe38 	bl	8001bf0 <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f82:	e012      	b.n	8002faa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f84:	f7fe fe34 	bl	8001bf0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b0a      	cmp	r3, #10
 8002f90:	d90b      	bls.n	8002faa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2205      	movs	r2, #5
 8002fa2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e012      	b.n	8002fd0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e5      	bne.n	8002f84 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e006      	b.n	8002fd0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
  }
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ff6:	7ffb      	ldrb	r3, [r7, #31]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d003      	beq.n	8003004 <HAL_CAN_AddTxMessage+0x2c>
 8002ffc:	7ffb      	ldrb	r3, [r7, #31]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	f040 80b8 	bne.w	8003174 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003014:	2b00      	cmp	r3, #0
 8003016:	d105      	bne.n	8003024 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80a0 	beq.w	8003164 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	0e1b      	lsrs	r3, r3, #24
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d907      	bls.n	8003044 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e09e      	b.n	8003182 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003044:	2201      	movs	r2, #1
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	409a      	lsls	r2, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10d      	bne.n	8003072 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003060:	68f9      	ldr	r1, [r7, #12]
 8003062:	6809      	ldr	r1, [r1, #0]
 8003064:	431a      	orrs	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	3318      	adds	r3, #24
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	440b      	add	r3, r1
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	e00f      	b.n	8003092 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800307c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003082:	68f9      	ldr	r1, [r7, #12]
 8003084:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003086:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3318      	adds	r3, #24
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	440b      	add	r3, r1
 8003090:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6819      	ldr	r1, [r3, #0]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3318      	adds	r3, #24
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	440b      	add	r3, r1
 80030a2:	3304      	adds	r3, #4
 80030a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	7d1b      	ldrb	r3, [r3, #20]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d111      	bne.n	80030d2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	3318      	adds	r3, #24
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	4413      	add	r3, r2
 80030ba:	3304      	adds	r3, #4
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	6811      	ldr	r1, [r2, #0]
 80030c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	3318      	adds	r3, #24
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	440b      	add	r3, r1
 80030ce:	3304      	adds	r3, #4
 80030d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3307      	adds	r3, #7
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	061a      	lsls	r2, r3, #24
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3306      	adds	r3, #6
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3305      	adds	r3, #5
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	4313      	orrs	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	3204      	adds	r2, #4
 80030f2:	7812      	ldrb	r2, [r2, #0]
 80030f4:	4610      	mov	r0, r2
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	6811      	ldr	r1, [r2, #0]
 80030fa:	ea43 0200 	orr.w	r2, r3, r0
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	440b      	add	r3, r1
 8003104:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003108:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3303      	adds	r3, #3
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	061a      	lsls	r2, r3, #24
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3302      	adds	r3, #2
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3301      	adds	r3, #1
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	4313      	orrs	r3, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	7812      	ldrb	r2, [r2, #0]
 800312a:	4610      	mov	r0, r2
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	6811      	ldr	r1, [r2, #0]
 8003130:	ea43 0200 	orr.w	r2, r3, r0
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	440b      	add	r3, r1
 800313a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800313e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3318      	adds	r3, #24
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	4413      	add	r3, r2
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	6811      	ldr	r1, [r2, #0]
 8003152:	f043 0201 	orr.w	r2, r3, #1
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	3318      	adds	r3, #24
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	440b      	add	r3, r1
 800315e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	e00e      	b.n	8003182 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e006      	b.n	8003182 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
  }
}
 8003182:	4618      	mov	r0, r3
 8003184:	3724      	adds	r7, #36	; 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031a0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80031a2:	7afb      	ldrb	r3, [r7, #11]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d002      	beq.n	80031ae <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80031a8:	7afb      	ldrb	r3, [r7, #11]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d11d      	bne.n	80031ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3301      	adds	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3301      	adds	r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3301      	adds	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80031ea:	68fb      	ldr	r3, [r7, #12]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800320c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800320e:	7dfb      	ldrb	r3, [r7, #23]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d003      	beq.n	800321c <HAL_CAN_GetRxMessage+0x24>
 8003214:	7dfb      	ldrb	r3, [r7, #23]
 8003216:	2b02      	cmp	r3, #2
 8003218:	f040 80f3 	bne.w	8003402 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10e      	bne.n	8003240 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d116      	bne.n	800325e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0e7      	b.n	8003410 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d107      	bne.n	800325e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0d8      	b.n	8003410 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	331b      	adds	r3, #27
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	4413      	add	r3, r2
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0204 	and.w	r2, r3, #4
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10c      	bne.n	8003296 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	331b      	adds	r3, #27
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	4413      	add	r3, r2
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	0d5b      	lsrs	r3, r3, #21
 800328c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e00b      	b.n	80032ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	331b      	adds	r3, #27
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	4413      	add	r3, r2
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	331b      	adds	r3, #27
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	4413      	add	r3, r2
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0202 	and.w	r2, r3, #2
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	331b      	adds	r3, #27
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	4413      	add	r3, r2
 80032d0:	3304      	adds	r3, #4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 020f 	and.w	r2, r3, #15
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	331b      	adds	r3, #27
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	4413      	add	r3, r2
 80032e8:	3304      	adds	r3, #4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	331b      	adds	r3, #27
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	4413      	add	r3, r2
 8003300:	3304      	adds	r3, #4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	b29a      	uxth	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	4413      	add	r3, r2
 8003316:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	4413      	add	r3, r2
 800332c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	0a1a      	lsrs	r2, r3, #8
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	3301      	adds	r3, #1
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	4413      	add	r3, r2
 8003346:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	0c1a      	lsrs	r2, r3, #16
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	3302      	adds	r3, #2
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	4413      	add	r3, r2
 8003360:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	0e1a      	lsrs	r2, r3, #24
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	3303      	adds	r3, #3
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	4413      	add	r3, r2
 800337a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	3304      	adds	r3, #4
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	4413      	add	r3, r2
 8003392:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0a1a      	lsrs	r2, r3, #8
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	3305      	adds	r3, #5
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	0c1a      	lsrs	r2, r3, #16
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	3306      	adds	r3, #6
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	0e1a      	lsrs	r2, r3, #24
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	3307      	adds	r3, #7
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d108      	bne.n	80033ee <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0220 	orr.w	r2, r2, #32
 80033ea:	60da      	str	r2, [r3, #12]
 80033ec:	e007      	b.n	80033fe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0220 	orr.w	r2, r2, #32
 80033fc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	e006      	b.n	8003410 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
  }
}
 8003410:	4618      	mov	r0, r3
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800342c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d002      	beq.n	800343a <HAL_CAN_ActivateNotification+0x1e>
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d109      	bne.n	800344e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6959      	ldr	r1, [r3, #20]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e006      	b.n	800345c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003470:	2300      	movs	r3, #0
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d07c      	beq.n	80035a8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d023      	beq.n	8003500 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2201      	movs	r2, #1
 80034be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f97d 	bl	80037ca <HAL_CAN_TxMailbox0CompleteCallback>
 80034d0:	e016      	b.n	8003500 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d004      	beq.n	80034e6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
 80034e4:	e00c      	b.n	8003500 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
 80034f8:	e002      	b.n	8003500 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f983 	bl	8003806 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d024      	beq.n	8003554 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003512:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f95d 	bl	80037de <HAL_CAN_TxMailbox1CompleteCallback>
 8003524:	e016      	b.n	8003554 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	2b00      	cmp	r3, #0
 800352e:	d004      	beq.n	800353a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
 8003538:	e00c      	b.n	8003554 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003540:	2b00      	cmp	r3, #0
 8003542:	d004      	beq.n	800354e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
 800354c:	e002      	b.n	8003554 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f963 	bl	800381a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d024      	beq.n	80035a8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003566:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f93d 	bl	80037f2 <HAL_CAN_TxMailbox2CompleteCallback>
 8003578:	e016      	b.n	80035a8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d004      	beq.n	800358e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
 800358c:	e00c      	b.n	80035a8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d004      	beq.n	80035a2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
 80035a0:	e002      	b.n	80035a8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f943 	bl	800382e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2210      	movs	r2, #16
 80035ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d006      	beq.n	80035ee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2208      	movs	r2, #8
 80035e6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f92a 	bl	8003842 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d009      	beq.n	800360c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fd fc9a 	bl	8000f40 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00c      	beq.n	8003630 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003626:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2210      	movs	r2, #16
 800362e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00b      	beq.n	8003652 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d006      	beq.n	8003652 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2208      	movs	r2, #8
 800364a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f90c 	bl	800386a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f8f3 	bl	8003856 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b00      	cmp	r3, #0
 8003682:	d006      	beq.n	8003692 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2210      	movs	r2, #16
 800368a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f8f6 	bl	800387e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d006      	beq.n	80036b4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2208      	movs	r2, #8
 80036ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8ef 	bl	8003892 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d075      	beq.n	80037aa <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d06c      	beq.n	80037a2 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	f043 0304 	orr.w	r3, r3, #4
 800371a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003722:	2b00      	cmp	r3, #0
 8003724:	d03d      	beq.n	80037a2 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800372c:	2b00      	cmp	r3, #0
 800372e:	d038      	beq.n	80037a2 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003736:	2b30      	cmp	r3, #48	; 0x30
 8003738:	d017      	beq.n	800376a <HAL_CAN_IRQHandler+0x302>
 800373a:	2b30      	cmp	r3, #48	; 0x30
 800373c:	d804      	bhi.n	8003748 <HAL_CAN_IRQHandler+0x2e0>
 800373e:	2b10      	cmp	r3, #16
 8003740:	d009      	beq.n	8003756 <HAL_CAN_IRQHandler+0x2ee>
 8003742:	2b20      	cmp	r3, #32
 8003744:	d00c      	beq.n	8003760 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003746:	e024      	b.n	8003792 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003748:	2b50      	cmp	r3, #80	; 0x50
 800374a:	d018      	beq.n	800377e <HAL_CAN_IRQHandler+0x316>
 800374c:	2b60      	cmp	r3, #96	; 0x60
 800374e:	d01b      	beq.n	8003788 <HAL_CAN_IRQHandler+0x320>
 8003750:	2b40      	cmp	r3, #64	; 0x40
 8003752:	d00f      	beq.n	8003774 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003754:	e01d      	b.n	8003792 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	f043 0308 	orr.w	r3, r3, #8
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800375e:	e018      	b.n	8003792 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	f043 0310 	orr.w	r3, r3, #16
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003768:	e013      	b.n	8003792 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	f043 0320 	orr.w	r3, r3, #32
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003772:	e00e      	b.n	8003792 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800377c:	e009      	b.n	8003792 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003786:	e004      	b.n	8003792 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003790:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037a0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2204      	movs	r2, #4
 80037a8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f872 	bl	80038a6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80037c2:	bf00      	nop
 80037c4:	3728      	adds	r7, #40	; 0x28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038cc:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038d8:	4013      	ands	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ee:	4a04      	ldr	r2, [pc, #16]	; (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	60d3      	str	r3, [r2, #12]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <__NVIC_GetPriorityGrouping+0x18>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	f003 0307 	and.w	r3, r3, #7
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	db0b      	blt.n	800394a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	4907      	ldr	r1, [pc, #28]	; (8003958 <__NVIC_EnableIRQ+0x38>)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2001      	movs	r0, #1
 8003942:	fa00 f202 	lsl.w	r2, r0, r2
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000e100 	.word	0xe000e100

0800395c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	db0a      	blt.n	8003986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	490c      	ldr	r1, [pc, #48]	; (80039a8 <__NVIC_SetPriority+0x4c>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	440b      	add	r3, r1
 8003980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003984:	e00a      	b.n	800399c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	4908      	ldr	r1, [pc, #32]	; (80039ac <__NVIC_SetPriority+0x50>)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3b04      	subs	r3, #4
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	440b      	add	r3, r1
 800399a:	761a      	strb	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f1c3 0307 	rsb	r3, r3, #7
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	bf28      	it	cs
 80039ce:	2304      	movcs	r3, #4
 80039d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d902      	bls.n	80039e0 <NVIC_EncodePriority+0x30>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3b03      	subs	r3, #3
 80039de:	e000      	b.n	80039e2 <NVIC_EncodePriority+0x32>
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	401a      	ands	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f8:	f04f 31ff 	mov.w	r1, #4294967295
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	43d9      	mvns	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	4313      	orrs	r3, r2
         );
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3724      	adds	r7, #36	; 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff ff4c 	bl	80038bc <__NVIC_SetPriorityGrouping>
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a3e:	f7ff ff61 	bl	8003904 <__NVIC_GetPriorityGrouping>
 8003a42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	6978      	ldr	r0, [r7, #20]
 8003a4a:	f7ff ffb1 	bl	80039b0 <NVIC_EncodePriority>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff ff80 	bl	800395c <__NVIC_SetPriority>
}
 8003a5c:	bf00      	nop
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff ff54 	bl	8003920 <__NVIC_EnableIRQ>
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e037      	b.n	8003b06 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003aac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ab0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f8f1 	bl	8003cd0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}  
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d005      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2204      	movs	r2, #4
 8003b28:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
 8003b2e:	e027      	b.n	8003b80 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 020e 	bic.w	r2, r2, #14
 8003b3e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	2101      	movs	r1, #1
 8003b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	4798      	blx	r3
    } 
  }
  return status;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d024      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x72>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01f      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d107      	bne.n	8003bda <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0204 	bic.w	r2, r2, #4
 8003bd8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	2104      	movs	r1, #4
 8003be4:	fa01 f202 	lsl.w	r2, r1, r2
 8003be8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d06a      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003bfa:	e065      	b.n	8003cc8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	2202      	movs	r2, #2
 8003c02:	409a      	lsls	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d02c      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdc>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d027      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10b      	bne.n	8003c3c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 020a 	bic.w	r2, r2, #10
 8003c32:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	2102      	movs	r1, #2
 8003c46:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d035      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003c64:	e030      	b.n	8003cc8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	2208      	movs	r2, #8
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d028      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x13e>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d023      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 020e 	bic.w	r2, r2, #14
 8003c8e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c98:	2101      	movs	r1, #1
 8003c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d004      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	4798      	blx	r3
    }
  }
}  
 8003cc6:	e7ff      	b.n	8003cc8 <HAL_DMA_IRQHandler+0x13e>
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <DMA_CalcBaseAndBitshift+0x34>)
 8003ce0:	4413      	add	r3, r2
 8003ce2:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <DMA_CalcBaseAndBitshift+0x38>)
 8003ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	009a      	lsls	r2, r3, #2
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a06      	ldr	r2, [pc, #24]	; (8003d0c <DMA_CalcBaseAndBitshift+0x3c>)
 8003cf4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	bffdfff8 	.word	0xbffdfff8
 8003d08:	cccccccd 	.word	0xcccccccd
 8003d0c:	40020000 	.word	0x40020000

08003d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d1e:	e14e      	b.n	8003fbe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	2101      	movs	r1, #1
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8140 	beq.w	8003fb8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x38>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b12      	cmp	r3, #18
 8003d46:	d123      	bne.n	8003d90 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	08da      	lsrs	r2, r3, #3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3208      	adds	r2, #8
 8003d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	220f      	movs	r2, #15
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	08da      	lsrs	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3208      	adds	r2, #8
 8003d8a:	6939      	ldr	r1, [r7, #16]
 8003d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 0203 	and.w	r2, r3, #3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d00b      	beq.n	8003de4 <HAL_GPIO_Init+0xd4>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d007      	beq.n	8003de4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dd8:	2b11      	cmp	r3, #17
 8003dda:	d003      	beq.n	8003de4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b12      	cmp	r3, #18
 8003de2:	d130      	bne.n	8003e46 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	f003 0201 	and.w	r2, r3, #1
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	2203      	movs	r2, #3
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 809a 	beq.w	8003fb8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e84:	4b55      	ldr	r3, [pc, #340]	; (8003fdc <HAL_GPIO_Init+0x2cc>)
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	4a54      	ldr	r2, [pc, #336]	; (8003fdc <HAL_GPIO_Init+0x2cc>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	6193      	str	r3, [r2, #24]
 8003e90:	4b52      	ldr	r3, [pc, #328]	; (8003fdc <HAL_GPIO_Init+0x2cc>)
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e9c:	4a50      	ldr	r2, [pc, #320]	; (8003fe0 <HAL_GPIO_Init+0x2d0>)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	089b      	lsrs	r3, r3, #2
 8003ea2:	3302      	adds	r3, #2
 8003ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	220f      	movs	r2, #15
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ec6:	d013      	beq.n	8003ef0 <HAL_GPIO_Init+0x1e0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a46      	ldr	r2, [pc, #280]	; (8003fe4 <HAL_GPIO_Init+0x2d4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00d      	beq.n	8003eec <HAL_GPIO_Init+0x1dc>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a45      	ldr	r2, [pc, #276]	; (8003fe8 <HAL_GPIO_Init+0x2d8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d007      	beq.n	8003ee8 <HAL_GPIO_Init+0x1d8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a44      	ldr	r2, [pc, #272]	; (8003fec <HAL_GPIO_Init+0x2dc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d101      	bne.n	8003ee4 <HAL_GPIO_Init+0x1d4>
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e006      	b.n	8003ef2 <HAL_GPIO_Init+0x1e2>
 8003ee4:	2305      	movs	r3, #5
 8003ee6:	e004      	b.n	8003ef2 <HAL_GPIO_Init+0x1e2>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e002      	b.n	8003ef2 <HAL_GPIO_Init+0x1e2>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <HAL_GPIO_Init+0x1e2>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	f002 0203 	and.w	r2, r2, #3
 8003ef8:	0092      	lsls	r2, r2, #2
 8003efa:	4093      	lsls	r3, r2
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f02:	4937      	ldr	r1, [pc, #220]	; (8003fe0 <HAL_GPIO_Init+0x2d0>)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	089b      	lsrs	r3, r3, #2
 8003f08:	3302      	adds	r3, #2
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f10:	4b37      	ldr	r3, [pc, #220]	; (8003ff0 <HAL_GPIO_Init+0x2e0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f34:	4a2e      	ldr	r2, [pc, #184]	; (8003ff0 <HAL_GPIO_Init+0x2e0>)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <HAL_GPIO_Init+0x2e0>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4013      	ands	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f5e:	4a24      	ldr	r2, [pc, #144]	; (8003ff0 <HAL_GPIO_Init+0x2e0>)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f64:	4b22      	ldr	r3, [pc, #136]	; (8003ff0 <HAL_GPIO_Init+0x2e0>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f88:	4a19      	ldr	r2, [pc, #100]	; (8003ff0 <HAL_GPIO_Init+0x2e0>)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f8e:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <HAL_GPIO_Init+0x2e0>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	43db      	mvns	r3, r3
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003fb2:	4a0f      	ldr	r2, [pc, #60]	; (8003ff0 <HAL_GPIO_Init+0x2e0>)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f47f aea9 	bne.w	8003d20 <HAL_GPIO_Init+0x10>
  }
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40010000 	.word	0x40010000
 8003fe4:	48000400 	.word	0x48000400
 8003fe8:	48000800 	.word	0x48000800
 8003fec:	48000c00 	.word	0x48000c00
 8003ff0:	40010400 	.word	0x40010400

08003ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
 8004000:	4613      	mov	r3, r2
 8004002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004004:	787b      	ldrb	r3, [r7, #1]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004010:	e002      	b.n	8004018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004012:	887a      	ldrh	r2, [r7, #2]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800402a:	af00      	add	r7, sp, #0
 800402c:	1d3b      	adds	r3, r7, #4
 800402e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004030:	1d3b      	adds	r3, r7, #4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	f000 bef4 	b.w	8004e26 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403e:	1d3b      	adds	r3, r7, #4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 816a 	beq.w	8004322 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800404e:	4bb3      	ldr	r3, [pc, #716]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b04      	cmp	r3, #4
 8004058:	d00c      	beq.n	8004074 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800405a:	4bb0      	ldr	r3, [pc, #704]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b08      	cmp	r3, #8
 8004064:	d159      	bne.n	800411a <HAL_RCC_OscConfig+0xf6>
 8004066:	4bad      	ldr	r3, [pc, #692]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004072:	d152      	bne.n	800411a <HAL_RCC_OscConfig+0xf6>
 8004074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004078:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004088:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	fab3 f383 	clz	r3, r3
 8004090:	b2db      	uxtb	r3, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d102      	bne.n	80040a6 <HAL_RCC_OscConfig+0x82>
 80040a0:	4b9e      	ldr	r3, [pc, #632]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	e015      	b.n	80040d2 <HAL_RCC_OscConfig+0xae>
 80040a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040aa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80040ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040be:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80040c2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80040ce:	4b93      	ldr	r3, [pc, #588]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040d6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80040da:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80040de:	fa92 f2a2 	rbit	r2, r2
 80040e2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80040e6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80040ea:	fab2 f282 	clz	r2, r2
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	f042 0220 	orr.w	r2, r2, #32
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	f002 021f 	and.w	r2, r2, #31
 80040fa:	2101      	movs	r1, #1
 80040fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004100:	4013      	ands	r3, r2
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 810c 	beq.w	8004320 <HAL_RCC_OscConfig+0x2fc>
 8004108:	1d3b      	adds	r3, r7, #4
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	f040 8106 	bne.w	8004320 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	f000 be86 	b.w	8004e26 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800411a:	1d3b      	adds	r3, r7, #4
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004124:	d106      	bne.n	8004134 <HAL_RCC_OscConfig+0x110>
 8004126:	4b7d      	ldr	r3, [pc, #500]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a7c      	ldr	r2, [pc, #496]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e030      	b.n	8004196 <HAL_RCC_OscConfig+0x172>
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10c      	bne.n	8004158 <HAL_RCC_OscConfig+0x134>
 800413e:	4b77      	ldr	r3, [pc, #476]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a76      	ldr	r2, [pc, #472]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	4b74      	ldr	r3, [pc, #464]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a73      	ldr	r2, [pc, #460]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	e01e      	b.n	8004196 <HAL_RCC_OscConfig+0x172>
 8004158:	1d3b      	adds	r3, r7, #4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004162:	d10c      	bne.n	800417e <HAL_RCC_OscConfig+0x15a>
 8004164:	4b6d      	ldr	r3, [pc, #436]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a6c      	ldr	r2, [pc, #432]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 800416a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	4b6a      	ldr	r3, [pc, #424]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a69      	ldr	r2, [pc, #420]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	e00b      	b.n	8004196 <HAL_RCC_OscConfig+0x172>
 800417e:	4b67      	ldr	r3, [pc, #412]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a66      	ldr	r2, [pc, #408]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b64      	ldr	r3, [pc, #400]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a63      	ldr	r2, [pc, #396]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004194:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004196:	4b61      	ldr	r3, [pc, #388]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	f023 020f 	bic.w	r2, r3, #15
 800419e:	1d3b      	adds	r3, r7, #4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	495d      	ldr	r1, [pc, #372]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d059      	beq.n	8004268 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b4:	f7fd fd1c 	bl	8001bf0 <HAL_GetTick>
 80041b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041bc:	e00a      	b.n	80041d4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041be:	f7fd fd17 	bl	8001bf0 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	; 0x64
 80041cc:	d902      	bls.n	80041d4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	f000 be29 	b.w	8004e26 <HAL_RCC_OscConfig+0xe02>
 80041d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041d8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80041e8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ec:	fab3 f383 	clz	r3, r3
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d102      	bne.n	8004206 <HAL_RCC_OscConfig+0x1e2>
 8004200:	4b46      	ldr	r3, [pc, #280]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	e015      	b.n	8004232 <HAL_RCC_OscConfig+0x20e>
 8004206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800420a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004212:	fa93 f3a3 	rbit	r3, r3
 8004216:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800421a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800421e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004222:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004226:	fa93 f3a3 	rbit	r3, r3
 800422a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800422e:	4b3b      	ldr	r3, [pc, #236]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004236:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800423a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800423e:	fa92 f2a2 	rbit	r2, r2
 8004242:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004246:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800424a:	fab2 f282 	clz	r2, r2
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	f042 0220 	orr.w	r2, r2, #32
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	f002 021f 	and.w	r2, r2, #31
 800425a:	2101      	movs	r1, #1
 800425c:	fa01 f202 	lsl.w	r2, r1, r2
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0ab      	beq.n	80041be <HAL_RCC_OscConfig+0x19a>
 8004266:	e05c      	b.n	8004322 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004268:	f7fd fcc2 	bl	8001bf0 <HAL_GetTick>
 800426c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004270:	e00a      	b.n	8004288 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004272:	f7fd fcbd 	bl	8001bf0 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	; 0x64
 8004280:	d902      	bls.n	8004288 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	f000 bdcf 	b.w	8004e26 <HAL_RCC_OscConfig+0xe02>
 8004288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800428c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800429c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a0:	fab3 f383 	clz	r3, r3
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d102      	bne.n	80042ba <HAL_RCC_OscConfig+0x296>
 80042b4:	4b19      	ldr	r3, [pc, #100]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	e015      	b.n	80042e6 <HAL_RCC_OscConfig+0x2c2>
 80042ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042be:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80042c6:	fa93 f3a3 	rbit	r3, r3
 80042ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80042ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042d2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80042d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80042e2:	4b0e      	ldr	r3, [pc, #56]	; (800431c <HAL_RCC_OscConfig+0x2f8>)
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042ea:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80042ee:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80042f2:	fa92 f2a2 	rbit	r2, r2
 80042f6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80042fa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80042fe:	fab2 f282 	clz	r2, r2
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	f042 0220 	orr.w	r2, r2, #32
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	f002 021f 	and.w	r2, r2, #31
 800430e:	2101      	movs	r1, #1
 8004310:	fa01 f202 	lsl.w	r2, r1, r2
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1ab      	bne.n	8004272 <HAL_RCC_OscConfig+0x24e>
 800431a:	e002      	b.n	8004322 <HAL_RCC_OscConfig+0x2fe>
 800431c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004322:	1d3b      	adds	r3, r7, #4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 816f 	beq.w	8004610 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004332:	4bd0      	ldr	r3, [pc, #832]	; (8004674 <HAL_RCC_OscConfig+0x650>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00b      	beq.n	8004356 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800433e:	4bcd      	ldr	r3, [pc, #820]	; (8004674 <HAL_RCC_OscConfig+0x650>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b08      	cmp	r3, #8
 8004348:	d16c      	bne.n	8004424 <HAL_RCC_OscConfig+0x400>
 800434a:	4bca      	ldr	r3, [pc, #808]	; (8004674 <HAL_RCC_OscConfig+0x650>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d166      	bne.n	8004424 <HAL_RCC_OscConfig+0x400>
 8004356:	2302      	movs	r3, #2
 8004358:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004368:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436c:	fab3 f383 	clz	r3, r3
 8004370:	b2db      	uxtb	r3, r3
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	b2db      	uxtb	r3, r3
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d102      	bne.n	8004386 <HAL_RCC_OscConfig+0x362>
 8004380:	4bbc      	ldr	r3, [pc, #752]	; (8004674 <HAL_RCC_OscConfig+0x650>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	e013      	b.n	80043ae <HAL_RCC_OscConfig+0x38a>
 8004386:	2302      	movs	r3, #2
 8004388:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004390:	fa93 f3a3 	rbit	r3, r3
 8004394:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004398:	2302      	movs	r3, #2
 800439a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800439e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80043a2:	fa93 f3a3 	rbit	r3, r3
 80043a6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80043aa:	4bb2      	ldr	r3, [pc, #712]	; (8004674 <HAL_RCC_OscConfig+0x650>)
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	2202      	movs	r2, #2
 80043b0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80043b4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80043b8:	fa92 f2a2 	rbit	r2, r2
 80043bc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80043c0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80043c4:	fab2 f282 	clz	r2, r2
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	f042 0220 	orr.w	r2, r2, #32
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	f002 021f 	and.w	r2, r2, #31
 80043d4:	2101      	movs	r1, #1
 80043d6:	fa01 f202 	lsl.w	r2, r1, r2
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <HAL_RCC_OscConfig+0x3cc>
 80043e0:	1d3b      	adds	r3, r7, #4
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d002      	beq.n	80043f0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f000 bd1b 	b.w	8004e26 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f0:	4ba0      	ldr	r3, [pc, #640]	; (8004674 <HAL_RCC_OscConfig+0x650>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	21f8      	movs	r1, #248	; 0xf8
 8004400:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004408:	fa91 f1a1 	rbit	r1, r1
 800440c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004410:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004414:	fab1 f181 	clz	r1, r1
 8004418:	b2c9      	uxtb	r1, r1
 800441a:	408b      	lsls	r3, r1
 800441c:	4995      	ldr	r1, [pc, #596]	; (8004674 <HAL_RCC_OscConfig+0x650>)
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004422:	e0f5      	b.n	8004610 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004424:	1d3b      	adds	r3, r7, #4
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8085 	beq.w	800453a <HAL_RCC_OscConfig+0x516>
 8004430:	2301      	movs	r3, #1
 8004432:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004436:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800443a:	fa93 f3a3 	rbit	r3, r3
 800443e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004442:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004450:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	461a      	mov	r2, r3
 8004458:	2301      	movs	r3, #1
 800445a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fd fbc8 	bl	8001bf0 <HAL_GetTick>
 8004460:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004464:	e00a      	b.n	800447c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004466:	f7fd fbc3 	bl	8001bf0 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d902      	bls.n	800447c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	f000 bcd5 	b.w	8004e26 <HAL_RCC_OscConfig+0xe02>
 800447c:	2302      	movs	r3, #2
 800447e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004486:	fa93 f3a3 	rbit	r3, r3
 800448a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800448e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004492:	fab3 f383 	clz	r3, r3
 8004496:	b2db      	uxtb	r3, r3
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	b2db      	uxtb	r3, r3
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d102      	bne.n	80044ac <HAL_RCC_OscConfig+0x488>
 80044a6:	4b73      	ldr	r3, [pc, #460]	; (8004674 <HAL_RCC_OscConfig+0x650>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	e013      	b.n	80044d4 <HAL_RCC_OscConfig+0x4b0>
 80044ac:	2302      	movs	r3, #2
 80044ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80044b6:	fa93 f3a3 	rbit	r3, r3
 80044ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80044be:	2302      	movs	r3, #2
 80044c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80044c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80044c8:	fa93 f3a3 	rbit	r3, r3
 80044cc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80044d0:	4b68      	ldr	r3, [pc, #416]	; (8004674 <HAL_RCC_OscConfig+0x650>)
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	2202      	movs	r2, #2
 80044d6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80044da:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80044de:	fa92 f2a2 	rbit	r2, r2
 80044e2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80044e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80044ea:	fab2 f282 	clz	r2, r2
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	f042 0220 	orr.w	r2, r2, #32
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	f002 021f 	and.w	r2, r2, #31
 80044fa:	2101      	movs	r1, #1
 80044fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004500:	4013      	ands	r3, r2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0af      	beq.n	8004466 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004506:	4b5b      	ldr	r3, [pc, #364]	; (8004674 <HAL_RCC_OscConfig+0x650>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800450e:	1d3b      	adds	r3, r7, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	21f8      	movs	r1, #248	; 0xf8
 8004516:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800451e:	fa91 f1a1 	rbit	r1, r1
 8004522:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004526:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800452a:	fab1 f181 	clz	r1, r1
 800452e:	b2c9      	uxtb	r1, r1
 8004530:	408b      	lsls	r3, r1
 8004532:	4950      	ldr	r1, [pc, #320]	; (8004674 <HAL_RCC_OscConfig+0x650>)
 8004534:	4313      	orrs	r3, r2
 8004536:	600b      	str	r3, [r1, #0]
 8004538:	e06a      	b.n	8004610 <HAL_RCC_OscConfig+0x5ec>
 800453a:	2301      	movs	r3, #1
 800453c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004540:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004544:	fa93 f3a3 	rbit	r3, r3
 8004548:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800454c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004550:	fab3 f383 	clz	r3, r3
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800455a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	461a      	mov	r2, r3
 8004562:	2300      	movs	r3, #0
 8004564:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004566:	f7fd fb43 	bl	8001bf0 <HAL_GetTick>
 800456a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456e:	e00a      	b.n	8004586 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004570:	f7fd fb3e 	bl	8001bf0 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d902      	bls.n	8004586 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	f000 bc50 	b.w	8004e26 <HAL_RCC_OscConfig+0xe02>
 8004586:	2302      	movs	r3, #2
 8004588:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004590:	fa93 f3a3 	rbit	r3, r3
 8004594:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459c:	fab3 f383 	clz	r3, r3
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d102      	bne.n	80045b6 <HAL_RCC_OscConfig+0x592>
 80045b0:	4b30      	ldr	r3, [pc, #192]	; (8004674 <HAL_RCC_OscConfig+0x650>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	e013      	b.n	80045de <HAL_RCC_OscConfig+0x5ba>
 80045b6:	2302      	movs	r3, #2
 80045b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045c0:	fa93 f3a3 	rbit	r3, r3
 80045c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80045c8:	2302      	movs	r3, #2
 80045ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80045ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80045d2:	fa93 f3a3 	rbit	r3, r3
 80045d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80045da:	4b26      	ldr	r3, [pc, #152]	; (8004674 <HAL_RCC_OscConfig+0x650>)
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2202      	movs	r2, #2
 80045e0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80045e4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80045e8:	fa92 f2a2 	rbit	r2, r2
 80045ec:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80045f0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80045f4:	fab2 f282 	clz	r2, r2
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	f042 0220 	orr.w	r2, r2, #32
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	f002 021f 	and.w	r2, r2, #31
 8004604:	2101      	movs	r1, #1
 8004606:	fa01 f202 	lsl.w	r2, r1, r2
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1af      	bne.n	8004570 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004610:	1d3b      	adds	r3, r7, #4
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80da 	beq.w	80047d4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004620:	1d3b      	adds	r3, r7, #4
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d069      	beq.n	80046fe <HAL_RCC_OscConfig+0x6da>
 800462a:	2301      	movs	r3, #1
 800462c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004634:	fa93 f3a3 	rbit	r3, r3
 8004638:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800463c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCC_OscConfig+0x654>)
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	461a      	mov	r2, r3
 8004650:	2301      	movs	r3, #1
 8004652:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004654:	f7fd facc 	bl	8001bf0 <HAL_GetTick>
 8004658:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465c:	e00e      	b.n	800467c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465e:	f7fd fac7 	bl	8001bf0 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d906      	bls.n	800467c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e3d9      	b.n	8004e26 <HAL_RCC_OscConfig+0xe02>
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	10908120 	.word	0x10908120
 800467c:	2302      	movs	r3, #2
 800467e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004686:	fa93 f3a3 	rbit	r3, r3
 800468a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800468e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004692:	2202      	movs	r2, #2
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	fa93 f2a3 	rbit	r2, r3
 80046a0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80046aa:	2202      	movs	r2, #2
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	fa93 f2a3 	rbit	r2, r3
 80046b8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80046bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046be:	4ba5      	ldr	r3, [pc, #660]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 80046c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046c2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80046c6:	2102      	movs	r1, #2
 80046c8:	6019      	str	r1, [r3, #0]
 80046ca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	fa93 f1a3 	rbit	r1, r3
 80046d4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80046d8:	6019      	str	r1, [r3, #0]
  return result;
 80046da:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	fab3 f383 	clz	r3, r3
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	2101      	movs	r1, #1
 80046f2:	fa01 f303 	lsl.w	r3, r1, r3
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0b0      	beq.n	800465e <HAL_RCC_OscConfig+0x63a>
 80046fc:	e06a      	b.n	80047d4 <HAL_RCC_OscConfig+0x7b0>
 80046fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004702:	2201      	movs	r2, #1
 8004704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	fa93 f2a3 	rbit	r2, r3
 8004710:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004714:	601a      	str	r2, [r3, #0]
  return result;
 8004716:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800471a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800471c:	fab3 f383 	clz	r3, r3
 8004720:	b2db      	uxtb	r3, r3
 8004722:	461a      	mov	r2, r3
 8004724:	4b8c      	ldr	r3, [pc, #560]	; (8004958 <HAL_RCC_OscConfig+0x934>)
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	461a      	mov	r2, r3
 800472c:	2300      	movs	r3, #0
 800472e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004730:	f7fd fa5e 	bl	8001bf0 <HAL_GetTick>
 8004734:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004738:	e009      	b.n	800474e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800473a:	f7fd fa59 	bl	8001bf0 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e36b      	b.n	8004e26 <HAL_RCC_OscConfig+0xe02>
 800474e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004752:	2202      	movs	r2, #2
 8004754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	fa93 f2a3 	rbit	r2, r3
 8004760:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800476a:	2202      	movs	r2, #2
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	fa93 f2a3 	rbit	r2, r3
 8004778:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004782:	2202      	movs	r2, #2
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	fa93 f2a3 	rbit	r2, r3
 8004790:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004794:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004796:	4b6f      	ldr	r3, [pc, #444]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 8004798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800479a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800479e:	2102      	movs	r1, #2
 80047a0:	6019      	str	r1, [r3, #0]
 80047a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	fa93 f1a3 	rbit	r1, r3
 80047ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80047b0:	6019      	str	r1, [r3, #0]
  return result;
 80047b2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	fab3 f383 	clz	r3, r3
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	2101      	movs	r1, #1
 80047ca:	fa01 f303 	lsl.w	r3, r1, r3
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1b2      	bne.n	800473a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d4:	1d3b      	adds	r3, r7, #4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8158 	beq.w	8004a94 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e4:	2300      	movs	r3, #0
 80047e6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ea:	4b5a      	ldr	r3, [pc, #360]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d112      	bne.n	800481c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	4b57      	ldr	r3, [pc, #348]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	4a56      	ldr	r2, [pc, #344]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	61d3      	str	r3, [r2, #28]
 8004802:	4b54      	ldr	r3, [pc, #336]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800480a:	f107 0308 	add.w	r3, r7, #8
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	f107 0308 	add.w	r3, r7, #8
 8004814:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481c:	4b4f      	ldr	r3, [pc, #316]	; (800495c <HAL_RCC_OscConfig+0x938>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d11a      	bne.n	800485e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004828:	4b4c      	ldr	r3, [pc, #304]	; (800495c <HAL_RCC_OscConfig+0x938>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a4b      	ldr	r2, [pc, #300]	; (800495c <HAL_RCC_OscConfig+0x938>)
 800482e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004832:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004834:	f7fd f9dc 	bl	8001bf0 <HAL_GetTick>
 8004838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483c:	e009      	b.n	8004852 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483e:	f7fd f9d7 	bl	8001bf0 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e2e9      	b.n	8004e26 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004852:	4b42      	ldr	r3, [pc, #264]	; (800495c <HAL_RCC_OscConfig+0x938>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0ef      	beq.n	800483e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800485e:	1d3b      	adds	r3, r7, #4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d106      	bne.n	8004876 <HAL_RCC_OscConfig+0x852>
 8004868:	4b3a      	ldr	r3, [pc, #232]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	4a39      	ldr	r2, [pc, #228]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	6213      	str	r3, [r2, #32]
 8004874:	e02f      	b.n	80048d6 <HAL_RCC_OscConfig+0x8b2>
 8004876:	1d3b      	adds	r3, r7, #4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10c      	bne.n	800489a <HAL_RCC_OscConfig+0x876>
 8004880:	4b34      	ldr	r3, [pc, #208]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	4a33      	ldr	r2, [pc, #204]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	6213      	str	r3, [r2, #32]
 800488c:	4b31      	ldr	r3, [pc, #196]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	4a30      	ldr	r2, [pc, #192]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 8004892:	f023 0304 	bic.w	r3, r3, #4
 8004896:	6213      	str	r3, [r2, #32]
 8004898:	e01d      	b.n	80048d6 <HAL_RCC_OscConfig+0x8b2>
 800489a:	1d3b      	adds	r3, r7, #4
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	d10c      	bne.n	80048be <HAL_RCC_OscConfig+0x89a>
 80048a4:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	4a2a      	ldr	r2, [pc, #168]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 80048aa:	f043 0304 	orr.w	r3, r3, #4
 80048ae:	6213      	str	r3, [r2, #32]
 80048b0:	4b28      	ldr	r3, [pc, #160]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	4a27      	ldr	r2, [pc, #156]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6213      	str	r3, [r2, #32]
 80048bc:	e00b      	b.n	80048d6 <HAL_RCC_OscConfig+0x8b2>
 80048be:	4b25      	ldr	r3, [pc, #148]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	4a24      	ldr	r2, [pc, #144]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	6213      	str	r3, [r2, #32]
 80048ca:	4b22      	ldr	r3, [pc, #136]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	4a21      	ldr	r2, [pc, #132]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 80048d0:	f023 0304 	bic.w	r3, r3, #4
 80048d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048d6:	1d3b      	adds	r3, r7, #4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d06b      	beq.n	80049b8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e0:	f7fd f986 	bl	8001bf0 <HAL_GetTick>
 80048e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e8:	e00b      	b.n	8004902 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ea:	f7fd f981 	bl	8001bf0 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e291      	b.n	8004e26 <HAL_RCC_OscConfig+0xe02>
 8004902:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004906:	2202      	movs	r2, #2
 8004908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	fa93 f2a3 	rbit	r2, r3
 8004914:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800491e:	2202      	movs	r2, #2
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	fa93 f2a3 	rbit	r2, r3
 800492c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004930:	601a      	str	r2, [r3, #0]
  return result;
 8004932:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004936:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004938:	fab3 f383 	clz	r3, r3
 800493c:	b2db      	uxtb	r3, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	b2db      	uxtb	r3, r3
 8004942:	f043 0302 	orr.w	r3, r3, #2
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d109      	bne.n	8004960 <HAL_RCC_OscConfig+0x93c>
 800494c:	4b01      	ldr	r3, [pc, #4]	; (8004954 <HAL_RCC_OscConfig+0x930>)
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	e014      	b.n	800497c <HAL_RCC_OscConfig+0x958>
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000
 8004958:	10908120 	.word	0x10908120
 800495c:	40007000 	.word	0x40007000
 8004960:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004964:	2202      	movs	r2, #2
 8004966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	fa93 f2a3 	rbit	r2, r3
 8004972:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	4bbb      	ldr	r3, [pc, #748]	; (8004c68 <HAL_RCC_OscConfig+0xc44>)
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004980:	2102      	movs	r1, #2
 8004982:	6011      	str	r1, [r2, #0]
 8004984:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	fa92 f1a2 	rbit	r1, r2
 800498e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004992:	6011      	str	r1, [r2, #0]
  return result;
 8004994:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	fab2 f282 	clz	r2, r2
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	f002 021f 	and.w	r2, r2, #31
 80049aa:	2101      	movs	r1, #1
 80049ac:	fa01 f202 	lsl.w	r2, r1, r2
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d099      	beq.n	80048ea <HAL_RCC_OscConfig+0x8c6>
 80049b6:	e063      	b.n	8004a80 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b8:	f7fd f91a 	bl	8001bf0 <HAL_GetTick>
 80049bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c0:	e00b      	b.n	80049da <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c2:	f7fd f915 	bl	8001bf0 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e225      	b.n	8004e26 <HAL_RCC_OscConfig+0xe02>
 80049da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80049de:	2202      	movs	r2, #2
 80049e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	fa93 f2a3 	rbit	r2, r3
 80049ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80049f6:	2202      	movs	r2, #2
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	fa93 f2a3 	rbit	r2, r3
 8004a04:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004a08:	601a      	str	r2, [r3, #0]
  return result;
 8004a0a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004a0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a10:	fab3 f383 	clz	r3, r3
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	f043 0302 	orr.w	r3, r3, #2
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d102      	bne.n	8004a2a <HAL_RCC_OscConfig+0xa06>
 8004a24:	4b90      	ldr	r3, [pc, #576]	; (8004c68 <HAL_RCC_OscConfig+0xc44>)
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	e00d      	b.n	8004a46 <HAL_RCC_OscConfig+0xa22>
 8004a2a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004a2e:	2202      	movs	r2, #2
 8004a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	fa93 f2a3 	rbit	r2, r3
 8004a3c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	4b89      	ldr	r3, [pc, #548]	; (8004c68 <HAL_RCC_OscConfig+0xc44>)
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a4a:	2102      	movs	r1, #2
 8004a4c:	6011      	str	r1, [r2, #0]
 8004a4e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	fa92 f1a2 	rbit	r1, r2
 8004a58:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004a5c:	6011      	str	r1, [r2, #0]
  return result;
 8004a5e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	fab2 f282 	clz	r2, r2
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	f002 021f 	and.w	r2, r2, #31
 8004a74:	2101      	movs	r1, #1
 8004a76:	fa01 f202 	lsl.w	r2, r1, r2
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1a0      	bne.n	80049c2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a80:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d105      	bne.n	8004a94 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a88:	4b77      	ldr	r3, [pc, #476]	; (8004c68 <HAL_RCC_OscConfig+0xc44>)
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	4a76      	ldr	r2, [pc, #472]	; (8004c68 <HAL_RCC_OscConfig+0xc44>)
 8004a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a92:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a94:	1d3b      	adds	r3, r7, #4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 81c2 	beq.w	8004e24 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa0:	4b71      	ldr	r3, [pc, #452]	; (8004c68 <HAL_RCC_OscConfig+0xc44>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	f000 819c 	beq.w	8004de6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aae:	1d3b      	adds	r3, r7, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	f040 8114 	bne.w	8004ce2 <HAL_RCC_OscConfig+0xcbe>
 8004aba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004abe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	fa93 f2a3 	rbit	r2, r3
 8004ace:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ad2:	601a      	str	r2, [r3, #0]
  return result;
 8004ad4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ad8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ada:	fab3 f383 	clz	r3, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ae4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	461a      	mov	r2, r3
 8004aec:	2300      	movs	r3, #0
 8004aee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fd f87e 	bl	8001bf0 <HAL_GetTick>
 8004af4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004af8:	e009      	b.n	8004b0e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004afa:	f7fd f879 	bl	8001bf0 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e18b      	b.n	8004e26 <HAL_RCC_OscConfig+0xe02>
 8004b0e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004b12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b18:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	fa93 f2a3 	rbit	r2, r3
 8004b22:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004b26:	601a      	str	r2, [r3, #0]
  return result;
 8004b28:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004b2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b2e:	fab3 f383 	clz	r3, r3
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d102      	bne.n	8004b48 <HAL_RCC_OscConfig+0xb24>
 8004b42:	4b49      	ldr	r3, [pc, #292]	; (8004c68 <HAL_RCC_OscConfig+0xc44>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	e01b      	b.n	8004b80 <HAL_RCC_OscConfig+0xb5c>
 8004b48:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	fa93 f2a3 	rbit	r2, r3
 8004b5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004b66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	fa93 f2a3 	rbit	r2, r3
 8004b76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	4b3a      	ldr	r3, [pc, #232]	; (8004c68 <HAL_RCC_OscConfig+0xc44>)
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b88:	6011      	str	r1, [r2, #0]
 8004b8a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	fa92 f1a2 	rbit	r1, r2
 8004b94:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004b98:	6011      	str	r1, [r2, #0]
  return result;
 8004b9a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	fab2 f282 	clz	r2, r2
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	f042 0220 	orr.w	r2, r2, #32
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	f002 021f 	and.w	r2, r2, #31
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d19e      	bne.n	8004afa <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bbc:	4b2a      	ldr	r3, [pc, #168]	; (8004c68 <HAL_RCC_OscConfig+0xc44>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004bc4:	1d3b      	adds	r3, r7, #4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004bca:	1d3b      	adds	r3, r7, #4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	4925      	ldr	r1, [pc, #148]	; (8004c68 <HAL_RCC_OscConfig+0xc44>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	604b      	str	r3, [r1, #4]
 8004bd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004bdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	fa93 f2a3 	rbit	r2, r3
 8004bec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004bf0:	601a      	str	r2, [r3, #0]
  return result;
 8004bf2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004bf6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bf8:	fab3 f383 	clz	r3, r3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	461a      	mov	r2, r3
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0e:	f7fc ffef 	bl	8001bf0 <HAL_GetTick>
 8004c12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c16:	e009      	b.n	8004c2c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c18:	f7fc ffea 	bl	8001bf0 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e0fc      	b.n	8004e26 <HAL_RCC_OscConfig+0xe02>
 8004c2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004c30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	fa93 f2a3 	rbit	r2, r3
 8004c40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c44:	601a      	str	r2, [r3, #0]
  return result;
 8004c46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c4c:	fab3 f383 	clz	r3, r3
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d105      	bne.n	8004c6c <HAL_RCC_OscConfig+0xc48>
 8004c60:	4b01      	ldr	r3, [pc, #4]	; (8004c68 <HAL_RCC_OscConfig+0xc44>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	e01e      	b.n	8004ca4 <HAL_RCC_OscConfig+0xc80>
 8004c66:	bf00      	nop
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	fa93 f2a3 	rbit	r2, r3
 8004c80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	fa93 f2a3 	rbit	r2, r3
 8004c9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	4b63      	ldr	r3, [pc, #396]	; (8004e30 <HAL_RCC_OscConfig+0xe0c>)
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004ca8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004cac:	6011      	str	r1, [r2, #0]
 8004cae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	fa92 f1a2 	rbit	r1, r2
 8004cb8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004cbc:	6011      	str	r1, [r2, #0]
  return result;
 8004cbe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	fab2 f282 	clz	r2, r2
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	f042 0220 	orr.w	r2, r2, #32
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	f002 021f 	and.w	r2, r2, #31
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d09b      	beq.n	8004c18 <HAL_RCC_OscConfig+0xbf4>
 8004ce0:	e0a0      	b.n	8004e24 <HAL_RCC_OscConfig+0xe00>
 8004ce2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ce6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	fa93 f2a3 	rbit	r2, r3
 8004cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cfa:	601a      	str	r2, [r3, #0]
  return result;
 8004cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d00:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d02:	fab3 f383 	clz	r3, r3
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	461a      	mov	r2, r3
 8004d14:	2300      	movs	r3, #0
 8004d16:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d18:	f7fc ff6a 	bl	8001bf0 <HAL_GetTick>
 8004d1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d20:	e009      	b.n	8004d36 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d22:	f7fc ff65 	bl	8001bf0 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e077      	b.n	8004e26 <HAL_RCC_OscConfig+0xe02>
 8004d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	fa93 f2a3 	rbit	r2, r3
 8004d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d4e:	601a      	str	r2, [r3, #0]
  return result;
 8004d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	095b      	lsrs	r3, r3, #5
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	f043 0301 	orr.w	r3, r3, #1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d102      	bne.n	8004d70 <HAL_RCC_OscConfig+0xd4c>
 8004d6a:	4b31      	ldr	r3, [pc, #196]	; (8004e30 <HAL_RCC_OscConfig+0xe0c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	e01b      	b.n	8004da8 <HAL_RCC_OscConfig+0xd84>
 8004d70:	f107 0320 	add.w	r3, r7, #32
 8004d74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	f107 0320 	add.w	r3, r7, #32
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	fa93 f2a3 	rbit	r2, r3
 8004d84:	f107 031c 	add.w	r3, r7, #28
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f107 0318 	add.w	r3, r7, #24
 8004d8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	f107 0318 	add.w	r3, r7, #24
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	fa93 f2a3 	rbit	r2, r3
 8004d9e:	f107 0314 	add.w	r3, r7, #20
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	4b22      	ldr	r3, [pc, #136]	; (8004e30 <HAL_RCC_OscConfig+0xe0c>)
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	f107 0210 	add.w	r2, r7, #16
 8004dac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004db0:	6011      	str	r1, [r2, #0]
 8004db2:	f107 0210 	add.w	r2, r7, #16
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	fa92 f1a2 	rbit	r1, r2
 8004dbc:	f107 020c 	add.w	r2, r7, #12
 8004dc0:	6011      	str	r1, [r2, #0]
  return result;
 8004dc2:	f107 020c 	add.w	r2, r7, #12
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	fab2 f282 	clz	r2, r2
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	f042 0220 	orr.w	r2, r2, #32
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	f002 021f 	and.w	r2, r2, #31
 8004dd8:	2101      	movs	r1, #1
 8004dda:	fa01 f202 	lsl.w	r2, r1, r2
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d19e      	bne.n	8004d22 <HAL_RCC_OscConfig+0xcfe>
 8004de4:	e01e      	b.n	8004e24 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004de6:	1d3b      	adds	r3, r7, #4
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e018      	b.n	8004e26 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004df4:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <HAL_RCC_OscConfig+0xe0c>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004dfc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004e00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e04:	1d3b      	adds	r3, r7, #4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d108      	bne.n	8004e20 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004e0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004e12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e16:	1d3b      	adds	r3, r7, #4
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e000      	b.n	8004e26 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40021000 	.word	0x40021000

08004e34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b09e      	sub	sp, #120	; 0x78
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e162      	b.n	8005112 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e4c:	4b90      	ldr	r3, [pc, #576]	; (8005090 <HAL_RCC_ClockConfig+0x25c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d910      	bls.n	8004e7c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5a:	4b8d      	ldr	r3, [pc, #564]	; (8005090 <HAL_RCC_ClockConfig+0x25c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f023 0207 	bic.w	r2, r3, #7
 8004e62:	498b      	ldr	r1, [pc, #556]	; (8005090 <HAL_RCC_ClockConfig+0x25c>)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6a:	4b89      	ldr	r3, [pc, #548]	; (8005090 <HAL_RCC_ClockConfig+0x25c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d001      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e14a      	b.n	8005112 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e88:	4b82      	ldr	r3, [pc, #520]	; (8005094 <HAL_RCC_ClockConfig+0x260>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	497f      	ldr	r1, [pc, #508]	; (8005094 <HAL_RCC_ClockConfig+0x260>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 80dc 	beq.w	8005060 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d13c      	bne.n	8004f2a <HAL_RCC_ClockConfig+0xf6>
 8004eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eb4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eb8:	fa93 f3a3 	rbit	r3, r3
 8004ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec0:	fab3 f383 	clz	r3, r3
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d102      	bne.n	8004eda <HAL_RCC_ClockConfig+0xa6>
 8004ed4:	4b6f      	ldr	r3, [pc, #444]	; (8005094 <HAL_RCC_ClockConfig+0x260>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	e00f      	b.n	8004efa <HAL_RCC_ClockConfig+0xc6>
 8004eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ede:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee2:	fa93 f3a3 	rbit	r3, r3
 8004ee6:	667b      	str	r3, [r7, #100]	; 0x64
 8004ee8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eec:	663b      	str	r3, [r7, #96]	; 0x60
 8004eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ef0:	fa93 f3a3 	rbit	r3, r3
 8004ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ef6:	4b67      	ldr	r3, [pc, #412]	; (8005094 <HAL_RCC_ClockConfig+0x260>)
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004efe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f02:	fa92 f2a2 	rbit	r2, r2
 8004f06:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004f08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f0a:	fab2 f282 	clz	r2, r2
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	f042 0220 	orr.w	r2, r2, #32
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	f002 021f 	and.w	r2, r2, #31
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f20:	4013      	ands	r3, r2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d17b      	bne.n	800501e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e0f3      	b.n	8005112 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d13c      	bne.n	8004fac <HAL_RCC_ClockConfig+0x178>
 8004f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f3a:	fa93 f3a3 	rbit	r3, r3
 8004f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f42:	fab3 f383 	clz	r3, r3
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d102      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x128>
 8004f56:	4b4f      	ldr	r3, [pc, #316]	; (8005094 <HAL_RCC_ClockConfig+0x260>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	e00f      	b.n	8004f7c <HAL_RCC_ClockConfig+0x148>
 8004f5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f64:	fa93 f3a3 	rbit	r3, r3
 8004f68:	647b      	str	r3, [r7, #68]	; 0x44
 8004f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f6e:	643b      	str	r3, [r7, #64]	; 0x40
 8004f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f72:	fa93 f3a3 	rbit	r3, r3
 8004f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f78:	4b46      	ldr	r3, [pc, #280]	; (8005094 <HAL_RCC_ClockConfig+0x260>)
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f80:	63ba      	str	r2, [r7, #56]	; 0x38
 8004f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f84:	fa92 f2a2 	rbit	r2, r2
 8004f88:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f8c:	fab2 f282 	clz	r2, r2
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	f042 0220 	orr.w	r2, r2, #32
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	f002 021f 	and.w	r2, r2, #31
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d13a      	bne.n	800501e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0b2      	b.n	8005112 <HAL_RCC_ClockConfig+0x2de>
 8004fac:	2302      	movs	r3, #2
 8004fae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fba:	fab3 f383 	clz	r3, r3
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d102      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x1a0>
 8004fce:	4b31      	ldr	r3, [pc, #196]	; (8005094 <HAL_RCC_ClockConfig+0x260>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	e00d      	b.n	8004ff0 <HAL_RCC_ClockConfig+0x1bc>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	fa93 f3a3 	rbit	r3, r3
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	623b      	str	r3, [r7, #32]
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	fa93 f3a3 	rbit	r3, r3
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	4b29      	ldr	r3, [pc, #164]	; (8005094 <HAL_RCC_ClockConfig+0x260>)
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	61ba      	str	r2, [r7, #24]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	fa92 f2a2 	rbit	r2, r2
 8004ffa:	617a      	str	r2, [r7, #20]
  return result;
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	fab2 f282 	clz	r2, r2
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	f042 0220 	orr.w	r2, r2, #32
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	f002 021f 	and.w	r2, r2, #31
 800500e:	2101      	movs	r1, #1
 8005010:	fa01 f202 	lsl.w	r2, r1, r2
 8005014:	4013      	ands	r3, r2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e079      	b.n	8005112 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800501e:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <HAL_RCC_ClockConfig+0x260>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f023 0203 	bic.w	r2, r3, #3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	491a      	ldr	r1, [pc, #104]	; (8005094 <HAL_RCC_ClockConfig+0x260>)
 800502c:	4313      	orrs	r3, r2
 800502e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005030:	f7fc fdde 	bl	8001bf0 <HAL_GetTick>
 8005034:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005036:	e00a      	b.n	800504e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005038:	f7fc fdda 	bl	8001bf0 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	f241 3288 	movw	r2, #5000	; 0x1388
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e061      	b.n	8005112 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504e:	4b11      	ldr	r3, [pc, #68]	; (8005094 <HAL_RCC_ClockConfig+0x260>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f003 020c 	and.w	r2, r3, #12
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	429a      	cmp	r2, r3
 800505e:	d1eb      	bne.n	8005038 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <HAL_RCC_ClockConfig+0x25c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d214      	bcs.n	8005098 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506e:	4b08      	ldr	r3, [pc, #32]	; (8005090 <HAL_RCC_ClockConfig+0x25c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f023 0207 	bic.w	r2, r3, #7
 8005076:	4906      	ldr	r1, [pc, #24]	; (8005090 <HAL_RCC_ClockConfig+0x25c>)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	4313      	orrs	r3, r2
 800507c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800507e:	4b04      	ldr	r3, [pc, #16]	; (8005090 <HAL_RCC_ClockConfig+0x25c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d005      	beq.n	8005098 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e040      	b.n	8005112 <HAL_RCC_ClockConfig+0x2de>
 8005090:	40022000 	.word	0x40022000
 8005094:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a4:	4b1d      	ldr	r3, [pc, #116]	; (800511c <HAL_RCC_ClockConfig+0x2e8>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	491a      	ldr	r1, [pc, #104]	; (800511c <HAL_RCC_ClockConfig+0x2e8>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050c2:	4b16      	ldr	r3, [pc, #88]	; (800511c <HAL_RCC_ClockConfig+0x2e8>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	4912      	ldr	r1, [pc, #72]	; (800511c <HAL_RCC_ClockConfig+0x2e8>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80050d6:	f000 f829 	bl	800512c <HAL_RCC_GetSysClockFreq>
 80050da:	4601      	mov	r1, r0
 80050dc:	4b0f      	ldr	r3, [pc, #60]	; (800511c <HAL_RCC_ClockConfig+0x2e8>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050e4:	22f0      	movs	r2, #240	; 0xf0
 80050e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	fa92 f2a2 	rbit	r2, r2
 80050ee:	60fa      	str	r2, [r7, #12]
  return result;
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	fab2 f282 	clz	r2, r2
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	40d3      	lsrs	r3, r2
 80050fa:	4a09      	ldr	r2, [pc, #36]	; (8005120 <HAL_RCC_ClockConfig+0x2ec>)
 80050fc:	5cd3      	ldrb	r3, [r2, r3]
 80050fe:	fa21 f303 	lsr.w	r3, r1, r3
 8005102:	4a08      	ldr	r2, [pc, #32]	; (8005124 <HAL_RCC_ClockConfig+0x2f0>)
 8005104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <HAL_RCC_ClockConfig+0x2f4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fc f994 	bl	8001438 <HAL_InitTick>
  
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3778      	adds	r7, #120	; 0x78
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000
 8005120:	08008f2c 	.word	0x08008f2c
 8005124:	20000000 	.word	0x20000000
 8005128:	20000004 	.word	0x20000004

0800512c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800512c:	b480      	push	{r7}
 800512e:	b08b      	sub	sp, #44	; 0x2c
 8005130:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	2300      	movs	r3, #0
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	2300      	movs	r3, #0
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005146:	4b29      	ldr	r3, [pc, #164]	; (80051ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	2b04      	cmp	r3, #4
 8005154:	d002      	beq.n	800515c <HAL_RCC_GetSysClockFreq+0x30>
 8005156:	2b08      	cmp	r3, #8
 8005158:	d003      	beq.n	8005162 <HAL_RCC_GetSysClockFreq+0x36>
 800515a:	e03c      	b.n	80051d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800515c:	4b24      	ldr	r3, [pc, #144]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800515e:	623b      	str	r3, [r7, #32]
      break;
 8005160:	e03c      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005168:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800516c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	fa92 f2a2 	rbit	r2, r2
 8005174:	607a      	str	r2, [r7, #4]
  return result;
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	fab2 f282 	clz	r2, r2
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	40d3      	lsrs	r3, r2
 8005180:	4a1c      	ldr	r2, [pc, #112]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005182:	5cd3      	ldrb	r3, [r2, r3]
 8005184:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005186:	4b19      	ldr	r3, [pc, #100]	; (80051ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	220f      	movs	r2, #15
 8005190:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	fa92 f2a2 	rbit	r2, r2
 8005198:	60fa      	str	r2, [r7, #12]
  return result;
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	fab2 f282 	clz	r2, r2
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	40d3      	lsrs	r3, r2
 80051a4:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80051a6:	5cd3      	ldrb	r3, [r2, r3]
 80051a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80051b4:	4a0e      	ldr	r2, [pc, #56]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	fb02 f303 	mul.w	r3, r2, r3
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
 80051c4:	e004      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	4a0c      	ldr	r2, [pc, #48]	; (80051fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	623b      	str	r3, [r7, #32]
      break;
 80051d4:	e002      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051d6:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <HAL_RCC_GetSysClockFreq+0xd4>)
 80051d8:	623b      	str	r3, [r7, #32]
      break;
 80051da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051dc:	6a3b      	ldr	r3, [r7, #32]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	372c      	adds	r7, #44	; 0x2c
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40021000 	.word	0x40021000
 80051f0:	00f42400 	.word	0x00f42400
 80051f4:	08008f44 	.word	0x08008f44
 80051f8:	08008f54 	.word	0x08008f54
 80051fc:	003d0900 	.word	0x003d0900
 8005200:	007a1200 	.word	0x007a1200

08005204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005208:	4b03      	ldr	r3, [pc, #12]	; (8005218 <HAL_RCC_GetHCLKFreq+0x14>)
 800520a:	681b      	ldr	r3, [r3, #0]
}
 800520c:	4618      	mov	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	20000000 	.word	0x20000000

0800521c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005222:	f7ff ffef 	bl	8005204 <HAL_RCC_GetHCLKFreq>
 8005226:	4601      	mov	r1, r0
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005230:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005234:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	fa92 f2a2 	rbit	r2, r2
 800523c:	603a      	str	r2, [r7, #0]
  return result;
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	fab2 f282 	clz	r2, r2
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	40d3      	lsrs	r3, r2
 8005248:	4a04      	ldr	r2, [pc, #16]	; (800525c <HAL_RCC_GetPCLK1Freq+0x40>)
 800524a:	5cd3      	ldrb	r3, [r2, r3]
 800524c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40021000 	.word	0x40021000
 800525c:	08008f3c 	.word	0x08008f3c

08005260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005266:	f7ff ffcd 	bl	8005204 <HAL_RCC_GetHCLKFreq>
 800526a:	4601      	mov	r1, r0
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005274:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005278:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	fa92 f2a2 	rbit	r2, r2
 8005280:	603a      	str	r2, [r7, #0]
  return result;
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	fab2 f282 	clz	r2, r2
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	40d3      	lsrs	r3, r2
 800528c:	4a04      	ldr	r2, [pc, #16]	; (80052a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800528e:	5cd3      	ldrb	r3, [r2, r3]
 8005290:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40021000 	.word	0x40021000
 80052a0:	08008f3c 	.word	0x08008f3c

080052a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	220f      	movs	r2, #15
 80052b2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052b4:	4b12      	ldr	r3, [pc, #72]	; (8005300 <HAL_RCC_GetClockConfig+0x5c>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 0203 	and.w	r2, r3, #3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80052c0:	4b0f      	ldr	r3, [pc, #60]	; (8005300 <HAL_RCC_GetClockConfig+0x5c>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80052cc:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <HAL_RCC_GetClockConfig+0x5c>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80052d8:	4b09      	ldr	r3, [pc, #36]	; (8005300 <HAL_RCC_GetClockConfig+0x5c>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	08db      	lsrs	r3, r3, #3
 80052de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80052e6:	4b07      	ldr	r3, [pc, #28]	; (8005304 <HAL_RCC_GetClockConfig+0x60>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0207 	and.w	r2, r3, #7
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	601a      	str	r2, [r3, #0]
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40021000 	.word	0x40021000
 8005304:	40022000 	.word	0x40022000

08005308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e01d      	b.n	8005356 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fc fa88 	bl	8001844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3304      	adds	r3, #4
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f000 fc9e 	bl	8005c88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <HAL_TIM_Base_Start_IT+0x50>)
 8005380:	4013      	ands	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b06      	cmp	r3, #6
 8005388:	d00b      	beq.n	80053a2 <HAL_TIM_Base_Start_IT+0x42>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005390:	d007      	beq.n	80053a2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0201 	orr.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	00010007 	.word	0x00010007

080053b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e01d      	b.n	8005402 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f815 	bl	800540a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f000 fc48 	bl	8005c88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2201      	movs	r2, #1
 8005430:	6839      	ldr	r1, [r7, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f000 ffe0 	bl	80063f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <HAL_TIM_PWM_Start+0x90>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00e      	beq.n	8005460 <HAL_TIM_PWM_Start+0x40>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <HAL_TIM_PWM_Start+0x94>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d009      	beq.n	8005460 <HAL_TIM_PWM_Start+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a19      	ldr	r2, [pc, #100]	; (80054b8 <HAL_TIM_PWM_Start+0x98>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d004      	beq.n	8005460 <HAL_TIM_PWM_Start+0x40>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a18      	ldr	r2, [pc, #96]	; (80054bc <HAL_TIM_PWM_Start+0x9c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d101      	bne.n	8005464 <HAL_TIM_PWM_Start+0x44>
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <HAL_TIM_PWM_Start+0x46>
 8005464:	2300      	movs	r3, #0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005478:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	4b0f      	ldr	r3, [pc, #60]	; (80054c0 <HAL_TIM_PWM_Start+0xa0>)
 8005482:	4013      	ands	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b06      	cmp	r3, #6
 800548a:	d00b      	beq.n	80054a4 <HAL_TIM_PWM_Start+0x84>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005492:	d007      	beq.n	80054a4 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40014000 	.word	0x40014000
 80054b8:	40014400 	.word	0x40014400
 80054bc:	40014800 	.word	0x40014800
 80054c0:	00010007 	.word	0x00010007

080054c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e083      	b.n	80055e0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d106      	bne.n	80054f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7fc f969 	bl	80017c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005508:	f023 0307 	bic.w	r3, r3, #7
 800550c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3304      	adds	r3, #4
 8005516:	4619      	mov	r1, r3
 8005518:	4610      	mov	r0, r2
 800551a:	f000 fbb5 	bl	8005c88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005546:	f023 0303 	bic.w	r3, r3, #3
 800554a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	4313      	orrs	r3, r2
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005564:	f023 030c 	bic.w	r3, r3, #12
 8005568:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005570:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	4313      	orrs	r3, r2
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	011a      	lsls	r2, r3, #4
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	031b      	lsls	r3, r3, #12
 8005594:	4313      	orrs	r3, r2
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80055aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	4313      	orrs	r3, r2
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <HAL_TIM_Encoder_Start+0x16>
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d008      	beq.n	800560e <HAL_TIM_Encoder_Start+0x26>
 80055fc:	e00f      	b.n	800561e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2201      	movs	r2, #1
 8005604:	2100      	movs	r1, #0
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fef6 	bl	80063f8 <TIM_CCxChannelCmd>
      break;
 800560c:	e016      	b.n	800563c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2201      	movs	r2, #1
 8005614:	2104      	movs	r1, #4
 8005616:	4618      	mov	r0, r3
 8005618:	f000 feee 	bl	80063f8 <TIM_CCxChannelCmd>
      break;
 800561c:	e00e      	b.n	800563c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2201      	movs	r2, #1
 8005624:	2100      	movs	r1, #0
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fee6 	bl	80063f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2201      	movs	r2, #1
 8005632:	2104      	movs	r1, #4
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fedf 	bl	80063f8 <TIM_CCxChannelCmd>
      break;
 800563a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b02      	cmp	r3, #2
 800566a:	d122      	bne.n	80056b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b02      	cmp	r3, #2
 8005678:	d11b      	bne.n	80056b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f06f 0202 	mvn.w	r2, #2
 8005682:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fad6 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 800569e:	e005      	b.n	80056ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fac8 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fad9 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d122      	bne.n	8005706 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f003 0304 	and.w	r3, r3, #4
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d11b      	bne.n	8005706 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f06f 0204 	mvn.w	r2, #4
 80056d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 faac 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 80056f2:	e005      	b.n	8005700 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fa9e 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 faaf 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b08      	cmp	r3, #8
 8005712:	d122      	bne.n	800575a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b08      	cmp	r3, #8
 8005720:	d11b      	bne.n	800575a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f06f 0208 	mvn.w	r2, #8
 800572a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2204      	movs	r2, #4
 8005730:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fa82 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 8005746:	e005      	b.n	8005754 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fa74 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fa85 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b10      	cmp	r3, #16
 8005766:	d122      	bne.n	80057ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b10      	cmp	r3, #16
 8005774:	d11b      	bne.n	80057ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f06f 0210 	mvn.w	r2, #16
 800577e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2208      	movs	r2, #8
 8005784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fa58 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 800579a:	e005      	b.n	80057a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fa4a 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fa5b 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d10e      	bne.n	80057da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d107      	bne.n	80057da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f06f 0201 	mvn.w	r2, #1
 80057d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7fb fded 	bl	80013b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e4:	2b80      	cmp	r3, #128	; 0x80
 80057e6:	d10e      	bne.n	8005806 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f2:	2b80      	cmp	r3, #128	; 0x80
 80057f4:	d107      	bne.n	8005806 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fe97 	bl	8006534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005814:	d10e      	bne.n	8005834 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005820:	2b80      	cmp	r3, #128	; 0x80
 8005822:	d107      	bne.n	8005834 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800582c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fe8a 	bl	8006548 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d10e      	bne.n	8005860 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584c:	2b40      	cmp	r3, #64	; 0x40
 800584e:	d107      	bne.n	8005860 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fa09 	bl	8005c72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b20      	cmp	r3, #32
 800586c:	d10e      	bne.n	800588c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b20      	cmp	r3, #32
 800587a:	d107      	bne.n	800588c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0220 	mvn.w	r2, #32
 8005884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fe4a 	bl	8006520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e105      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x226>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2202      	movs	r2, #2
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b14      	cmp	r3, #20
 80058c2:	f200 80f0 	bhi.w	8005aa6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80058c6:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	08005921 	.word	0x08005921
 80058d0:	08005aa7 	.word	0x08005aa7
 80058d4:	08005aa7 	.word	0x08005aa7
 80058d8:	08005aa7 	.word	0x08005aa7
 80058dc:	08005961 	.word	0x08005961
 80058e0:	08005aa7 	.word	0x08005aa7
 80058e4:	08005aa7 	.word	0x08005aa7
 80058e8:	08005aa7 	.word	0x08005aa7
 80058ec:	080059a3 	.word	0x080059a3
 80058f0:	08005aa7 	.word	0x08005aa7
 80058f4:	08005aa7 	.word	0x08005aa7
 80058f8:	08005aa7 	.word	0x08005aa7
 80058fc:	080059e3 	.word	0x080059e3
 8005900:	08005aa7 	.word	0x08005aa7
 8005904:	08005aa7 	.word	0x08005aa7
 8005908:	08005aa7 	.word	0x08005aa7
 800590c:	08005a25 	.word	0x08005a25
 8005910:	08005aa7 	.word	0x08005aa7
 8005914:	08005aa7 	.word	0x08005aa7
 8005918:	08005aa7 	.word	0x08005aa7
 800591c:	08005a65 	.word	0x08005a65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fa26 	bl	8005d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0208 	orr.w	r2, r2, #8
 800593a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0204 	bic.w	r2, r2, #4
 800594a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6999      	ldr	r1, [r3, #24]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	619a      	str	r2, [r3, #24]
      break;
 800595e:	e0a3      	b.n	8005aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fa8c 	bl	8005e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800597a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6999      	ldr	r1, [r3, #24]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	021a      	lsls	r2, r3, #8
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	619a      	str	r2, [r3, #24]
      break;
 80059a0:	e082      	b.n	8005aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 faeb 	bl	8005f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f042 0208 	orr.w	r2, r2, #8
 80059bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0204 	bic.w	r2, r2, #4
 80059cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69d9      	ldr	r1, [r3, #28]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	61da      	str	r2, [r3, #28]
      break;
 80059e0:	e062      	b.n	8005aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fb49 	bl	8006080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69d9      	ldr	r1, [r3, #28]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	021a      	lsls	r2, r3, #8
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	61da      	str	r2, [r3, #28]
      break;
 8005a22:	e041      	b.n	8005aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fb8c 	bl	8006148 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0208 	orr.w	r2, r2, #8
 8005a3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0204 	bic.w	r2, r2, #4
 8005a4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a62:	e021      	b.n	8005aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68b9      	ldr	r1, [r7, #8]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fbca 	bl	8006204 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	021a      	lsls	r2, r3, #8
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005aa4:	e000      	b.n	8005aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8005aa6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop

08005ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_TIM_ConfigClockSource+0x18>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e0a8      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x16a>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005afe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b40      	cmp	r3, #64	; 0x40
 8005b16:	d067      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x124>
 8005b18:	2b40      	cmp	r3, #64	; 0x40
 8005b1a:	d80b      	bhi.n	8005b34 <HAL_TIM_ConfigClockSource+0x70>
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d073      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0x144>
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d802      	bhi.n	8005b2a <HAL_TIM_ConfigClockSource+0x66>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d06f      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b28:	e078      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d06c      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0x144>
 8005b2e:	2b30      	cmp	r3, #48	; 0x30
 8005b30:	d06a      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005b32:	e073      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005b34:	2b70      	cmp	r3, #112	; 0x70
 8005b36:	d00d      	beq.n	8005b54 <HAL_TIM_ConfigClockSource+0x90>
 8005b38:	2b70      	cmp	r3, #112	; 0x70
 8005b3a:	d804      	bhi.n	8005b46 <HAL_TIM_ConfigClockSource+0x82>
 8005b3c:	2b50      	cmp	r3, #80	; 0x50
 8005b3e:	d033      	beq.n	8005ba8 <HAL_TIM_ConfigClockSource+0xe4>
 8005b40:	2b60      	cmp	r3, #96	; 0x60
 8005b42:	d041      	beq.n	8005bc8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005b44:	e06a      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4a:	d066      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x156>
 8005b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b50:	d017      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005b52:	e063      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	6899      	ldr	r1, [r3, #8]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f000 fc28 	bl	80063b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	609a      	str	r2, [r3, #8]
      break;
 8005b80:	e04c      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	6899      	ldr	r1, [r3, #8]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f000 fc11 	bl	80063b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ba4:	609a      	str	r2, [r3, #8]
      break;
 8005ba6:	e039      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6818      	ldr	r0, [r3, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	6859      	ldr	r1, [r3, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f000 fb85 	bl	80062c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2150      	movs	r1, #80	; 0x50
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fbde 	bl	8006382 <TIM_ITRx_SetConfig>
      break;
 8005bc6:	e029      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6818      	ldr	r0, [r3, #0]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	6859      	ldr	r1, [r3, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f000 fba4 	bl	8006322 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2160      	movs	r1, #96	; 0x60
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fbce 	bl	8006382 <TIM_ITRx_SetConfig>
      break;
 8005be6:	e019      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6818      	ldr	r0, [r3, #0]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	6859      	ldr	r1, [r3, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	f000 fb65 	bl	80062c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2140      	movs	r1, #64	; 0x40
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fbbe 	bl	8006382 <TIM_ITRx_SetConfig>
      break;
 8005c06:	e009      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4619      	mov	r1, r3
 8005c12:	4610      	mov	r0, r2
 8005c14:	f000 fbb5 	bl	8006382 <TIM_ITRx_SetConfig>
      break;
 8005c18:	e000      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a32      	ldr	r2, [pc, #200]	; (8005d64 <TIM_Base_SetConfig+0xdc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d007      	beq.n	8005cb0 <TIM_Base_SetConfig+0x28>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca6:	d003      	beq.n	8005cb0 <TIM_Base_SetConfig+0x28>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a2f      	ldr	r2, [pc, #188]	; (8005d68 <TIM_Base_SetConfig+0xe0>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d108      	bne.n	8005cc2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a27      	ldr	r2, [pc, #156]	; (8005d64 <TIM_Base_SetConfig+0xdc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <TIM_Base_SetConfig+0x6a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd0:	d00f      	beq.n	8005cf2 <TIM_Base_SetConfig+0x6a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a24      	ldr	r2, [pc, #144]	; (8005d68 <TIM_Base_SetConfig+0xe0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00b      	beq.n	8005cf2 <TIM_Base_SetConfig+0x6a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a23      	ldr	r2, [pc, #140]	; (8005d6c <TIM_Base_SetConfig+0xe4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d007      	beq.n	8005cf2 <TIM_Base_SetConfig+0x6a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a22      	ldr	r2, [pc, #136]	; (8005d70 <TIM_Base_SetConfig+0xe8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_Base_SetConfig+0x6a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a21      	ldr	r2, [pc, #132]	; (8005d74 <TIM_Base_SetConfig+0xec>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d108      	bne.n	8005d04 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a0e      	ldr	r2, [pc, #56]	; (8005d64 <TIM_Base_SetConfig+0xdc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00b      	beq.n	8005d48 <TIM_Base_SetConfig+0xc0>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a0e      	ldr	r2, [pc, #56]	; (8005d6c <TIM_Base_SetConfig+0xe4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d007      	beq.n	8005d48 <TIM_Base_SetConfig+0xc0>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a0d      	ldr	r2, [pc, #52]	; (8005d70 <TIM_Base_SetConfig+0xe8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_Base_SetConfig+0xc0>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <TIM_Base_SetConfig+0xec>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d103      	bne.n	8005d50 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	615a      	str	r2, [r3, #20]
}
 8005d56:	bf00      	nop
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40012c00 	.word	0x40012c00
 8005d68:	40000400 	.word	0x40000400
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	40014400 	.word	0x40014400
 8005d74:	40014800 	.word	0x40014800

08005d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	f023 0201 	bic.w	r2, r3, #1
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0303 	bic.w	r3, r3, #3
 8005db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f023 0302 	bic.w	r3, r3, #2
 8005dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a28      	ldr	r2, [pc, #160]	; (8005e74 <TIM_OC1_SetConfig+0xfc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00b      	beq.n	8005df0 <TIM_OC1_SetConfig+0x78>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a27      	ldr	r2, [pc, #156]	; (8005e78 <TIM_OC1_SetConfig+0x100>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d007      	beq.n	8005df0 <TIM_OC1_SetConfig+0x78>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <TIM_OC1_SetConfig+0x104>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_OC1_SetConfig+0x78>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <TIM_OC1_SetConfig+0x108>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10c      	bne.n	8005e0a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f023 0308 	bic.w	r3, r3, #8
 8005df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f023 0304 	bic.w	r3, r3, #4
 8005e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a19      	ldr	r2, [pc, #100]	; (8005e74 <TIM_OC1_SetConfig+0xfc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00b      	beq.n	8005e2a <TIM_OC1_SetConfig+0xb2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a18      	ldr	r2, [pc, #96]	; (8005e78 <TIM_OC1_SetConfig+0x100>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d007      	beq.n	8005e2a <TIM_OC1_SetConfig+0xb2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a17      	ldr	r2, [pc, #92]	; (8005e7c <TIM_OC1_SetConfig+0x104>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_OC1_SetConfig+0xb2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a16      	ldr	r2, [pc, #88]	; (8005e80 <TIM_OC1_SetConfig+0x108>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d111      	bne.n	8005e4e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	621a      	str	r2, [r3, #32]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40014400 	.word	0x40014400
 8005e80:	40014800 	.word	0x40014800

08005e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f023 0210 	bic.w	r2, r3, #16
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	021b      	lsls	r3, r3, #8
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f023 0320 	bic.w	r3, r3, #32
 8005ed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a24      	ldr	r2, [pc, #144]	; (8005f74 <TIM_OC2_SetConfig+0xf0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d10d      	bne.n	8005f04 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a1b      	ldr	r2, [pc, #108]	; (8005f74 <TIM_OC2_SetConfig+0xf0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00b      	beq.n	8005f24 <TIM_OC2_SetConfig+0xa0>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a1a      	ldr	r2, [pc, #104]	; (8005f78 <TIM_OC2_SetConfig+0xf4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d007      	beq.n	8005f24 <TIM_OC2_SetConfig+0xa0>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a19      	ldr	r2, [pc, #100]	; (8005f7c <TIM_OC2_SetConfig+0xf8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d003      	beq.n	8005f24 <TIM_OC2_SetConfig+0xa0>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a18      	ldr	r2, [pc, #96]	; (8005f80 <TIM_OC2_SetConfig+0xfc>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d113      	bne.n	8005f4c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f2a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f32:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40014000 	.word	0x40014000
 8005f7c:	40014400 	.word	0x40014400
 8005f80:	40014800 	.word	0x40014800

08005f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0303 	bic.w	r3, r3, #3
 8005fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	021b      	lsls	r3, r3, #8
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a23      	ldr	r2, [pc, #140]	; (8006070 <TIM_OC3_SetConfig+0xec>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d10d      	bne.n	8006002 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006000:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a1a      	ldr	r2, [pc, #104]	; (8006070 <TIM_OC3_SetConfig+0xec>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00b      	beq.n	8006022 <TIM_OC3_SetConfig+0x9e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a19      	ldr	r2, [pc, #100]	; (8006074 <TIM_OC3_SetConfig+0xf0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d007      	beq.n	8006022 <TIM_OC3_SetConfig+0x9e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a18      	ldr	r2, [pc, #96]	; (8006078 <TIM_OC3_SetConfig+0xf4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d003      	beq.n	8006022 <TIM_OC3_SetConfig+0x9e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a17      	ldr	r2, [pc, #92]	; (800607c <TIM_OC3_SetConfig+0xf8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d113      	bne.n	800604a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	4313      	orrs	r3, r2
 800603c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	011b      	lsls	r3, r3, #4
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	4313      	orrs	r3, r2
 8006048:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	621a      	str	r2, [r3, #32]
}
 8006064:	bf00      	nop
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	40012c00 	.word	0x40012c00
 8006074:	40014000 	.word	0x40014000
 8006078:	40014400 	.word	0x40014400
 800607c:	40014800 	.word	0x40014800

08006080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	031b      	lsls	r3, r3, #12
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a16      	ldr	r2, [pc, #88]	; (8006138 <TIM_OC4_SetConfig+0xb8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00b      	beq.n	80060fc <TIM_OC4_SetConfig+0x7c>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a15      	ldr	r2, [pc, #84]	; (800613c <TIM_OC4_SetConfig+0xbc>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d007      	beq.n	80060fc <TIM_OC4_SetConfig+0x7c>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a14      	ldr	r2, [pc, #80]	; (8006140 <TIM_OC4_SetConfig+0xc0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_OC4_SetConfig+0x7c>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a13      	ldr	r2, [pc, #76]	; (8006144 <TIM_OC4_SetConfig+0xc4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d109      	bne.n	8006110 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	019b      	lsls	r3, r3, #6
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4313      	orrs	r3, r2
 800610e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40012c00 	.word	0x40012c00
 800613c:	40014000 	.word	0x40014000
 8006140:	40014400 	.word	0x40014400
 8006144:	40014800 	.word	0x40014800

08006148 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800618c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	041b      	lsls	r3, r3, #16
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a15      	ldr	r2, [pc, #84]	; (80061f4 <TIM_OC5_SetConfig+0xac>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00b      	beq.n	80061ba <TIM_OC5_SetConfig+0x72>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a14      	ldr	r2, [pc, #80]	; (80061f8 <TIM_OC5_SetConfig+0xb0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d007      	beq.n	80061ba <TIM_OC5_SetConfig+0x72>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a13      	ldr	r2, [pc, #76]	; (80061fc <TIM_OC5_SetConfig+0xb4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d003      	beq.n	80061ba <TIM_OC5_SetConfig+0x72>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a12      	ldr	r2, [pc, #72]	; (8006200 <TIM_OC5_SetConfig+0xb8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d109      	bne.n	80061ce <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	621a      	str	r2, [r3, #32]
}
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	40012c00 	.word	0x40012c00
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40014400 	.word	0x40014400
 8006200:	40014800 	.word	0x40014800

08006204 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	021b      	lsls	r3, r3, #8
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800624a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	051b      	lsls	r3, r3, #20
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a16      	ldr	r2, [pc, #88]	; (80062b4 <TIM_OC6_SetConfig+0xb0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00b      	beq.n	8006278 <TIM_OC6_SetConfig+0x74>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a15      	ldr	r2, [pc, #84]	; (80062b8 <TIM_OC6_SetConfig+0xb4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d007      	beq.n	8006278 <TIM_OC6_SetConfig+0x74>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a14      	ldr	r2, [pc, #80]	; (80062bc <TIM_OC6_SetConfig+0xb8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d003      	beq.n	8006278 <TIM_OC6_SetConfig+0x74>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a13      	ldr	r2, [pc, #76]	; (80062c0 <TIM_OC6_SetConfig+0xbc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d109      	bne.n	800628c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800627e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	029b      	lsls	r3, r3, #10
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	621a      	str	r2, [r3, #32]
}
 80062a6:	bf00      	nop
 80062a8:	371c      	adds	r7, #28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	40012c00 	.word	0x40012c00
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40014400 	.word	0x40014400
 80062c0:	40014800 	.word	0x40014800

080062c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f023 0201 	bic.w	r2, r3, #1
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f023 030a 	bic.w	r3, r3, #10
 8006300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006322:	b480      	push	{r7}
 8006324:	b087      	sub	sp, #28
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f023 0210 	bic.w	r2, r3, #16
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800634c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	031b      	lsls	r3, r3, #12
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800635e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006382:	b480      	push	{r7}
 8006384:	b085      	sub	sp, #20
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006398:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	f043 0307 	orr.w	r3, r3, #7
 80063a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	609a      	str	r2, [r3, #8]
}
 80063ac:	bf00      	nop
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	021a      	lsls	r2, r3, #8
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	431a      	orrs	r2, r3
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4313      	orrs	r3, r2
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	609a      	str	r2, [r3, #8]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f003 031f 	and.w	r3, r3, #31
 800640a:	2201      	movs	r2, #1
 800640c:	fa02 f303 	lsl.w	r3, r2, r3
 8006410:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a1a      	ldr	r2, [r3, #32]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	43db      	mvns	r3, r3
 800641a:	401a      	ands	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a1a      	ldr	r2, [r3, #32]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	fa01 f303 	lsl.w	r3, r1, r3
 8006430:	431a      	orrs	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
	...

08006444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006458:	2302      	movs	r3, #2
 800645a:	e054      	b.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a24      	ldr	r2, [pc, #144]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d108      	bne.n	8006498 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800648c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a17      	ldr	r2, [pc, #92]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00e      	beq.n	80064da <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c4:	d009      	beq.n	80064da <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a13      	ldr	r2, [pc, #76]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d004      	beq.n	80064da <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a11      	ldr	r2, [pc, #68]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d10c      	bne.n	80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40012c00 	.word	0x40012c00
 8006518:	40000400 	.word	0x40000400
 800651c:	40014000 	.word	0x40014000

08006520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e040      	b.n	80065f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7fb fa96 	bl	8001ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2224      	movs	r2, #36	; 0x24
 8006588:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0201 	bic.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f986 	bl	80068ac <UART_SetConfig>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e022      	b.n	80065f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fafc 	bl	8006bb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fb83 	bl	8006cf4 <UART_CheckIdleState>
 80065ee:	4603      	mov	r3, r0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	f640 030f 	movw	r3, #2063	; 0x80f
 800661e:	4013      	ands	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d113      	bne.n	8006650 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00e      	beq.n	8006650 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b00      	cmp	r3, #0
 800663a:	d009      	beq.n	8006650 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 8114 	beq.w	800686e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	4798      	blx	r3
      }
      return;
 800664e:	e10e      	b.n	800686e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 80d6 	beq.w	8006804 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d105      	bne.n	800666e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 80cb 	beq.w	8006804 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00e      	beq.n	8006696 <HAL_UART_IRQHandler+0x9e>
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2201      	movs	r2, #1
 8006688:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800668e:	f043 0201 	orr.w	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00e      	beq.n	80066be <HAL_UART_IRQHandler+0xc6>
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d009      	beq.n	80066be <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2202      	movs	r2, #2
 80066b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066b6:	f043 0204 	orr.w	r2, r3, #4
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00e      	beq.n	80066e6 <HAL_UART_IRQHandler+0xee>
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2204      	movs	r2, #4
 80066d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066de:	f043 0202 	orr.w	r2, r3, #2
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d013      	beq.n	8006718 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	f003 0320 	and.w	r3, r3, #32
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d104      	bne.n	8006704 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006700:	2b00      	cmp	r3, #0
 8006702:	d009      	beq.n	8006718 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2208      	movs	r2, #8
 800670a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006710:	f043 0208 	orr.w	r2, r3, #8
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00f      	beq.n	8006742 <HAL_UART_IRQHandler+0x14a>
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800673a:	f043 0220 	orr.w	r2, r3, #32
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 8093 	beq.w	8006872 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f003 0320 	and.w	r3, r3, #32
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00c      	beq.n	8006770 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006774:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006780:	2b40      	cmp	r3, #64	; 0x40
 8006782:	d004      	beq.n	800678e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800678a:	2b00      	cmp	r3, #0
 800678c:	d031      	beq.n	80067f2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fb70 	bl	8006e74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d123      	bne.n	80067ea <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d013      	beq.n	80067e2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067be:	4a30      	ldr	r2, [pc, #192]	; (8006880 <HAL_UART_IRQHandler+0x288>)
 80067c0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fd f9a1 	bl	8003b0e <HAL_DMA_Abort_IT>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d016      	beq.n	8006800 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80067dc:	4610      	mov	r0, r2
 80067de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e0:	e00e      	b.n	8006800 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f858 	bl	8006898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e8:	e00a      	b.n	8006800 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f854 	bl	8006898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f0:	e006      	b.n	8006800 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f850 	bl	8006898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80067fe:	e038      	b.n	8006872 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006800:	bf00      	nop
    return;
 8006802:	e036      	b.n	8006872 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00d      	beq.n	800682a <HAL_UART_IRQHandler+0x232>
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d008      	beq.n	800682a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006820:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fb75 	bl	8006f12 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006828:	e026      	b.n	8006878 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00d      	beq.n	8006850 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006842:	2b00      	cmp	r3, #0
 8006844:	d017      	beq.n	8006876 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	4798      	blx	r3
    }
    return;
 800684e:	e012      	b.n	8006876 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00e      	beq.n	8006878 <HAL_UART_IRQHandler+0x280>
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006860:	2b00      	cmp	r3, #0
 8006862:	d009      	beq.n	8006878 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fb3b 	bl	8006ee0 <UART_EndTransmit_IT>
    return;
 800686a:	bf00      	nop
 800686c:	e004      	b.n	8006878 <HAL_UART_IRQHandler+0x280>
      return;
 800686e:	bf00      	nop
 8006870:	e002      	b.n	8006878 <HAL_UART_IRQHandler+0x280>
    return;
 8006872:	bf00      	nop
 8006874:	e000      	b.n	8006878 <HAL_UART_IRQHandler+0x280>
    return;
 8006876:	bf00      	nop
  }

}
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	08006eb5 	.word	0x08006eb5

08006884 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4ba2      	ldr	r3, [pc, #648]	; (8006b64 <UART_SetConfig+0x2b8>)
 80068dc:	4013      	ands	r3, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	6939      	ldr	r1, [r7, #16]
 80068e4:	430b      	orrs	r3, r1
 80068e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4313      	orrs	r3, r2
 800690c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	430a      	orrs	r2, r1
 8006920:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a90      	ldr	r2, [pc, #576]	; (8006b68 <UART_SetConfig+0x2bc>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d121      	bne.n	8006970 <UART_SetConfig+0xc4>
 800692c:	4b8f      	ldr	r3, [pc, #572]	; (8006b6c <UART_SetConfig+0x2c0>)
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	f003 0303 	and.w	r3, r3, #3
 8006934:	2b03      	cmp	r3, #3
 8006936:	d817      	bhi.n	8006968 <UART_SetConfig+0xbc>
 8006938:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <UART_SetConfig+0x94>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	08006951 	.word	0x08006951
 8006944:	0800695d 	.word	0x0800695d
 8006948:	08006963 	.word	0x08006963
 800694c:	08006957 	.word	0x08006957
 8006950:	2300      	movs	r3, #0
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e01e      	b.n	8006994 <UART_SetConfig+0xe8>
 8006956:	2302      	movs	r3, #2
 8006958:	77fb      	strb	r3, [r7, #31]
 800695a:	e01b      	b.n	8006994 <UART_SetConfig+0xe8>
 800695c:	2304      	movs	r3, #4
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	e018      	b.n	8006994 <UART_SetConfig+0xe8>
 8006962:	2308      	movs	r3, #8
 8006964:	77fb      	strb	r3, [r7, #31]
 8006966:	e015      	b.n	8006994 <UART_SetConfig+0xe8>
 8006968:	2310      	movs	r3, #16
 800696a:	77fb      	strb	r3, [r7, #31]
 800696c:	bf00      	nop
 800696e:	e011      	b.n	8006994 <UART_SetConfig+0xe8>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a7e      	ldr	r2, [pc, #504]	; (8006b70 <UART_SetConfig+0x2c4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d102      	bne.n	8006980 <UART_SetConfig+0xd4>
 800697a:	2300      	movs	r3, #0
 800697c:	77fb      	strb	r3, [r7, #31]
 800697e:	e009      	b.n	8006994 <UART_SetConfig+0xe8>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a7b      	ldr	r2, [pc, #492]	; (8006b74 <UART_SetConfig+0x2c8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d102      	bne.n	8006990 <UART_SetConfig+0xe4>
 800698a:	2300      	movs	r3, #0
 800698c:	77fb      	strb	r3, [r7, #31]
 800698e:	e001      	b.n	8006994 <UART_SetConfig+0xe8>
 8006990:	2310      	movs	r3, #16
 8006992:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800699c:	f040 8082 	bne.w	8006aa4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80069a0:	7ffb      	ldrb	r3, [r7, #31]
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d85e      	bhi.n	8006a64 <UART_SetConfig+0x1b8>
 80069a6:	a201      	add	r2, pc, #4	; (adr r2, 80069ac <UART_SetConfig+0x100>)
 80069a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ac:	080069d1 	.word	0x080069d1
 80069b0:	080069f1 	.word	0x080069f1
 80069b4:	08006a11 	.word	0x08006a11
 80069b8:	08006a65 	.word	0x08006a65
 80069bc:	08006a2d 	.word	0x08006a2d
 80069c0:	08006a65 	.word	0x08006a65
 80069c4:	08006a65 	.word	0x08006a65
 80069c8:	08006a65 	.word	0x08006a65
 80069cc:	08006a4d 	.word	0x08006a4d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069d0:	f7fe fc24 	bl	800521c <HAL_RCC_GetPCLK1Freq>
 80069d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	005a      	lsls	r2, r3, #1
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	441a      	add	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	61bb      	str	r3, [r7, #24]
        break;
 80069ee:	e03c      	b.n	8006a6a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069f0:	f7fe fc36 	bl	8005260 <HAL_RCC_GetPCLK2Freq>
 80069f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	005a      	lsls	r2, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	085b      	lsrs	r3, r3, #1
 8006a00:	441a      	add	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	61bb      	str	r3, [r7, #24]
        break;
 8006a0e:	e02c      	b.n	8006a6a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	085b      	lsrs	r3, r3, #1
 8006a16:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006a1a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6852      	ldr	r2, [r2, #4]
 8006a22:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	61bb      	str	r3, [r7, #24]
        break;
 8006a2a:	e01e      	b.n	8006a6a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a2c:	f7fe fb7e 	bl	800512c <HAL_RCC_GetSysClockFreq>
 8006a30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	005a      	lsls	r2, r3, #1
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	085b      	lsrs	r3, r3, #1
 8006a3c:	441a      	add	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	61bb      	str	r3, [r7, #24]
        break;
 8006a4a:	e00e      	b.n	8006a6a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	085b      	lsrs	r3, r3, #1
 8006a52:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	61bb      	str	r3, [r7, #24]
        break;
 8006a62:	e002      	b.n	8006a6a <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	75fb      	strb	r3, [r7, #23]
        break;
 8006a68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b0f      	cmp	r3, #15
 8006a6e:	d916      	bls.n	8006a9e <UART_SetConfig+0x1f2>
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a76:	d212      	bcs.n	8006a9e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f023 030f 	bic.w	r3, r3, #15
 8006a80:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	085b      	lsrs	r3, r3, #1
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f003 0307 	and.w	r3, r3, #7
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	897b      	ldrh	r3, [r7, #10]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	897a      	ldrh	r2, [r7, #10]
 8006a9a:	60da      	str	r2, [r3, #12]
 8006a9c:	e07d      	b.n	8006b9a <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	75fb      	strb	r3, [r7, #23]
 8006aa2:	e07a      	b.n	8006b9a <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8006aa4:	7ffb      	ldrb	r3, [r7, #31]
 8006aa6:	2b08      	cmp	r3, #8
 8006aa8:	d866      	bhi.n	8006b78 <UART_SetConfig+0x2cc>
 8006aaa:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <UART_SetConfig+0x204>)
 8006aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab0:	08006ad5 	.word	0x08006ad5
 8006ab4:	08006af3 	.word	0x08006af3
 8006ab8:	08006b11 	.word	0x08006b11
 8006abc:	08006b79 	.word	0x08006b79
 8006ac0:	08006b2d 	.word	0x08006b2d
 8006ac4:	08006b79 	.word	0x08006b79
 8006ac8:	08006b79 	.word	0x08006b79
 8006acc:	08006b79 	.word	0x08006b79
 8006ad0:	08006b4b 	.word	0x08006b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad4:	f7fe fba2 	bl	800521c <HAL_RCC_GetPCLK1Freq>
 8006ad8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	085a      	lsrs	r2, r3, #1
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	441a      	add	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	61bb      	str	r3, [r7, #24]
        break;
 8006af0:	e045      	b.n	8006b7e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006af2:	f7fe fbb5 	bl	8005260 <HAL_RCC_GetPCLK2Freq>
 8006af6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	085a      	lsrs	r2, r3, #1
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	441a      	add	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	61bb      	str	r3, [r7, #24]
        break;
 8006b0e:	e036      	b.n	8006b7e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	085b      	lsrs	r3, r3, #1
 8006b16:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8006b1a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6852      	ldr	r2, [r2, #4]
 8006b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	61bb      	str	r3, [r7, #24]
        break;
 8006b2a:	e028      	b.n	8006b7e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b2c:	f7fe fafe 	bl	800512c <HAL_RCC_GetSysClockFreq>
 8006b30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	085a      	lsrs	r2, r3, #1
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	441a      	add	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	61bb      	str	r3, [r7, #24]
        break;
 8006b48:	e019      	b.n	8006b7e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	085b      	lsrs	r3, r3, #1
 8006b50:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	61bb      	str	r3, [r7, #24]
        break;
 8006b60:	e00d      	b.n	8006b7e <UART_SetConfig+0x2d2>
 8006b62:	bf00      	nop
 8006b64:	efff69f3 	.word	0xefff69f3
 8006b68:	40013800 	.word	0x40013800
 8006b6c:	40021000 	.word	0x40021000
 8006b70:	40004400 	.word	0x40004400
 8006b74:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	75fb      	strb	r3, [r7, #23]
        break;
 8006b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	2b0f      	cmp	r3, #15
 8006b82:	d908      	bls.n	8006b96 <UART_SetConfig+0x2ea>
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b8a:	d204      	bcs.n	8006b96 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	60da      	str	r2, [r3, #12]
 8006b94:	e001      	b.n	8006b9a <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3720      	adds	r7, #32
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00a      	beq.n	8006bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00a      	beq.n	8006c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	f003 0308 	and.w	r3, r3, #8
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	f003 0310 	and.w	r3, r3, #16
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00a      	beq.n	8006c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	f003 0320 	and.w	r3, r3, #32
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01a      	beq.n	8006cc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cae:	d10a      	bne.n	8006cc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	605a      	str	r2, [r3, #4]
  }
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af02      	add	r7, sp, #8
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d02:	f7fa ff75 	bl	8001bf0 <HAL_GetTick>
 8006d06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d10e      	bne.n	8006d34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f82a 	bl	8006d7e <UART_WaitOnFlagUntilTimeout>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e020      	b.n	8006d76 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d10e      	bne.n	8006d60 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f814 	bl	8006d7e <UART_WaitOnFlagUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e00a      	b.n	8006d76 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2220      	movs	r2, #32
 8006d64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	603b      	str	r3, [r7, #0]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d8e:	e05d      	b.n	8006e4c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d96:	d059      	beq.n	8006e4c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d98:	f7fa ff2a 	bl	8001bf0 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d302      	bcc.n	8006dae <UART_WaitOnFlagUntilTimeout+0x30>
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d11b      	bne.n	8006de6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006dbc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0201 	bic.w	r2, r2, #1
 8006dcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e042      	b.n	8006e6c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d02b      	beq.n	8006e4c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e02:	d123      	bne.n	8006e4c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e0c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e1c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0201 	bic.w	r2, r2, #1
 8006e2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2220      	movs	r2, #32
 8006e32:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2220      	movs	r2, #32
 8006e38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e00f      	b.n	8006e6c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69da      	ldr	r2, [r3, #28]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	4013      	ands	r3, r2
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	bf0c      	ite	eq
 8006e5c:	2301      	moveq	r3, #1
 8006e5e:	2300      	movne	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	79fb      	ldrb	r3, [r7, #7]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d092      	beq.n	8006d90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e8a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689a      	ldr	r2, [r3, #8]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0201 	bic.w	r2, r2, #1
 8006e9a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f7ff fce0 	bl	8006898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ed8:	bf00      	nop
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ef6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2220      	movs	r2, #32
 8006efc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff fcbd 	bl	8006884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f0a:	bf00      	nop
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f38:	2b84      	cmp	r3, #132	; 0x84
 8006f3a:	d005      	beq.n	8006f48 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006f3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	3303      	adds	r3, #3
 8006f46:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006f48:	68fb      	ldr	r3, [r7, #12]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006f5a:	f000 fad1 	bl	8007500 <vTaskStartScheduler>
  
  return osOK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f66:	b089      	sub	sp, #36	; 0x24
 8006f68:	af04      	add	r7, sp, #16
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d020      	beq.n	8006fb8 <osThreadCreate+0x54>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d01c      	beq.n	8006fb8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685c      	ldr	r4, [r3, #4]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681d      	ldr	r5, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691e      	ldr	r6, [r3, #16]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff ffc8 	bl	8006f26 <makeFreeRtosPriority>
 8006f96:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fa0:	9202      	str	r2, [sp, #8]
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	9100      	str	r1, [sp, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	4632      	mov	r2, r6
 8006faa:	4629      	mov	r1, r5
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 f8ed 	bl	800718c <xTaskCreateStatic>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	e01c      	b.n	8006ff2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685c      	ldr	r4, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fc4:	b29e      	uxth	r6, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7ff ffaa 	bl	8006f26 <makeFreeRtosPriority>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	f107 030c 	add.w	r3, r7, #12
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	9200      	str	r2, [sp, #0]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	4632      	mov	r2, r6
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f000 f92b 	bl	800723e <xTaskCreate>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d001      	beq.n	8006ff2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e000      	b.n	8006ff4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ffc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <osDelay+0x16>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	e000      	b.n	8007014 <osDelay+0x18>
 8007012:	2301      	movs	r3, #1
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fa3f 	bl	8007498 <vTaskDelay>
  
  return osOK;
 800701a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f103 0208 	add.w	r2, r3, #8
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f04f 32ff 	mov.w	r2, #4294967295
 800703c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f103 0208 	add.w	r2, r3, #8
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f103 0208 	add.w	r2, r3, #8
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800707e:	b480      	push	{r7}
 8007080:	b085      	sub	sp, #20
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	601a      	str	r2, [r3, #0]
}
 80070ba:	bf00      	nop
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070c6:	b480      	push	{r7}
 80070c8:	b085      	sub	sp, #20
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070dc:	d103      	bne.n	80070e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	e00c      	b.n	8007100 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3308      	adds	r3, #8
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	e002      	b.n	80070f4 <vListInsert+0x2e>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d2f6      	bcs.n	80070ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	1c5a      	adds	r2, r3, #1
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	601a      	str	r2, [r3, #0]
}
 800712c:	bf00      	nop
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6892      	ldr	r2, [r2, #8]
 800714e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6852      	ldr	r2, [r2, #4]
 8007158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	429a      	cmp	r2, r3
 8007162:	d103      	bne.n	800716c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	1e5a      	subs	r2, r3, #1
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08e      	sub	sp, #56	; 0x38
 8007190:	af04      	add	r7, sp, #16
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	2b00      	cmp	r3, #0
 800719e:	d109      	bne.n	80071b4 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	623b      	str	r3, [r7, #32]
 80071b2:	e7fe      	b.n	80071b2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80071b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d109      	bne.n	80071ce <xTaskCreateStatic+0x42>
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	e7fe      	b.n	80071cc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071ce:	2354      	movs	r3, #84	; 0x54
 80071d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	2b54      	cmp	r3, #84	; 0x54
 80071d6:	d009      	beq.n	80071ec <xTaskCreateStatic+0x60>
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	e7fe      	b.n	80071ea <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d01e      	beq.n	8007230 <xTaskCreateStatic+0xa4>
 80071f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01b      	beq.n	8007230 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007200:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	2202      	movs	r2, #2
 8007206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800720a:	2300      	movs	r3, #0
 800720c:	9303      	str	r3, [sp, #12]
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	9302      	str	r3, [sp, #8]
 8007212:	f107 0314 	add.w	r3, r7, #20
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	68b9      	ldr	r1, [r7, #8]
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 f850 	bl	80072c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800722a:	f000 f8cb 	bl	80073c4 <prvAddNewTaskToReadyList>
 800722e:	e001      	b.n	8007234 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007230:	2300      	movs	r3, #0
 8007232:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007234:	697b      	ldr	r3, [r7, #20]
	}
 8007236:	4618      	mov	r0, r3
 8007238:	3728      	adds	r7, #40	; 0x28
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800723e:	b580      	push	{r7, lr}
 8007240:	b08c      	sub	sp, #48	; 0x30
 8007242:	af04      	add	r7, sp, #16
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	603b      	str	r3, [r7, #0]
 800724a:	4613      	mov	r3, r2
 800724c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4618      	mov	r0, r3
 8007254:	f000 feb6 	bl	8007fc4 <pvPortMalloc>
 8007258:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00e      	beq.n	800727e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007260:	2054      	movs	r0, #84	; 0x54
 8007262:	f000 feaf 	bl	8007fc4 <pvPortMalloc>
 8007266:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	631a      	str	r2, [r3, #48]	; 0x30
 8007274:	e005      	b.n	8007282 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007276:	6978      	ldr	r0, [r7, #20]
 8007278:	f000 ff66 	bl	8008148 <vPortFree>
 800727c:	e001      	b.n	8007282 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800727e:	2300      	movs	r3, #0
 8007280:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d017      	beq.n	80072b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007290:	88fa      	ldrh	r2, [r7, #6]
 8007292:	2300      	movs	r3, #0
 8007294:	9303      	str	r3, [sp, #12]
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	9302      	str	r3, [sp, #8]
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 f80e 	bl	80072c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072ac:	69f8      	ldr	r0, [r7, #28]
 80072ae:	f000 f889 	bl	80073c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072b2:	2301      	movs	r3, #1
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e002      	b.n	80072be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072b8:	f04f 33ff 	mov.w	r3, #4294967295
 80072bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072be:	69bb      	ldr	r3, [r7, #24]
	}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3720      	adds	r7, #32
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072e0:	3b01      	subs	r3, #1
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	f023 0307 	bic.w	r3, r3, #7
 80072ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <prvInitialiseNewTask+0x46>
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	e7fe      	b.n	800730c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800730e:	2300      	movs	r3, #0
 8007310:	61fb      	str	r3, [r7, #28]
 8007312:	e012      	b.n	800733a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	4413      	add	r3, r2
 800731a:	7819      	ldrb	r1, [r3, #0]
 800731c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	4413      	add	r3, r2
 8007322:	3334      	adds	r3, #52	; 0x34
 8007324:	460a      	mov	r2, r1
 8007326:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4413      	add	r3, r2
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d006      	beq.n	8007342 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	3301      	adds	r3, #1
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	2b0f      	cmp	r3, #15
 800733e:	d9e9      	bls.n	8007314 <prvInitialiseNewTask+0x4c>
 8007340:	e000      	b.n	8007344 <prvInitialiseNewTask+0x7c>
		{
			break;
 8007342:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	2b06      	cmp	r3, #6
 8007350:	d901      	bls.n	8007356 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007352:	2306      	movs	r3, #6
 8007354:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800735a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007360:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	2200      	movs	r2, #0
 8007366:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	3304      	adds	r3, #4
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff fe79 	bl	8007064 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	3318      	adds	r3, #24
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff fe74 	bl	8007064 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007380:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	f1c3 0207 	rsb	r2, r3, #7
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007390:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	2200      	movs	r2, #0
 8007396:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	68f9      	ldr	r1, [r7, #12]
 80073a4:	69b8      	ldr	r0, [r7, #24]
 80073a6:	f000 fc07 	bl	8007bb8 <pxPortInitialiseStack>
 80073aa:	4602      	mov	r2, r0
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80073b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073bc:	bf00      	nop
 80073be:	3720      	adds	r7, #32
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073cc:	f000 fd1e 	bl	8007e0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073d0:	4b2a      	ldr	r3, [pc, #168]	; (800747c <prvAddNewTaskToReadyList+0xb8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3301      	adds	r3, #1
 80073d6:	4a29      	ldr	r2, [pc, #164]	; (800747c <prvAddNewTaskToReadyList+0xb8>)
 80073d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073da:	4b29      	ldr	r3, [pc, #164]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d109      	bne.n	80073f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073e2:	4a27      	ldr	r2, [pc, #156]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073e8:	4b24      	ldr	r3, [pc, #144]	; (800747c <prvAddNewTaskToReadyList+0xb8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d110      	bne.n	8007412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073f0:	f000 fabc 	bl	800796c <prvInitialiseTaskLists>
 80073f4:	e00d      	b.n	8007412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073f6:	4b23      	ldr	r3, [pc, #140]	; (8007484 <prvAddNewTaskToReadyList+0xc0>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d109      	bne.n	8007412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073fe:	4b20      	ldr	r3, [pc, #128]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	429a      	cmp	r2, r3
 800740a:	d802      	bhi.n	8007412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800740c:	4a1c      	ldr	r2, [pc, #112]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007412:	4b1d      	ldr	r3, [pc, #116]	; (8007488 <prvAddNewTaskToReadyList+0xc4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3301      	adds	r3, #1
 8007418:	4a1b      	ldr	r2, [pc, #108]	; (8007488 <prvAddNewTaskToReadyList+0xc4>)
 800741a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007420:	2201      	movs	r2, #1
 8007422:	409a      	lsls	r2, r3
 8007424:	4b19      	ldr	r3, [pc, #100]	; (800748c <prvAddNewTaskToReadyList+0xc8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4313      	orrs	r3, r2
 800742a:	4a18      	ldr	r2, [pc, #96]	; (800748c <prvAddNewTaskToReadyList+0xc8>)
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4a15      	ldr	r2, [pc, #84]	; (8007490 <prvAddNewTaskToReadyList+0xcc>)
 800743c:	441a      	add	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3304      	adds	r3, #4
 8007442:	4619      	mov	r1, r3
 8007444:	4610      	mov	r0, r2
 8007446:	f7ff fe1a 	bl	800707e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800744a:	f000 fd0d 	bl	8007e68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800744e:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <prvAddNewTaskToReadyList+0xc0>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00e      	beq.n	8007474 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007456:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <prvAddNewTaskToReadyList+0xbc>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	429a      	cmp	r2, r3
 8007462:	d207      	bcs.n	8007474 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007464:	4b0b      	ldr	r3, [pc, #44]	; (8007494 <prvAddNewTaskToReadyList+0xd0>)
 8007466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	20000388 	.word	0x20000388
 8007480:	20000288 	.word	0x20000288
 8007484:	20000394 	.word	0x20000394
 8007488:	200003a4 	.word	0x200003a4
 800748c:	20000390 	.word	0x20000390
 8007490:	2000028c 	.word	0x2000028c
 8007494:	e000ed04 	.word	0xe000ed04

08007498 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074a0:	2300      	movs	r3, #0
 80074a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d016      	beq.n	80074d8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074aa:	4b13      	ldr	r3, [pc, #76]	; (80074f8 <vTaskDelay+0x60>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <vTaskDelay+0x2e>
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	60bb      	str	r3, [r7, #8]
 80074c4:	e7fe      	b.n	80074c4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80074c6:	f000 f879 	bl	80075bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074ca:	2100      	movs	r1, #0
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fb0d 	bl	8007aec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074d2:	f000 f881 	bl	80075d8 <xTaskResumeAll>
 80074d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d107      	bne.n	80074ee <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80074de:	4b07      	ldr	r3, [pc, #28]	; (80074fc <vTaskDelay+0x64>)
 80074e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074ee:	bf00      	nop
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	200003b0 	.word	0x200003b0
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08a      	sub	sp, #40	; 0x28
 8007504:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007506:	2300      	movs	r3, #0
 8007508:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800750a:	2300      	movs	r3, #0
 800750c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800750e:	463a      	mov	r2, r7
 8007510:	1d39      	adds	r1, r7, #4
 8007512:	f107 0308 	add.w	r3, r7, #8
 8007516:	4618      	mov	r0, r3
 8007518:	f7f9 fd52 	bl	8000fc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	9202      	str	r2, [sp, #8]
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	2300      	movs	r3, #0
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	2300      	movs	r3, #0
 800752c:	460a      	mov	r2, r1
 800752e:	491d      	ldr	r1, [pc, #116]	; (80075a4 <vTaskStartScheduler+0xa4>)
 8007530:	481d      	ldr	r0, [pc, #116]	; (80075a8 <vTaskStartScheduler+0xa8>)
 8007532:	f7ff fe2b 	bl	800718c <xTaskCreateStatic>
 8007536:	4602      	mov	r2, r0
 8007538:	4b1c      	ldr	r3, [pc, #112]	; (80075ac <vTaskStartScheduler+0xac>)
 800753a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800753c:	4b1b      	ldr	r3, [pc, #108]	; (80075ac <vTaskStartScheduler+0xac>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007544:	2301      	movs	r3, #1
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	e001      	b.n	800754e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800754a:	2300      	movs	r3, #0
 800754c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d115      	bne.n	8007580 <vTaskStartScheduler+0x80>
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007566:	4b12      	ldr	r3, [pc, #72]	; (80075b0 <vTaskStartScheduler+0xb0>)
 8007568:	f04f 32ff 	mov.w	r2, #4294967295
 800756c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800756e:	4b11      	ldr	r3, [pc, #68]	; (80075b4 <vTaskStartScheduler+0xb4>)
 8007570:	2201      	movs	r2, #1
 8007572:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007574:	4b10      	ldr	r3, [pc, #64]	; (80075b8 <vTaskStartScheduler+0xb8>)
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800757a:	f000 fba9 	bl	8007cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800757e:	e00d      	b.n	800759c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007586:	d109      	bne.n	800759c <vTaskStartScheduler+0x9c>
 8007588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	e7fe      	b.n	800759a <vTaskStartScheduler+0x9a>
}
 800759c:	bf00      	nop
 800759e:	3718      	adds	r7, #24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	08008f24 	.word	0x08008f24
 80075a8:	0800793d 	.word	0x0800793d
 80075ac:	200003ac 	.word	0x200003ac
 80075b0:	200003a8 	.word	0x200003a8
 80075b4:	20000394 	.word	0x20000394
 80075b8:	2000038c 	.word	0x2000038c

080075bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <vTaskSuspendAll+0x18>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3301      	adds	r3, #1
 80075c6:	4a03      	ldr	r2, [pc, #12]	; (80075d4 <vTaskSuspendAll+0x18>)
 80075c8:	6013      	str	r3, [r2, #0]
}
 80075ca:	bf00      	nop
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	200003b0 	.word	0x200003b0

080075d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075e6:	4b41      	ldr	r3, [pc, #260]	; (80076ec <xTaskResumeAll+0x114>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d109      	bne.n	8007602 <xTaskResumeAll+0x2a>
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	603b      	str	r3, [r7, #0]
 8007600:	e7fe      	b.n	8007600 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007602:	f000 fc03 	bl	8007e0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007606:	4b39      	ldr	r3, [pc, #228]	; (80076ec <xTaskResumeAll+0x114>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3b01      	subs	r3, #1
 800760c:	4a37      	ldr	r2, [pc, #220]	; (80076ec <xTaskResumeAll+0x114>)
 800760e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007610:	4b36      	ldr	r3, [pc, #216]	; (80076ec <xTaskResumeAll+0x114>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d161      	bne.n	80076dc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007618:	4b35      	ldr	r3, [pc, #212]	; (80076f0 <xTaskResumeAll+0x118>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d05d      	beq.n	80076dc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007620:	e02e      	b.n	8007680 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007622:	4b34      	ldr	r3, [pc, #208]	; (80076f4 <xTaskResumeAll+0x11c>)
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3318      	adds	r3, #24
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff fd82 	bl	8007138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3304      	adds	r3, #4
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fd7d 	bl	8007138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007642:	2201      	movs	r2, #1
 8007644:	409a      	lsls	r2, r3
 8007646:	4b2c      	ldr	r3, [pc, #176]	; (80076f8 <xTaskResumeAll+0x120>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4313      	orrs	r3, r2
 800764c:	4a2a      	ldr	r2, [pc, #168]	; (80076f8 <xTaskResumeAll+0x120>)
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007654:	4613      	mov	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4a27      	ldr	r2, [pc, #156]	; (80076fc <xTaskResumeAll+0x124>)
 800765e:	441a      	add	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3304      	adds	r3, #4
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f7ff fd09 	bl	800707e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007670:	4b23      	ldr	r3, [pc, #140]	; (8007700 <xTaskResumeAll+0x128>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007676:	429a      	cmp	r2, r3
 8007678:	d302      	bcc.n	8007680 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800767a:	4b22      	ldr	r3, [pc, #136]	; (8007704 <xTaskResumeAll+0x12c>)
 800767c:	2201      	movs	r2, #1
 800767e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007680:	4b1c      	ldr	r3, [pc, #112]	; (80076f4 <xTaskResumeAll+0x11c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1cc      	bne.n	8007622 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800768e:	f000 fa07 	bl	8007aa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007692:	4b1d      	ldr	r3, [pc, #116]	; (8007708 <xTaskResumeAll+0x130>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d010      	beq.n	80076c0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800769e:	f000 f837 	bl	8007710 <xTaskIncrementTick>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80076a8:	4b16      	ldr	r3, [pc, #88]	; (8007704 <xTaskResumeAll+0x12c>)
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1f1      	bne.n	800769e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80076ba:	4b13      	ldr	r3, [pc, #76]	; (8007708 <xTaskResumeAll+0x130>)
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076c0:	4b10      	ldr	r3, [pc, #64]	; (8007704 <xTaskResumeAll+0x12c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d009      	beq.n	80076dc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076c8:	2301      	movs	r3, #1
 80076ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076cc:	4b0f      	ldr	r3, [pc, #60]	; (800770c <xTaskResumeAll+0x134>)
 80076ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076dc:	f000 fbc4 	bl	8007e68 <vPortExitCritical>

	return xAlreadyYielded;
 80076e0:	68bb      	ldr	r3, [r7, #8]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	200003b0 	.word	0x200003b0
 80076f0:	20000388 	.word	0x20000388
 80076f4:	20000348 	.word	0x20000348
 80076f8:	20000390 	.word	0x20000390
 80076fc:	2000028c 	.word	0x2000028c
 8007700:	20000288 	.word	0x20000288
 8007704:	2000039c 	.word	0x2000039c
 8007708:	20000398 	.word	0x20000398
 800770c:	e000ed04 	.word	0xe000ed04

08007710 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800771a:	4b50      	ldr	r3, [pc, #320]	; (800785c <xTaskIncrementTick+0x14c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	f040 808c 	bne.w	800783c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007724:	4b4e      	ldr	r3, [pc, #312]	; (8007860 <xTaskIncrementTick+0x150>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3301      	adds	r3, #1
 800772a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800772c:	4a4c      	ldr	r2, [pc, #304]	; (8007860 <xTaskIncrementTick+0x150>)
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d11f      	bne.n	8007778 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007738:	4b4a      	ldr	r3, [pc, #296]	; (8007864 <xTaskIncrementTick+0x154>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d009      	beq.n	8007756 <xTaskIncrementTick+0x46>
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	e7fe      	b.n	8007754 <xTaskIncrementTick+0x44>
 8007756:	4b43      	ldr	r3, [pc, #268]	; (8007864 <xTaskIncrementTick+0x154>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	4b42      	ldr	r3, [pc, #264]	; (8007868 <xTaskIncrementTick+0x158>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a40      	ldr	r2, [pc, #256]	; (8007864 <xTaskIncrementTick+0x154>)
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	4a40      	ldr	r2, [pc, #256]	; (8007868 <xTaskIncrementTick+0x158>)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	4b40      	ldr	r3, [pc, #256]	; (800786c <xTaskIncrementTick+0x15c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3301      	adds	r3, #1
 8007770:	4a3e      	ldr	r2, [pc, #248]	; (800786c <xTaskIncrementTick+0x15c>)
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	f000 f994 	bl	8007aa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007778:	4b3d      	ldr	r3, [pc, #244]	; (8007870 <xTaskIncrementTick+0x160>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	429a      	cmp	r2, r3
 8007780:	d34d      	bcc.n	800781e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007782:	4b38      	ldr	r3, [pc, #224]	; (8007864 <xTaskIncrementTick+0x154>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <xTaskIncrementTick+0x80>
 800778c:	2301      	movs	r3, #1
 800778e:	e000      	b.n	8007792 <xTaskIncrementTick+0x82>
 8007790:	2300      	movs	r3, #0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d004      	beq.n	80077a0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007796:	4b36      	ldr	r3, [pc, #216]	; (8007870 <xTaskIncrementTick+0x160>)
 8007798:	f04f 32ff 	mov.w	r2, #4294967295
 800779c:	601a      	str	r2, [r3, #0]
					break;
 800779e:	e03e      	b.n	800781e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80077a0:	4b30      	ldr	r3, [pc, #192]	; (8007864 <xTaskIncrementTick+0x154>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d203      	bcs.n	80077c0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077b8:	4a2d      	ldr	r2, [pc, #180]	; (8007870 <xTaskIncrementTick+0x160>)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6013      	str	r3, [r2, #0]
						break;
 80077be:	e02e      	b.n	800781e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7ff fcb7 	bl	8007138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d004      	beq.n	80077dc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	3318      	adds	r3, #24
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7ff fcae 	bl	8007138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	2201      	movs	r2, #1
 80077e2:	409a      	lsls	r2, r3
 80077e4:	4b23      	ldr	r3, [pc, #140]	; (8007874 <xTaskIncrementTick+0x164>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	4a22      	ldr	r2, [pc, #136]	; (8007874 <xTaskIncrementTick+0x164>)
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4a1f      	ldr	r2, [pc, #124]	; (8007878 <xTaskIncrementTick+0x168>)
 80077fc:	441a      	add	r2, r3
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	3304      	adds	r3, #4
 8007802:	4619      	mov	r1, r3
 8007804:	4610      	mov	r0, r2
 8007806:	f7ff fc3a 	bl	800707e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780e:	4b1b      	ldr	r3, [pc, #108]	; (800787c <xTaskIncrementTick+0x16c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	429a      	cmp	r2, r3
 8007816:	d3b4      	bcc.n	8007782 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007818:	2301      	movs	r3, #1
 800781a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800781c:	e7b1      	b.n	8007782 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800781e:	4b17      	ldr	r3, [pc, #92]	; (800787c <xTaskIncrementTick+0x16c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007824:	4914      	ldr	r1, [pc, #80]	; (8007878 <xTaskIncrementTick+0x168>)
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	440b      	add	r3, r1
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d907      	bls.n	8007846 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007836:	2301      	movs	r3, #1
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	e004      	b.n	8007846 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800783c:	4b10      	ldr	r3, [pc, #64]	; (8007880 <xTaskIncrementTick+0x170>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3301      	adds	r3, #1
 8007842:	4a0f      	ldr	r2, [pc, #60]	; (8007880 <xTaskIncrementTick+0x170>)
 8007844:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007846:	4b0f      	ldr	r3, [pc, #60]	; (8007884 <xTaskIncrementTick+0x174>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800784e:	2301      	movs	r3, #1
 8007850:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007852:	697b      	ldr	r3, [r7, #20]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	200003b0 	.word	0x200003b0
 8007860:	2000038c 	.word	0x2000038c
 8007864:	20000340 	.word	0x20000340
 8007868:	20000344 	.word	0x20000344
 800786c:	200003a0 	.word	0x200003a0
 8007870:	200003a8 	.word	0x200003a8
 8007874:	20000390 	.word	0x20000390
 8007878:	2000028c 	.word	0x2000028c
 800787c:	20000288 	.word	0x20000288
 8007880:	20000398 	.word	0x20000398
 8007884:	2000039c 	.word	0x2000039c

08007888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800788e:	4b26      	ldr	r3, [pc, #152]	; (8007928 <vTaskSwitchContext+0xa0>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007896:	4b25      	ldr	r3, [pc, #148]	; (800792c <vTaskSwitchContext+0xa4>)
 8007898:	2201      	movs	r2, #1
 800789a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800789c:	e03e      	b.n	800791c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800789e:	4b23      	ldr	r3, [pc, #140]	; (800792c <vTaskSwitchContext+0xa4>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80078a4:	4b22      	ldr	r3, [pc, #136]	; (8007930 <vTaskSwitchContext+0xa8>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	fab3 f383 	clz	r3, r3
 80078b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80078b2:	7afb      	ldrb	r3, [r7, #11]
 80078b4:	f1c3 031f 	rsb	r3, r3, #31
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	491e      	ldr	r1, [pc, #120]	; (8007934 <vTaskSwitchContext+0xac>)
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	4613      	mov	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	440b      	add	r3, r1
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d109      	bne.n	80078e2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	607b      	str	r3, [r7, #4]
 80078e0:	e7fe      	b.n	80078e0 <vTaskSwitchContext+0x58>
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4613      	mov	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4a11      	ldr	r2, [pc, #68]	; (8007934 <vTaskSwitchContext+0xac>)
 80078ee:	4413      	add	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	605a      	str	r2, [r3, #4]
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	3308      	adds	r3, #8
 8007904:	429a      	cmp	r2, r3
 8007906:	d104      	bne.n	8007912 <vTaskSwitchContext+0x8a>
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	605a      	str	r2, [r3, #4]
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	4a07      	ldr	r2, [pc, #28]	; (8007938 <vTaskSwitchContext+0xb0>)
 800791a:	6013      	str	r3, [r2, #0]
}
 800791c:	bf00      	nop
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	200003b0 	.word	0x200003b0
 800792c:	2000039c 	.word	0x2000039c
 8007930:	20000390 	.word	0x20000390
 8007934:	2000028c 	.word	0x2000028c
 8007938:	20000288 	.word	0x20000288

0800793c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007944:	f000 f852 	bl	80079ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007948:	4b06      	ldr	r3, [pc, #24]	; (8007964 <prvIdleTask+0x28>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d9f9      	bls.n	8007944 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <prvIdleTask+0x2c>)
 8007952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007960:	e7f0      	b.n	8007944 <prvIdleTask+0x8>
 8007962:	bf00      	nop
 8007964:	2000028c 	.word	0x2000028c
 8007968:	e000ed04 	.word	0xe000ed04

0800796c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007972:	2300      	movs	r3, #0
 8007974:	607b      	str	r3, [r7, #4]
 8007976:	e00c      	b.n	8007992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4a12      	ldr	r2, [pc, #72]	; (80079cc <prvInitialiseTaskLists+0x60>)
 8007984:	4413      	add	r3, r2
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff fb4c 	bl	8007024 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3301      	adds	r3, #1
 8007990:	607b      	str	r3, [r7, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b06      	cmp	r3, #6
 8007996:	d9ef      	bls.n	8007978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007998:	480d      	ldr	r0, [pc, #52]	; (80079d0 <prvInitialiseTaskLists+0x64>)
 800799a:	f7ff fb43 	bl	8007024 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800799e:	480d      	ldr	r0, [pc, #52]	; (80079d4 <prvInitialiseTaskLists+0x68>)
 80079a0:	f7ff fb40 	bl	8007024 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079a4:	480c      	ldr	r0, [pc, #48]	; (80079d8 <prvInitialiseTaskLists+0x6c>)
 80079a6:	f7ff fb3d 	bl	8007024 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079aa:	480c      	ldr	r0, [pc, #48]	; (80079dc <prvInitialiseTaskLists+0x70>)
 80079ac:	f7ff fb3a 	bl	8007024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079b0:	480b      	ldr	r0, [pc, #44]	; (80079e0 <prvInitialiseTaskLists+0x74>)
 80079b2:	f7ff fb37 	bl	8007024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079b6:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <prvInitialiseTaskLists+0x78>)
 80079b8:	4a05      	ldr	r2, [pc, #20]	; (80079d0 <prvInitialiseTaskLists+0x64>)
 80079ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079bc:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <prvInitialiseTaskLists+0x7c>)
 80079be:	4a05      	ldr	r2, [pc, #20]	; (80079d4 <prvInitialiseTaskLists+0x68>)
 80079c0:	601a      	str	r2, [r3, #0]
}
 80079c2:	bf00      	nop
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	2000028c 	.word	0x2000028c
 80079d0:	20000318 	.word	0x20000318
 80079d4:	2000032c 	.word	0x2000032c
 80079d8:	20000348 	.word	0x20000348
 80079dc:	2000035c 	.word	0x2000035c
 80079e0:	20000374 	.word	0x20000374
 80079e4:	20000340 	.word	0x20000340
 80079e8:	20000344 	.word	0x20000344

080079ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079f2:	e019      	b.n	8007a28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079f4:	f000 fa0a 	bl	8007e0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80079f8:	4b0f      	ldr	r3, [pc, #60]	; (8007a38 <prvCheckTasksWaitingTermination+0x4c>)
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3304      	adds	r3, #4
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7ff fb97 	bl	8007138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a0a:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <prvCheckTasksWaitingTermination+0x50>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	4a0a      	ldr	r2, [pc, #40]	; (8007a3c <prvCheckTasksWaitingTermination+0x50>)
 8007a12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a14:	4b0a      	ldr	r3, [pc, #40]	; (8007a40 <prvCheckTasksWaitingTermination+0x54>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	4a09      	ldr	r2, [pc, #36]	; (8007a40 <prvCheckTasksWaitingTermination+0x54>)
 8007a1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a1e:	f000 fa23 	bl	8007e68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f80e 	bl	8007a44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a28:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <prvCheckTasksWaitingTermination+0x54>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1e1      	bne.n	80079f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a30:	bf00      	nop
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	2000035c 	.word	0x2000035c
 8007a3c:	20000388 	.word	0x20000388
 8007a40:	20000370 	.word	0x20000370

08007a44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d108      	bne.n	8007a68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fb74 	bl	8008148 <vPortFree>
				vPortFree( pxTCB );
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fb71 	bl	8008148 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a66:	e017      	b.n	8007a98 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d103      	bne.n	8007a7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fb68 	bl	8008148 <vPortFree>
	}
 8007a78:	e00e      	b.n	8007a98 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d009      	beq.n	8007a98 <prvDeleteTCB+0x54>
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	e7fe      	b.n	8007a96 <prvDeleteTCB+0x52>
	}
 8007a98:	bf00      	nop
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aa6:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <prvResetNextTaskUnblockTime+0x44>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <prvResetNextTaskUnblockTime+0x14>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e000      	b.n	8007ab6 <prvResetNextTaskUnblockTime+0x16>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d004      	beq.n	8007ac4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007aba:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <prvResetNextTaskUnblockTime+0x48>)
 8007abc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ac2:	e008      	b.n	8007ad6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ac4:	4b07      	ldr	r3, [pc, #28]	; (8007ae4 <prvResetNextTaskUnblockTime+0x44>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	4a05      	ldr	r2, [pc, #20]	; (8007ae8 <prvResetNextTaskUnblockTime+0x48>)
 8007ad4:	6013      	str	r3, [r2, #0]
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20000340 	.word	0x20000340
 8007ae8:	200003a8 	.word	0x200003a8

08007aec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007af6:	4b29      	ldr	r3, [pc, #164]	; (8007b9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007afc:	4b28      	ldr	r3, [pc, #160]	; (8007ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3304      	adds	r3, #4
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff fb18 	bl	8007138 <uxListRemove>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10b      	bne.n	8007b26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007b0e:	4b24      	ldr	r3, [pc, #144]	; (8007ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	2201      	movs	r2, #1
 8007b16:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1a:	43da      	mvns	r2, r3
 8007b1c:	4b21      	ldr	r3, [pc, #132]	; (8007ba4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4013      	ands	r3, r2
 8007b22:	4a20      	ldr	r2, [pc, #128]	; (8007ba4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2c:	d10a      	bne.n	8007b44 <prvAddCurrentTaskToDelayedList+0x58>
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d007      	beq.n	8007b44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b34:	4b1a      	ldr	r3, [pc, #104]	; (8007ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	481a      	ldr	r0, [pc, #104]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007b3e:	f7ff fa9e 	bl	800707e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b42:	e026      	b.n	8007b92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4413      	add	r3, r2
 8007b4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b4c:	4b14      	ldr	r3, [pc, #80]	; (8007ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d209      	bcs.n	8007b70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b5c:	4b13      	ldr	r3, [pc, #76]	; (8007bac <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	4b0f      	ldr	r3, [pc, #60]	; (8007ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3304      	adds	r3, #4
 8007b66:	4619      	mov	r1, r3
 8007b68:	4610      	mov	r0, r2
 8007b6a:	f7ff faac 	bl	80070c6 <vListInsert>
}
 8007b6e:	e010      	b.n	8007b92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b70:	4b0f      	ldr	r3, [pc, #60]	; (8007bb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	4b0a      	ldr	r3, [pc, #40]	; (8007ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	f7ff faa2 	bl	80070c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b82:	4b0c      	ldr	r3, [pc, #48]	; (8007bb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d202      	bcs.n	8007b92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b8c:	4a09      	ldr	r2, [pc, #36]	; (8007bb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	6013      	str	r3, [r2, #0]
}
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	2000038c 	.word	0x2000038c
 8007ba0:	20000288 	.word	0x20000288
 8007ba4:	20000390 	.word	0x20000390
 8007ba8:	20000374 	.word	0x20000374
 8007bac:	20000344 	.word	0x20000344
 8007bb0:	20000340 	.word	0x20000340
 8007bb4:	200003a8 	.word	0x200003a8

08007bb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3b04      	subs	r3, #4
 8007bc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3b04      	subs	r3, #4
 8007bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f023 0201 	bic.w	r2, r3, #1
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3b04      	subs	r3, #4
 8007be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007be8:	4a0c      	ldr	r2, [pc, #48]	; (8007c1c <pxPortInitialiseStack+0x64>)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3b14      	subs	r3, #20
 8007bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3b04      	subs	r3, #4
 8007bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f06f 0202 	mvn.w	r2, #2
 8007c06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3b20      	subs	r3, #32
 8007c0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	08007c21 	.word	0x08007c21

08007c20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c26:	2300      	movs	r3, #0
 8007c28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c2a:	4b11      	ldr	r3, [pc, #68]	; (8007c70 <prvTaskExitError+0x50>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c32:	d009      	beq.n	8007c48 <prvTaskExitError+0x28>
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	e7fe      	b.n	8007c46 <prvTaskExitError+0x26>
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c5a:	bf00      	nop
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0fc      	beq.n	8007c5c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c62:	bf00      	nop
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	2000000c 	.word	0x2000000c
	...

08007c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c80:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <pxCurrentTCBConst2>)
 8007c82:	6819      	ldr	r1, [r3, #0]
 8007c84:	6808      	ldr	r0, [r1, #0]
 8007c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8a:	f380 8809 	msr	PSP, r0
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f04f 0000 	mov.w	r0, #0
 8007c96:	f380 8811 	msr	BASEPRI, r0
 8007c9a:	4770      	bx	lr
 8007c9c:	f3af 8000 	nop.w

08007ca0 <pxCurrentTCBConst2>:
 8007ca0:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop

08007ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ca8:	4808      	ldr	r0, [pc, #32]	; (8007ccc <prvPortStartFirstTask+0x24>)
 8007caa:	6800      	ldr	r0, [r0, #0]
 8007cac:	6800      	ldr	r0, [r0, #0]
 8007cae:	f380 8808 	msr	MSP, r0
 8007cb2:	f04f 0000 	mov.w	r0, #0
 8007cb6:	f380 8814 	msr	CONTROL, r0
 8007cba:	b662      	cpsie	i
 8007cbc:	b661      	cpsie	f
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	df00      	svc	0
 8007cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007cca:	bf00      	nop
 8007ccc:	e000ed08 	.word	0xe000ed08

08007cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007cd6:	4b44      	ldr	r3, [pc, #272]	; (8007de8 <xPortStartScheduler+0x118>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a44      	ldr	r2, [pc, #272]	; (8007dec <xPortStartScheduler+0x11c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d109      	bne.n	8007cf4 <xPortStartScheduler+0x24>
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	613b      	str	r3, [r7, #16]
 8007cf2:	e7fe      	b.n	8007cf2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007cf4:	4b3c      	ldr	r3, [pc, #240]	; (8007de8 <xPortStartScheduler+0x118>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a3d      	ldr	r2, [pc, #244]	; (8007df0 <xPortStartScheduler+0x120>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d109      	bne.n	8007d12 <xPortStartScheduler+0x42>
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	e7fe      	b.n	8007d10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d12:	4b38      	ldr	r3, [pc, #224]	; (8007df4 <xPortStartScheduler+0x124>)
 8007d14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	22ff      	movs	r2, #255	; 0xff
 8007d22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	4b30      	ldr	r3, [pc, #192]	; (8007df8 <xPortStartScheduler+0x128>)
 8007d38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d3a:	4b30      	ldr	r3, [pc, #192]	; (8007dfc <xPortStartScheduler+0x12c>)
 8007d3c:	2207      	movs	r2, #7
 8007d3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d40:	e009      	b.n	8007d56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007d42:	4b2e      	ldr	r3, [pc, #184]	; (8007dfc <xPortStartScheduler+0x12c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	4a2c      	ldr	r2, [pc, #176]	; (8007dfc <xPortStartScheduler+0x12c>)
 8007d4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d4c:	78fb      	ldrb	r3, [r7, #3]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d56:	78fb      	ldrb	r3, [r7, #3]
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5e:	2b80      	cmp	r3, #128	; 0x80
 8007d60:	d0ef      	beq.n	8007d42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d62:	4b26      	ldr	r3, [pc, #152]	; (8007dfc <xPortStartScheduler+0x12c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f1c3 0307 	rsb	r3, r3, #7
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	d009      	beq.n	8007d82 <xPortStartScheduler+0xb2>
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	60bb      	str	r3, [r7, #8]
 8007d80:	e7fe      	b.n	8007d80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d82:	4b1e      	ldr	r3, [pc, #120]	; (8007dfc <xPortStartScheduler+0x12c>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	021b      	lsls	r3, r3, #8
 8007d88:	4a1c      	ldr	r2, [pc, #112]	; (8007dfc <xPortStartScheduler+0x12c>)
 8007d8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d8c:	4b1b      	ldr	r3, [pc, #108]	; (8007dfc <xPortStartScheduler+0x12c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d94:	4a19      	ldr	r2, [pc, #100]	; (8007dfc <xPortStartScheduler+0x12c>)
 8007d96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007da0:	4b17      	ldr	r3, [pc, #92]	; (8007e00 <xPortStartScheduler+0x130>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a16      	ldr	r2, [pc, #88]	; (8007e00 <xPortStartScheduler+0x130>)
 8007da6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007daa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007dac:	4b14      	ldr	r3, [pc, #80]	; (8007e00 <xPortStartScheduler+0x130>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a13      	ldr	r2, [pc, #76]	; (8007e00 <xPortStartScheduler+0x130>)
 8007db2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007db6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007db8:	f000 f8d6 	bl	8007f68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007dbc:	4b11      	ldr	r3, [pc, #68]	; (8007e04 <xPortStartScheduler+0x134>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007dc2:	f000 f8f5 	bl	8007fb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007dc6:	4b10      	ldr	r3, [pc, #64]	; (8007e08 <xPortStartScheduler+0x138>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a0f      	ldr	r2, [pc, #60]	; (8007e08 <xPortStartScheduler+0x138>)
 8007dcc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007dd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007dd2:	f7ff ff69 	bl	8007ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007dd6:	f7ff fd57 	bl	8007888 <vTaskSwitchContext>
	prvTaskExitError();
 8007dda:	f7ff ff21 	bl	8007c20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	e000ed00 	.word	0xe000ed00
 8007dec:	410fc271 	.word	0x410fc271
 8007df0:	410fc270 	.word	0x410fc270
 8007df4:	e000e400 	.word	0xe000e400
 8007df8:	200003b4 	.word	0x200003b4
 8007dfc:	200003b8 	.word	0x200003b8
 8007e00:	e000ed20 	.word	0xe000ed20
 8007e04:	2000000c 	.word	0x2000000c
 8007e08:	e000ef34 	.word	0xe000ef34

08007e0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e24:	4b0e      	ldr	r3, [pc, #56]	; (8007e60 <vPortEnterCritical+0x54>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	4a0d      	ldr	r2, [pc, #52]	; (8007e60 <vPortEnterCritical+0x54>)
 8007e2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e2e:	4b0c      	ldr	r3, [pc, #48]	; (8007e60 <vPortEnterCritical+0x54>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d10e      	bne.n	8007e54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e36:	4b0b      	ldr	r3, [pc, #44]	; (8007e64 <vPortEnterCritical+0x58>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d009      	beq.n	8007e54 <vPortEnterCritical+0x48>
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	603b      	str	r3, [r7, #0]
 8007e52:	e7fe      	b.n	8007e52 <vPortEnterCritical+0x46>
	}
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	2000000c 	.word	0x2000000c
 8007e64:	e000ed04 	.word	0xe000ed04

08007e68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e6e:	4b11      	ldr	r3, [pc, #68]	; (8007eb4 <vPortExitCritical+0x4c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d109      	bne.n	8007e8a <vPortExitCritical+0x22>
 8007e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	607b      	str	r3, [r7, #4]
 8007e88:	e7fe      	b.n	8007e88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007e8a:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <vPortExitCritical+0x4c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	4a08      	ldr	r2, [pc, #32]	; (8007eb4 <vPortExitCritical+0x4c>)
 8007e92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e94:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <vPortExitCritical+0x4c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d104      	bne.n	8007ea6 <vPortExitCritical+0x3e>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	2000000c 	.word	0x2000000c
	...

08007ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ec0:	f3ef 8009 	mrs	r0, PSP
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	4b15      	ldr	r3, [pc, #84]	; (8007f20 <pxCurrentTCBConst>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	f01e 0f10 	tst.w	lr, #16
 8007ed0:	bf08      	it	eq
 8007ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eda:	6010      	str	r0, [r2, #0]
 8007edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ee4:	f380 8811 	msr	BASEPRI, r0
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f7ff fcca 	bl	8007888 <vTaskSwitchContext>
 8007ef4:	f04f 0000 	mov.w	r0, #0
 8007ef8:	f380 8811 	msr	BASEPRI, r0
 8007efc:	bc09      	pop	{r0, r3}
 8007efe:	6819      	ldr	r1, [r3, #0]
 8007f00:	6808      	ldr	r0, [r1, #0]
 8007f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f06:	f01e 0f10 	tst.w	lr, #16
 8007f0a:	bf08      	it	eq
 8007f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f10:	f380 8809 	msr	PSP, r0
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	f3af 8000 	nop.w

08007f20 <pxCurrentTCBConst>:
 8007f20:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop

08007f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f40:	f7ff fbe6 	bl	8007710 <xTaskIncrementTick>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f4a:	4b06      	ldr	r3, [pc, #24]	; (8007f64 <SysTick_Handler+0x3c>)
 8007f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	2300      	movs	r3, #0
 8007f54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f5c:	bf00      	nop
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	e000ed04 	.word	0xe000ed04

08007f68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f6c:	4b0b      	ldr	r3, [pc, #44]	; (8007f9c <vPortSetupTimerInterrupt+0x34>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f72:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <vPortSetupTimerInterrupt+0x38>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f78:	4b0a      	ldr	r3, [pc, #40]	; (8007fa4 <vPortSetupTimerInterrupt+0x3c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a0a      	ldr	r2, [pc, #40]	; (8007fa8 <vPortSetupTimerInterrupt+0x40>)
 8007f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f82:	099b      	lsrs	r3, r3, #6
 8007f84:	4a09      	ldr	r2, [pc, #36]	; (8007fac <vPortSetupTimerInterrupt+0x44>)
 8007f86:	3b01      	subs	r3, #1
 8007f88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f8a:	4b04      	ldr	r3, [pc, #16]	; (8007f9c <vPortSetupTimerInterrupt+0x34>)
 8007f8c:	2207      	movs	r2, #7
 8007f8e:	601a      	str	r2, [r3, #0]
}
 8007f90:	bf00      	nop
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	e000e010 	.word	0xe000e010
 8007fa0:	e000e018 	.word	0xe000e018
 8007fa4:	20000000 	.word	0x20000000
 8007fa8:	10624dd3 	.word	0x10624dd3
 8007fac:	e000e014 	.word	0xe000e014

08007fb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007fb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007fc0 <vPortEnableVFP+0x10>
 8007fb4:	6801      	ldr	r1, [r0, #0]
 8007fb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007fba:	6001      	str	r1, [r0, #0]
 8007fbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007fbe:	bf00      	nop
 8007fc0:	e000ed88 	.word	0xe000ed88

08007fc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b08a      	sub	sp, #40	; 0x28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fd0:	f7ff faf4 	bl	80075bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fd4:	4b57      	ldr	r3, [pc, #348]	; (8008134 <pvPortMalloc+0x170>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fdc:	f000 f90c 	bl	80081f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fe0:	4b55      	ldr	r3, [pc, #340]	; (8008138 <pvPortMalloc+0x174>)
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f040 808c 	bne.w	8008106 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d01c      	beq.n	800802e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007ff4:	2208      	movs	r2, #8
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	2b00      	cmp	r3, #0
 8008004:	d013      	beq.n	800802e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f023 0307 	bic.w	r3, r3, #7
 800800c:	3308      	adds	r3, #8
 800800e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	2b00      	cmp	r3, #0
 8008018:	d009      	beq.n	800802e <pvPortMalloc+0x6a>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	e7fe      	b.n	800802c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d068      	beq.n	8008106 <pvPortMalloc+0x142>
 8008034:	4b41      	ldr	r3, [pc, #260]	; (800813c <pvPortMalloc+0x178>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	429a      	cmp	r2, r3
 800803c:	d863      	bhi.n	8008106 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800803e:	4b40      	ldr	r3, [pc, #256]	; (8008140 <pvPortMalloc+0x17c>)
 8008040:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008042:	4b3f      	ldr	r3, [pc, #252]	; (8008140 <pvPortMalloc+0x17c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008048:	e004      	b.n	8008054 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	429a      	cmp	r2, r3
 800805c:	d903      	bls.n	8008066 <pvPortMalloc+0xa2>
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1f1      	bne.n	800804a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008066:	4b33      	ldr	r3, [pc, #204]	; (8008134 <pvPortMalloc+0x170>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800806c:	429a      	cmp	r2, r3
 800806e:	d04a      	beq.n	8008106 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2208      	movs	r2, #8
 8008076:	4413      	add	r3, r2
 8008078:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	1ad2      	subs	r2, r2, r3
 800808a:	2308      	movs	r3, #8
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	429a      	cmp	r2, r3
 8008090:	d91e      	bls.n	80080d0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4413      	add	r3, r2
 8008098:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	f003 0307 	and.w	r3, r3, #7
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d009      	beq.n	80080b8 <pvPortMalloc+0xf4>
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	613b      	str	r3, [r7, #16]
 80080b6:	e7fe      	b.n	80080b6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	1ad2      	subs	r2, r2, r3
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080ca:	69b8      	ldr	r0, [r7, #24]
 80080cc:	f000 f8f6 	bl	80082bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080d0:	4b1a      	ldr	r3, [pc, #104]	; (800813c <pvPortMalloc+0x178>)
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	4a18      	ldr	r2, [pc, #96]	; (800813c <pvPortMalloc+0x178>)
 80080dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080de:	4b17      	ldr	r3, [pc, #92]	; (800813c <pvPortMalloc+0x178>)
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	4b18      	ldr	r3, [pc, #96]	; (8008144 <pvPortMalloc+0x180>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d203      	bcs.n	80080f2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080ea:	4b14      	ldr	r3, [pc, #80]	; (800813c <pvPortMalloc+0x178>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a15      	ldr	r2, [pc, #84]	; (8008144 <pvPortMalloc+0x180>)
 80080f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	4b10      	ldr	r3, [pc, #64]	; (8008138 <pvPortMalloc+0x174>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	431a      	orrs	r2, r3
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	2200      	movs	r2, #0
 8008104:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008106:	f7ff fa67 	bl	80075d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	2b00      	cmp	r3, #0
 8008112:	d009      	beq.n	8008128 <pvPortMalloc+0x164>
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	60fb      	str	r3, [r7, #12]
 8008126:	e7fe      	b.n	8008126 <pvPortMalloc+0x162>
	return pvReturn;
 8008128:	69fb      	ldr	r3, [r7, #28]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3728      	adds	r7, #40	; 0x28
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	200023cc 	.word	0x200023cc
 8008138:	200023d8 	.word	0x200023d8
 800813c:	200023d0 	.word	0x200023d0
 8008140:	200023c4 	.word	0x200023c4
 8008144:	200023d4 	.word	0x200023d4

08008148 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d046      	beq.n	80081e8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800815a:	2308      	movs	r3, #8
 800815c:	425b      	negs	r3, r3
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	4413      	add	r3, r2
 8008162:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	4b20      	ldr	r3, [pc, #128]	; (80081f0 <vPortFree+0xa8>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4013      	ands	r3, r2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d109      	bne.n	800818a <vPortFree+0x42>
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	e7fe      	b.n	8008188 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d009      	beq.n	80081a6 <vPortFree+0x5e>
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	60bb      	str	r3, [r7, #8]
 80081a4:	e7fe      	b.n	80081a4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	4b11      	ldr	r3, [pc, #68]	; (80081f0 <vPortFree+0xa8>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4013      	ands	r3, r2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d019      	beq.n	80081e8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d115      	bne.n	80081e8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	4b0b      	ldr	r3, [pc, #44]	; (80081f0 <vPortFree+0xa8>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	43db      	mvns	r3, r3
 80081c6:	401a      	ands	r2, r3
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081cc:	f7ff f9f6 	bl	80075bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	4b07      	ldr	r3, [pc, #28]	; (80081f4 <vPortFree+0xac>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4413      	add	r3, r2
 80081da:	4a06      	ldr	r2, [pc, #24]	; (80081f4 <vPortFree+0xac>)
 80081dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081de:	6938      	ldr	r0, [r7, #16]
 80081e0:	f000 f86c 	bl	80082bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80081e4:	f7ff f9f8 	bl	80075d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081e8:	bf00      	nop
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	200023d8 	.word	0x200023d8
 80081f4:	200023d0 	.word	0x200023d0

080081f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081fe:	f242 0308 	movw	r3, #8200	; 0x2008
 8008202:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008204:	4b27      	ldr	r3, [pc, #156]	; (80082a4 <prvHeapInit+0xac>)
 8008206:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f003 0307 	and.w	r3, r3, #7
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00c      	beq.n	800822c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3307      	adds	r3, #7
 8008216:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0307 	bic.w	r3, r3, #7
 800821e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	4a1f      	ldr	r2, [pc, #124]	; (80082a4 <prvHeapInit+0xac>)
 8008228:	4413      	add	r3, r2
 800822a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008230:	4a1d      	ldr	r2, [pc, #116]	; (80082a8 <prvHeapInit+0xb0>)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008236:	4b1c      	ldr	r3, [pc, #112]	; (80082a8 <prvHeapInit+0xb0>)
 8008238:	2200      	movs	r2, #0
 800823a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	4413      	add	r3, r2
 8008242:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008244:	2208      	movs	r2, #8
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	1a9b      	subs	r3, r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f023 0307 	bic.w	r3, r3, #7
 8008252:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4a15      	ldr	r2, [pc, #84]	; (80082ac <prvHeapInit+0xb4>)
 8008258:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800825a:	4b14      	ldr	r3, [pc, #80]	; (80082ac <prvHeapInit+0xb4>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2200      	movs	r2, #0
 8008260:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008262:	4b12      	ldr	r3, [pc, #72]	; (80082ac <prvHeapInit+0xb4>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2200      	movs	r2, #0
 8008268:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	1ad2      	subs	r2, r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008278:	4b0c      	ldr	r3, [pc, #48]	; (80082ac <prvHeapInit+0xb4>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	4a0a      	ldr	r2, [pc, #40]	; (80082b0 <prvHeapInit+0xb8>)
 8008286:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	4a09      	ldr	r2, [pc, #36]	; (80082b4 <prvHeapInit+0xbc>)
 800828e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008290:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <prvHeapInit+0xc0>)
 8008292:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008296:	601a      	str	r2, [r3, #0]
}
 8008298:	bf00      	nop
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	200003bc 	.word	0x200003bc
 80082a8:	200023c4 	.word	0x200023c4
 80082ac:	200023cc 	.word	0x200023cc
 80082b0:	200023d4 	.word	0x200023d4
 80082b4:	200023d0 	.word	0x200023d0
 80082b8:	200023d8 	.word	0x200023d8

080082bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082c4:	4b28      	ldr	r3, [pc, #160]	; (8008368 <prvInsertBlockIntoFreeList+0xac>)
 80082c6:	60fb      	str	r3, [r7, #12]
 80082c8:	e002      	b.n	80082d0 <prvInsertBlockIntoFreeList+0x14>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d8f7      	bhi.n	80082ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	4413      	add	r3, r2
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d108      	bne.n	80082fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	441a      	add	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	441a      	add	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	429a      	cmp	r2, r3
 8008310:	d118      	bne.n	8008344 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	4b15      	ldr	r3, [pc, #84]	; (800836c <prvInsertBlockIntoFreeList+0xb0>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d00d      	beq.n	800833a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	441a      	add	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	e008      	b.n	800834c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800833a:	4b0c      	ldr	r3, [pc, #48]	; (800836c <prvInsertBlockIntoFreeList+0xb0>)
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	e003      	b.n	800834c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	429a      	cmp	r2, r3
 8008352:	d002      	beq.n	800835a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800835a:	bf00      	nop
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	200023c4 	.word	0x200023c4
 800836c:	200023cc 	.word	0x200023cc

08008370 <__libc_init_array>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	4e0d      	ldr	r6, [pc, #52]	; (80083a8 <__libc_init_array+0x38>)
 8008374:	4c0d      	ldr	r4, [pc, #52]	; (80083ac <__libc_init_array+0x3c>)
 8008376:	1ba4      	subs	r4, r4, r6
 8008378:	10a4      	asrs	r4, r4, #2
 800837a:	2500      	movs	r5, #0
 800837c:	42a5      	cmp	r5, r4
 800837e:	d109      	bne.n	8008394 <__libc_init_array+0x24>
 8008380:	4e0b      	ldr	r6, [pc, #44]	; (80083b0 <__libc_init_array+0x40>)
 8008382:	4c0c      	ldr	r4, [pc, #48]	; (80083b4 <__libc_init_array+0x44>)
 8008384:	f000 fd6c 	bl	8008e60 <_init>
 8008388:	1ba4      	subs	r4, r4, r6
 800838a:	10a4      	asrs	r4, r4, #2
 800838c:	2500      	movs	r5, #0
 800838e:	42a5      	cmp	r5, r4
 8008390:	d105      	bne.n	800839e <__libc_init_array+0x2e>
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008398:	4798      	blx	r3
 800839a:	3501      	adds	r5, #1
 800839c:	e7ee      	b.n	800837c <__libc_init_array+0xc>
 800839e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083a2:	4798      	blx	r3
 80083a4:	3501      	adds	r5, #1
 80083a6:	e7f2      	b.n	800838e <__libc_init_array+0x1e>
 80083a8:	08009334 	.word	0x08009334
 80083ac:	08009334 	.word	0x08009334
 80083b0:	08009334 	.word	0x08009334
 80083b4:	08009338 	.word	0x08009338

080083b8 <memset>:
 80083b8:	4402      	add	r2, r0
 80083ba:	4603      	mov	r3, r0
 80083bc:	4293      	cmp	r3, r2
 80083be:	d100      	bne.n	80083c2 <memset+0xa>
 80083c0:	4770      	bx	lr
 80083c2:	f803 1b01 	strb.w	r1, [r3], #1
 80083c6:	e7f9      	b.n	80083bc <memset+0x4>

080083c8 <sinf>:
 80083c8:	ee10 3a10 	vmov	r3, s0
 80083cc:	b507      	push	{r0, r1, r2, lr}
 80083ce:	4a1d      	ldr	r2, [pc, #116]	; (8008444 <sinf+0x7c>)
 80083d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083d4:	4293      	cmp	r3, r2
 80083d6:	dc05      	bgt.n	80083e4 <sinf+0x1c>
 80083d8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8008448 <sinf+0x80>
 80083dc:	2000      	movs	r0, #0
 80083de:	f000 fc41 	bl	8008c64 <__kernel_sinf>
 80083e2:	e004      	b.n	80083ee <sinf+0x26>
 80083e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80083e8:	db04      	blt.n	80083f4 <sinf+0x2c>
 80083ea:	ee30 0a40 	vsub.f32	s0, s0, s0
 80083ee:	b003      	add	sp, #12
 80083f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80083f4:	4668      	mov	r0, sp
 80083f6:	f000 f829 	bl	800844c <__ieee754_rem_pio2f>
 80083fa:	f000 0003 	and.w	r0, r0, #3
 80083fe:	2801      	cmp	r0, #1
 8008400:	d008      	beq.n	8008414 <sinf+0x4c>
 8008402:	2802      	cmp	r0, #2
 8008404:	d00d      	beq.n	8008422 <sinf+0x5a>
 8008406:	b9b0      	cbnz	r0, 8008436 <sinf+0x6e>
 8008408:	2001      	movs	r0, #1
 800840a:	eddd 0a01 	vldr	s1, [sp, #4]
 800840e:	ed9d 0a00 	vldr	s0, [sp]
 8008412:	e7e4      	b.n	80083de <sinf+0x16>
 8008414:	eddd 0a01 	vldr	s1, [sp, #4]
 8008418:	ed9d 0a00 	vldr	s0, [sp]
 800841c:	f000 f942 	bl	80086a4 <__kernel_cosf>
 8008420:	e7e5      	b.n	80083ee <sinf+0x26>
 8008422:	2001      	movs	r0, #1
 8008424:	eddd 0a01 	vldr	s1, [sp, #4]
 8008428:	ed9d 0a00 	vldr	s0, [sp]
 800842c:	f000 fc1a 	bl	8008c64 <__kernel_sinf>
 8008430:	eeb1 0a40 	vneg.f32	s0, s0
 8008434:	e7db      	b.n	80083ee <sinf+0x26>
 8008436:	eddd 0a01 	vldr	s1, [sp, #4]
 800843a:	ed9d 0a00 	vldr	s0, [sp]
 800843e:	f000 f931 	bl	80086a4 <__kernel_cosf>
 8008442:	e7f5      	b.n	8008430 <sinf+0x68>
 8008444:	3f490fd8 	.word	0x3f490fd8
 8008448:	00000000 	.word	0x00000000

0800844c <__ieee754_rem_pio2f>:
 800844c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800844e:	ee10 6a10 	vmov	r6, s0
 8008452:	4b86      	ldr	r3, [pc, #536]	; (800866c <__ieee754_rem_pio2f+0x220>)
 8008454:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8008458:	429c      	cmp	r4, r3
 800845a:	b087      	sub	sp, #28
 800845c:	4605      	mov	r5, r0
 800845e:	dc05      	bgt.n	800846c <__ieee754_rem_pio2f+0x20>
 8008460:	2300      	movs	r3, #0
 8008462:	ed85 0a00 	vstr	s0, [r5]
 8008466:	6043      	str	r3, [r0, #4]
 8008468:	2000      	movs	r0, #0
 800846a:	e020      	b.n	80084ae <__ieee754_rem_pio2f+0x62>
 800846c:	4b80      	ldr	r3, [pc, #512]	; (8008670 <__ieee754_rem_pio2f+0x224>)
 800846e:	429c      	cmp	r4, r3
 8008470:	dc38      	bgt.n	80084e4 <__ieee754_rem_pio2f+0x98>
 8008472:	2e00      	cmp	r6, #0
 8008474:	f024 040f 	bic.w	r4, r4, #15
 8008478:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8008674 <__ieee754_rem_pio2f+0x228>
 800847c:	4b7e      	ldr	r3, [pc, #504]	; (8008678 <__ieee754_rem_pio2f+0x22c>)
 800847e:	dd18      	ble.n	80084b2 <__ieee754_rem_pio2f+0x66>
 8008480:	429c      	cmp	r4, r3
 8008482:	ee70 7a47 	vsub.f32	s15, s0, s14
 8008486:	bf09      	itett	eq
 8008488:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800867c <__ieee754_rem_pio2f+0x230>
 800848c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8008680 <__ieee754_rem_pio2f+0x234>
 8008490:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8008494:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8008684 <__ieee754_rem_pio2f+0x238>
 8008498:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800849c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80084a0:	edc0 6a00 	vstr	s13, [r0]
 80084a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084a8:	edc0 7a01 	vstr	s15, [r0, #4]
 80084ac:	2001      	movs	r0, #1
 80084ae:	b007      	add	sp, #28
 80084b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084b2:	429c      	cmp	r4, r3
 80084b4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80084b8:	bf09      	itett	eq
 80084ba:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800867c <__ieee754_rem_pio2f+0x230>
 80084be:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8008680 <__ieee754_rem_pio2f+0x234>
 80084c2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80084c6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8008684 <__ieee754_rem_pio2f+0x238>
 80084ca:	ee77 6a87 	vadd.f32	s13, s15, s14
 80084ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80084d2:	edc0 6a00 	vstr	s13, [r0]
 80084d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084da:	edc0 7a01 	vstr	s15, [r0, #4]
 80084de:	f04f 30ff 	mov.w	r0, #4294967295
 80084e2:	e7e4      	b.n	80084ae <__ieee754_rem_pio2f+0x62>
 80084e4:	4b68      	ldr	r3, [pc, #416]	; (8008688 <__ieee754_rem_pio2f+0x23c>)
 80084e6:	429c      	cmp	r4, r3
 80084e8:	dc71      	bgt.n	80085ce <__ieee754_rem_pio2f+0x182>
 80084ea:	f000 fc03 	bl	8008cf4 <fabsf>
 80084ee:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800868c <__ieee754_rem_pio2f+0x240>
 80084f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80084f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80084fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084fe:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008502:	ee17 0a90 	vmov	r0, s15
 8008506:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008674 <__ieee754_rem_pio2f+0x228>
 800850a:	eeb1 7a46 	vneg.f32	s14, s12
 800850e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008512:	281f      	cmp	r0, #31
 8008514:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008680 <__ieee754_rem_pio2f+0x234>
 8008518:	ee66 7a27 	vmul.f32	s15, s12, s15
 800851c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008520:	ee16 3a90 	vmov	r3, s13
 8008524:	dc1c      	bgt.n	8008560 <__ieee754_rem_pio2f+0x114>
 8008526:	1e47      	subs	r7, r0, #1
 8008528:	4959      	ldr	r1, [pc, #356]	; (8008690 <__ieee754_rem_pio2f+0x244>)
 800852a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800852e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8008532:	428a      	cmp	r2, r1
 8008534:	d014      	beq.n	8008560 <__ieee754_rem_pio2f+0x114>
 8008536:	602b      	str	r3, [r5, #0]
 8008538:	ed95 7a00 	vldr	s14, [r5]
 800853c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008540:	2e00      	cmp	r6, #0
 8008542:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008546:	ed85 0a01 	vstr	s0, [r5, #4]
 800854a:	dab0      	bge.n	80084ae <__ieee754_rem_pio2f+0x62>
 800854c:	eeb1 7a47 	vneg.f32	s14, s14
 8008550:	eeb1 0a40 	vneg.f32	s0, s0
 8008554:	ed85 7a00 	vstr	s14, [r5]
 8008558:	ed85 0a01 	vstr	s0, [r5, #4]
 800855c:	4240      	negs	r0, r0
 800855e:	e7a6      	b.n	80084ae <__ieee754_rem_pio2f+0x62>
 8008560:	15e4      	asrs	r4, r4, #23
 8008562:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008566:	1aa2      	subs	r2, r4, r2
 8008568:	2a08      	cmp	r2, #8
 800856a:	dde4      	ble.n	8008536 <__ieee754_rem_pio2f+0xea>
 800856c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800867c <__ieee754_rem_pio2f+0x230>
 8008570:	eef0 6a40 	vmov.f32	s13, s0
 8008574:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008578:	ee30 0a66 	vsub.f32	s0, s0, s13
 800857c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008580:	eddf 7a40 	vldr	s15, [pc, #256]	; 8008684 <__ieee754_rem_pio2f+0x238>
 8008584:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8008588:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800858c:	eef0 7a40 	vmov.f32	s15, s0
 8008590:	ee15 3a90 	vmov	r3, s11
 8008594:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008598:	1aa4      	subs	r4, r4, r2
 800859a:	2c19      	cmp	r4, #25
 800859c:	dc04      	bgt.n	80085a8 <__ieee754_rem_pio2f+0x15c>
 800859e:	edc5 5a00 	vstr	s11, [r5]
 80085a2:	eeb0 0a66 	vmov.f32	s0, s13
 80085a6:	e7c7      	b.n	8008538 <__ieee754_rem_pio2f+0xec>
 80085a8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008694 <__ieee754_rem_pio2f+0x248>
 80085ac:	eeb0 0a66 	vmov.f32	s0, s13
 80085b0:	eea7 0a25 	vfma.f32	s0, s14, s11
 80085b4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80085b8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80085bc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008698 <__ieee754_rem_pio2f+0x24c>
 80085c0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80085c4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80085c8:	ed85 7a00 	vstr	s14, [r5]
 80085cc:	e7b4      	b.n	8008538 <__ieee754_rem_pio2f+0xec>
 80085ce:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80085d2:	db06      	blt.n	80085e2 <__ieee754_rem_pio2f+0x196>
 80085d4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80085d8:	edc0 7a01 	vstr	s15, [r0, #4]
 80085dc:	edc0 7a00 	vstr	s15, [r0]
 80085e0:	e742      	b.n	8008468 <__ieee754_rem_pio2f+0x1c>
 80085e2:	15e2      	asrs	r2, r4, #23
 80085e4:	3a86      	subs	r2, #134	; 0x86
 80085e6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80085ea:	ee07 3a90 	vmov	s15, r3
 80085ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80085f2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800869c <__ieee754_rem_pio2f+0x250>
 80085f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80085fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085fe:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008602:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008606:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800860a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800860e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008612:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008616:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800861a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800861e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008622:	edcd 7a05 	vstr	s15, [sp, #20]
 8008626:	d11e      	bne.n	8008666 <__ieee754_rem_pio2f+0x21a>
 8008628:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800862c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008630:	bf0c      	ite	eq
 8008632:	2301      	moveq	r3, #1
 8008634:	2302      	movne	r3, #2
 8008636:	491a      	ldr	r1, [pc, #104]	; (80086a0 <__ieee754_rem_pio2f+0x254>)
 8008638:	9101      	str	r1, [sp, #4]
 800863a:	2102      	movs	r1, #2
 800863c:	9100      	str	r1, [sp, #0]
 800863e:	a803      	add	r0, sp, #12
 8008640:	4629      	mov	r1, r5
 8008642:	f000 f88d 	bl	8008760 <__kernel_rem_pio2f>
 8008646:	2e00      	cmp	r6, #0
 8008648:	f6bf af31 	bge.w	80084ae <__ieee754_rem_pio2f+0x62>
 800864c:	edd5 7a00 	vldr	s15, [r5]
 8008650:	eef1 7a67 	vneg.f32	s15, s15
 8008654:	edc5 7a00 	vstr	s15, [r5]
 8008658:	edd5 7a01 	vldr	s15, [r5, #4]
 800865c:	eef1 7a67 	vneg.f32	s15, s15
 8008660:	edc5 7a01 	vstr	s15, [r5, #4]
 8008664:	e77a      	b.n	800855c <__ieee754_rem_pio2f+0x110>
 8008666:	2303      	movs	r3, #3
 8008668:	e7e5      	b.n	8008636 <__ieee754_rem_pio2f+0x1ea>
 800866a:	bf00      	nop
 800866c:	3f490fd8 	.word	0x3f490fd8
 8008670:	4016cbe3 	.word	0x4016cbe3
 8008674:	3fc90f80 	.word	0x3fc90f80
 8008678:	3fc90fd0 	.word	0x3fc90fd0
 800867c:	37354400 	.word	0x37354400
 8008680:	37354443 	.word	0x37354443
 8008684:	2e85a308 	.word	0x2e85a308
 8008688:	43490f80 	.word	0x43490f80
 800868c:	3f22f984 	.word	0x3f22f984
 8008690:	08008f64 	.word	0x08008f64
 8008694:	2e85a300 	.word	0x2e85a300
 8008698:	248d3132 	.word	0x248d3132
 800869c:	43800000 	.word	0x43800000
 80086a0:	08008fe4 	.word	0x08008fe4

080086a4 <__kernel_cosf>:
 80086a4:	ee10 3a10 	vmov	r3, s0
 80086a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80086b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086b4:	da05      	bge.n	80086c2 <__kernel_cosf+0x1e>
 80086b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80086ba:	ee17 2a90 	vmov	r2, s15
 80086be:	2a00      	cmp	r2, #0
 80086c0:	d03b      	beq.n	800873a <__kernel_cosf+0x96>
 80086c2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80086c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80086ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008740 <__kernel_cosf+0x9c>
 80086ce:	4a1d      	ldr	r2, [pc, #116]	; (8008744 <__kernel_cosf+0xa0>)
 80086d0:	ee66 7a07 	vmul.f32	s15, s12, s14
 80086d4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008748 <__kernel_cosf+0xa4>
 80086d8:	eea6 7a25 	vfma.f32	s14, s12, s11
 80086dc:	4293      	cmp	r3, r2
 80086de:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800874c <__kernel_cosf+0xa8>
 80086e2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80086e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008750 <__kernel_cosf+0xac>
 80086ea:	eea5 7a86 	vfma.f32	s14, s11, s12
 80086ee:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008754 <__kernel_cosf+0xb0>
 80086f2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80086f6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008758 <__kernel_cosf+0xb4>
 80086fa:	eea5 7a86 	vfma.f32	s14, s11, s12
 80086fe:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8008702:	ee27 7a06 	vmul.f32	s14, s14, s12
 8008706:	eee6 0a07 	vfma.f32	s1, s12, s14
 800870a:	dc04      	bgt.n	8008716 <__kernel_cosf+0x72>
 800870c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8008710:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8008714:	4770      	bx	lr
 8008716:	4a11      	ldr	r2, [pc, #68]	; (800875c <__kernel_cosf+0xb8>)
 8008718:	4293      	cmp	r3, r2
 800871a:	bfda      	itte	le
 800871c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008720:	ee07 3a10 	vmovle	s14, r3
 8008724:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8008728:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800872c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8008730:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008734:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008738:	4770      	bx	lr
 800873a:	eeb0 0a66 	vmov.f32	s0, s13
 800873e:	4770      	bx	lr
 8008740:	ad47d74e 	.word	0xad47d74e
 8008744:	3e999999 	.word	0x3e999999
 8008748:	310f74f6 	.word	0x310f74f6
 800874c:	b493f27c 	.word	0xb493f27c
 8008750:	37d00d01 	.word	0x37d00d01
 8008754:	bab60b61 	.word	0xbab60b61
 8008758:	3d2aaaab 	.word	0x3d2aaaab
 800875c:	3f480000 	.word	0x3f480000

08008760 <__kernel_rem_pio2f>:
 8008760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008764:	ed2d 8b04 	vpush	{d8-d9}
 8008768:	b0d7      	sub	sp, #348	; 0x15c
 800876a:	469b      	mov	fp, r3
 800876c:	460e      	mov	r6, r1
 800876e:	4bbe      	ldr	r3, [pc, #760]	; (8008a68 <__kernel_rem_pio2f+0x308>)
 8008770:	9964      	ldr	r1, [sp, #400]	; 0x190
 8008772:	9002      	str	r0, [sp, #8]
 8008774:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008778:	9865      	ldr	r0, [sp, #404]	; 0x194
 800877a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8008a78 <__kernel_rem_pio2f+0x318>
 800877e:	1ed1      	subs	r1, r2, #3
 8008780:	2308      	movs	r3, #8
 8008782:	fb91 f1f3 	sdiv	r1, r1, r3
 8008786:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800878a:	f10b 3aff 	add.w	sl, fp, #4294967295
 800878e:	1c4c      	adds	r4, r1, #1
 8008790:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8008794:	eba1 050a 	sub.w	r5, r1, sl
 8008798:	aa1a      	add	r2, sp, #104	; 0x68
 800879a:	eb09 070a 	add.w	r7, r9, sl
 800879e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80087a2:	4696      	mov	lr, r2
 80087a4:	2300      	movs	r3, #0
 80087a6:	42bb      	cmp	r3, r7
 80087a8:	dd0f      	ble.n	80087ca <__kernel_rem_pio2f+0x6a>
 80087aa:	af42      	add	r7, sp, #264	; 0x108
 80087ac:	2200      	movs	r2, #0
 80087ae:	454a      	cmp	r2, r9
 80087b0:	dc27      	bgt.n	8008802 <__kernel_rem_pio2f+0xa2>
 80087b2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80087b6:	eb0b 0302 	add.w	r3, fp, r2
 80087ba:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80087be:	9d02      	ldr	r5, [sp, #8]
 80087c0:	eddf 7aad 	vldr	s15, [pc, #692]	; 8008a78 <__kernel_rem_pio2f+0x318>
 80087c4:	f04f 0c00 	mov.w	ip, #0
 80087c8:	e015      	b.n	80087f6 <__kernel_rem_pio2f+0x96>
 80087ca:	42dd      	cmn	r5, r3
 80087cc:	bf5d      	ittte	pl
 80087ce:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80087d2:	ee07 2a90 	vmovpl	s15, r2
 80087d6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80087da:	eef0 7a47 	vmovmi.f32	s15, s14
 80087de:	ecee 7a01 	vstmia	lr!, {s15}
 80087e2:	3301      	adds	r3, #1
 80087e4:	e7df      	b.n	80087a6 <__kernel_rem_pio2f+0x46>
 80087e6:	ecf5 6a01 	vldmia	r5!, {s13}
 80087ea:	ed33 7a01 	vldmdb	r3!, {s14}
 80087ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 80087f2:	f10c 0c01 	add.w	ip, ip, #1
 80087f6:	45d4      	cmp	ip, sl
 80087f8:	ddf5      	ble.n	80087e6 <__kernel_rem_pio2f+0x86>
 80087fa:	ece7 7a01 	vstmia	r7!, {s15}
 80087fe:	3201      	adds	r2, #1
 8008800:	e7d5      	b.n	80087ae <__kernel_rem_pio2f+0x4e>
 8008802:	ab06      	add	r3, sp, #24
 8008804:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008808:	9304      	str	r3, [sp, #16]
 800880a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8008a74 <__kernel_rem_pio2f+0x314>
 800880e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8008a70 <__kernel_rem_pio2f+0x310>
 8008812:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8008816:	9303      	str	r3, [sp, #12]
 8008818:	464d      	mov	r5, r9
 800881a:	ab56      	add	r3, sp, #344	; 0x158
 800881c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8008820:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008824:	3f01      	subs	r7, #1
 8008826:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800882a:	00bf      	lsls	r7, r7, #2
 800882c:	ab56      	add	r3, sp, #344	; 0x158
 800882e:	19da      	adds	r2, r3, r7
 8008830:	3a4c      	subs	r2, #76	; 0x4c
 8008832:	2300      	movs	r3, #0
 8008834:	1ae9      	subs	r1, r5, r3
 8008836:	2900      	cmp	r1, #0
 8008838:	dc4c      	bgt.n	80088d4 <__kernel_rem_pio2f+0x174>
 800883a:	4620      	mov	r0, r4
 800883c:	f000 faa4 	bl	8008d88 <scalbnf>
 8008840:	eeb0 8a40 	vmov.f32	s16, s0
 8008844:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008848:	ee28 0a00 	vmul.f32	s0, s16, s0
 800884c:	f000 fa5a 	bl	8008d04 <floorf>
 8008850:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008854:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008858:	2c00      	cmp	r4, #0
 800885a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800885e:	edcd 7a01 	vstr	s15, [sp, #4]
 8008862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008866:	ee38 8a67 	vsub.f32	s16, s16, s15
 800886a:	dd48      	ble.n	80088fe <__kernel_rem_pio2f+0x19e>
 800886c:	1e69      	subs	r1, r5, #1
 800886e:	ab06      	add	r3, sp, #24
 8008870:	f1c4 0008 	rsb	r0, r4, #8
 8008874:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008878:	9a01      	ldr	r2, [sp, #4]
 800887a:	fa4c f300 	asr.w	r3, ip, r0
 800887e:	441a      	add	r2, r3
 8008880:	4083      	lsls	r3, r0
 8008882:	9201      	str	r2, [sp, #4]
 8008884:	ebac 0203 	sub.w	r2, ip, r3
 8008888:	ab06      	add	r3, sp, #24
 800888a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800888e:	f1c4 0307 	rsb	r3, r4, #7
 8008892:	fa42 f803 	asr.w	r8, r2, r3
 8008896:	f1b8 0f00 	cmp.w	r8, #0
 800889a:	dd41      	ble.n	8008920 <__kernel_rem_pio2f+0x1c0>
 800889c:	9b01      	ldr	r3, [sp, #4]
 800889e:	2000      	movs	r0, #0
 80088a0:	3301      	adds	r3, #1
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	4601      	mov	r1, r0
 80088a6:	4285      	cmp	r5, r0
 80088a8:	dc6d      	bgt.n	8008986 <__kernel_rem_pio2f+0x226>
 80088aa:	2c00      	cmp	r4, #0
 80088ac:	dd04      	ble.n	80088b8 <__kernel_rem_pio2f+0x158>
 80088ae:	2c01      	cmp	r4, #1
 80088b0:	d07e      	beq.n	80089b0 <__kernel_rem_pio2f+0x250>
 80088b2:	2c02      	cmp	r4, #2
 80088b4:	f000 8086 	beq.w	80089c4 <__kernel_rem_pio2f+0x264>
 80088b8:	f1b8 0f02 	cmp.w	r8, #2
 80088bc:	d130      	bne.n	8008920 <__kernel_rem_pio2f+0x1c0>
 80088be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80088c2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80088c6:	b359      	cbz	r1, 8008920 <__kernel_rem_pio2f+0x1c0>
 80088c8:	4620      	mov	r0, r4
 80088ca:	f000 fa5d 	bl	8008d88 <scalbnf>
 80088ce:	ee38 8a40 	vsub.f32	s16, s16, s0
 80088d2:	e025      	b.n	8008920 <__kernel_rem_pio2f+0x1c0>
 80088d4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80088d8:	a806      	add	r0, sp, #24
 80088da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088e2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80088e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80088ea:	ee10 1a10 	vmov	r1, s0
 80088ee:	ed32 0a01 	vldmdb	r2!, {s0}
 80088f2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80088f6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80088fa:	3301      	adds	r3, #1
 80088fc:	e79a      	b.n	8008834 <__kernel_rem_pio2f+0xd4>
 80088fe:	d106      	bne.n	800890e <__kernel_rem_pio2f+0x1ae>
 8008900:	1e6b      	subs	r3, r5, #1
 8008902:	aa06      	add	r2, sp, #24
 8008904:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008908:	ea4f 2822 	mov.w	r8, r2, asr #8
 800890c:	e7c3      	b.n	8008896 <__kernel_rem_pio2f+0x136>
 800890e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008912:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800891a:	da31      	bge.n	8008980 <__kernel_rem_pio2f+0x220>
 800891c:	f04f 0800 	mov.w	r8, #0
 8008920:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008928:	f040 80a8 	bne.w	8008a7c <__kernel_rem_pio2f+0x31c>
 800892c:	1e6b      	subs	r3, r5, #1
 800892e:	4618      	mov	r0, r3
 8008930:	2200      	movs	r2, #0
 8008932:	4548      	cmp	r0, r9
 8008934:	da4d      	bge.n	80089d2 <__kernel_rem_pio2f+0x272>
 8008936:	2a00      	cmp	r2, #0
 8008938:	f000 8087 	beq.w	8008a4a <__kernel_rem_pio2f+0x2ea>
 800893c:	aa06      	add	r2, sp, #24
 800893e:	3c08      	subs	r4, #8
 8008940:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008944:	2900      	cmp	r1, #0
 8008946:	f000 808d 	beq.w	8008a64 <__kernel_rem_pio2f+0x304>
 800894a:	4620      	mov	r0, r4
 800894c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008950:	9302      	str	r3, [sp, #8]
 8008952:	f000 fa19 	bl	8008d88 <scalbnf>
 8008956:	9b02      	ldr	r3, [sp, #8]
 8008958:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008a74 <__kernel_rem_pio2f+0x314>
 800895c:	0099      	lsls	r1, r3, #2
 800895e:	aa42      	add	r2, sp, #264	; 0x108
 8008960:	1850      	adds	r0, r2, r1
 8008962:	1d05      	adds	r5, r0, #4
 8008964:	461c      	mov	r4, r3
 8008966:	2c00      	cmp	r4, #0
 8008968:	f280 80b8 	bge.w	8008adc <__kernel_rem_pio2f+0x37c>
 800896c:	2500      	movs	r5, #0
 800896e:	1b5c      	subs	r4, r3, r5
 8008970:	2c00      	cmp	r4, #0
 8008972:	f2c0 80d8 	blt.w	8008b26 <__kernel_rem_pio2f+0x3c6>
 8008976:	4f3d      	ldr	r7, [pc, #244]	; (8008a6c <__kernel_rem_pio2f+0x30c>)
 8008978:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8008a78 <__kernel_rem_pio2f+0x318>
 800897c:	2400      	movs	r4, #0
 800897e:	e0c6      	b.n	8008b0e <__kernel_rem_pio2f+0x3ae>
 8008980:	f04f 0802 	mov.w	r8, #2
 8008984:	e78a      	b.n	800889c <__kernel_rem_pio2f+0x13c>
 8008986:	ab06      	add	r3, sp, #24
 8008988:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800898c:	b949      	cbnz	r1, 80089a2 <__kernel_rem_pio2f+0x242>
 800898e:	b12b      	cbz	r3, 800899c <__kernel_rem_pio2f+0x23c>
 8008990:	aa06      	add	r2, sp, #24
 8008992:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008996:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800899a:	2301      	movs	r3, #1
 800899c:	3001      	adds	r0, #1
 800899e:	4619      	mov	r1, r3
 80089a0:	e781      	b.n	80088a6 <__kernel_rem_pio2f+0x146>
 80089a2:	aa06      	add	r2, sp, #24
 80089a4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80089a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80089ac:	460b      	mov	r3, r1
 80089ae:	e7f5      	b.n	800899c <__kernel_rem_pio2f+0x23c>
 80089b0:	1e68      	subs	r0, r5, #1
 80089b2:	ab06      	add	r3, sp, #24
 80089b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80089b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089bc:	aa06      	add	r2, sp, #24
 80089be:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80089c2:	e779      	b.n	80088b8 <__kernel_rem_pio2f+0x158>
 80089c4:	1e68      	subs	r0, r5, #1
 80089c6:	ab06      	add	r3, sp, #24
 80089c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80089cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089d0:	e7f4      	b.n	80089bc <__kernel_rem_pio2f+0x25c>
 80089d2:	a906      	add	r1, sp, #24
 80089d4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80089d8:	3801      	subs	r0, #1
 80089da:	430a      	orrs	r2, r1
 80089dc:	e7a9      	b.n	8008932 <__kernel_rem_pio2f+0x1d2>
 80089de:	f10c 0c01 	add.w	ip, ip, #1
 80089e2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	d0f9      	beq.n	80089de <__kernel_rem_pio2f+0x27e>
 80089ea:	eb0b 0305 	add.w	r3, fp, r5
 80089ee:	aa1a      	add	r2, sp, #104	; 0x68
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	1898      	adds	r0, r3, r2
 80089f4:	3004      	adds	r0, #4
 80089f6:	1c69      	adds	r1, r5, #1
 80089f8:	3704      	adds	r7, #4
 80089fa:	2200      	movs	r2, #0
 80089fc:	4465      	add	r5, ip
 80089fe:	9005      	str	r0, [sp, #20]
 8008a00:	428d      	cmp	r5, r1
 8008a02:	f6ff af0a 	blt.w	800881a <__kernel_rem_pio2f+0xba>
 8008a06:	a81a      	add	r0, sp, #104	; 0x68
 8008a08:	eb02 0c03 	add.w	ip, r2, r3
 8008a0c:	4484      	add	ip, r0
 8008a0e:	9803      	ldr	r0, [sp, #12]
 8008a10:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008a14:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8008a18:	9001      	str	r0, [sp, #4]
 8008a1a:	ee07 0a90 	vmov	s15, r0
 8008a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a22:	9805      	ldr	r0, [sp, #20]
 8008a24:	edcc 7a00 	vstr	s15, [ip]
 8008a28:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008a78 <__kernel_rem_pio2f+0x318>
 8008a2c:	eb00 0802 	add.w	r8, r0, r2
 8008a30:	f04f 0c00 	mov.w	ip, #0
 8008a34:	45d4      	cmp	ip, sl
 8008a36:	dd0c      	ble.n	8008a52 <__kernel_rem_pio2f+0x2f2>
 8008a38:	eb02 0c07 	add.w	ip, r2, r7
 8008a3c:	a842      	add	r0, sp, #264	; 0x108
 8008a3e:	4484      	add	ip, r0
 8008a40:	edcc 7a01 	vstr	s15, [ip, #4]
 8008a44:	3101      	adds	r1, #1
 8008a46:	3204      	adds	r2, #4
 8008a48:	e7da      	b.n	8008a00 <__kernel_rem_pio2f+0x2a0>
 8008a4a:	9b04      	ldr	r3, [sp, #16]
 8008a4c:	f04f 0c01 	mov.w	ip, #1
 8008a50:	e7c7      	b.n	80089e2 <__kernel_rem_pio2f+0x282>
 8008a52:	ecfe 6a01 	vldmia	lr!, {s13}
 8008a56:	ed38 7a01 	vldmdb	r8!, {s14}
 8008a5a:	f10c 0c01 	add.w	ip, ip, #1
 8008a5e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008a62:	e7e7      	b.n	8008a34 <__kernel_rem_pio2f+0x2d4>
 8008a64:	3b01      	subs	r3, #1
 8008a66:	e769      	b.n	800893c <__kernel_rem_pio2f+0x1dc>
 8008a68:	08009328 	.word	0x08009328
 8008a6c:	080092fc 	.word	0x080092fc
 8008a70:	43800000 	.word	0x43800000
 8008a74:	3b800000 	.word	0x3b800000
 8008a78:	00000000 	.word	0x00000000
 8008a7c:	4260      	negs	r0, r4
 8008a7e:	eeb0 0a48 	vmov.f32	s0, s16
 8008a82:	f000 f981 	bl	8008d88 <scalbnf>
 8008a86:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8008a70 <__kernel_rem_pio2f+0x310>
 8008a8a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a92:	db1a      	blt.n	8008aca <__kernel_rem_pio2f+0x36a>
 8008a94:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008a74 <__kernel_rem_pio2f+0x314>
 8008a98:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008a9c:	aa06      	add	r2, sp, #24
 8008a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008aa2:	a906      	add	r1, sp, #24
 8008aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008aa8:	3408      	adds	r4, #8
 8008aaa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ab2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008ab6:	ee10 3a10 	vmov	r3, s0
 8008aba:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008abe:	1c6b      	adds	r3, r5, #1
 8008ac0:	ee17 2a90 	vmov	r2, s15
 8008ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008ac8:	e73f      	b.n	800894a <__kernel_rem_pio2f+0x1ea>
 8008aca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008ace:	aa06      	add	r2, sp, #24
 8008ad0:	ee10 3a10 	vmov	r3, s0
 8008ad4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008ad8:	462b      	mov	r3, r5
 8008ada:	e736      	b.n	800894a <__kernel_rem_pio2f+0x1ea>
 8008adc:	aa06      	add	r2, sp, #24
 8008ade:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8008ae2:	9202      	str	r2, [sp, #8]
 8008ae4:	ee07 2a90 	vmov	s15, r2
 8008ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008aec:	3c01      	subs	r4, #1
 8008aee:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008af2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008af6:	ed65 7a01 	vstmdb	r5!, {s15}
 8008afa:	e734      	b.n	8008966 <__kernel_rem_pio2f+0x206>
 8008afc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8008b00:	ecf7 6a01 	vldmia	r7!, {s13}
 8008b04:	ed9c 7a00 	vldr	s14, [ip]
 8008b08:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008b0c:	3401      	adds	r4, #1
 8008b0e:	454c      	cmp	r4, r9
 8008b10:	dc01      	bgt.n	8008b16 <__kernel_rem_pio2f+0x3b6>
 8008b12:	42a5      	cmp	r5, r4
 8008b14:	daf2      	bge.n	8008afc <__kernel_rem_pio2f+0x39c>
 8008b16:	aa56      	add	r2, sp, #344	; 0x158
 8008b18:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8008b1c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8008b20:	3501      	adds	r5, #1
 8008b22:	3804      	subs	r0, #4
 8008b24:	e723      	b.n	800896e <__kernel_rem_pio2f+0x20e>
 8008b26:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008b28:	2a03      	cmp	r2, #3
 8008b2a:	d84d      	bhi.n	8008bc8 <__kernel_rem_pio2f+0x468>
 8008b2c:	e8df f002 	tbb	[pc, r2]
 8008b30:	021f1f3e 	.word	0x021f1f3e
 8008b34:	aa56      	add	r2, sp, #344	; 0x158
 8008b36:	4411      	add	r1, r2
 8008b38:	399c      	subs	r1, #156	; 0x9c
 8008b3a:	4608      	mov	r0, r1
 8008b3c:	461c      	mov	r4, r3
 8008b3e:	2c00      	cmp	r4, #0
 8008b40:	dc5f      	bgt.n	8008c02 <__kernel_rem_pio2f+0x4a2>
 8008b42:	4608      	mov	r0, r1
 8008b44:	461c      	mov	r4, r3
 8008b46:	2c01      	cmp	r4, #1
 8008b48:	dc6b      	bgt.n	8008c22 <__kernel_rem_pio2f+0x4c2>
 8008b4a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8008a78 <__kernel_rem_pio2f+0x318>
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	dc77      	bgt.n	8008c42 <__kernel_rem_pio2f+0x4e2>
 8008b52:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8008b56:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8008b5a:	f1b8 0f00 	cmp.w	r8, #0
 8008b5e:	d176      	bne.n	8008c4e <__kernel_rem_pio2f+0x4ee>
 8008b60:	edc6 6a00 	vstr	s13, [r6]
 8008b64:	ed86 7a01 	vstr	s14, [r6, #4]
 8008b68:	edc6 7a02 	vstr	s15, [r6, #8]
 8008b6c:	e02c      	b.n	8008bc8 <__kernel_rem_pio2f+0x468>
 8008b6e:	aa56      	add	r2, sp, #344	; 0x158
 8008b70:	4411      	add	r1, r2
 8008b72:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8008a78 <__kernel_rem_pio2f+0x318>
 8008b76:	399c      	subs	r1, #156	; 0x9c
 8008b78:	4618      	mov	r0, r3
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	da32      	bge.n	8008be4 <__kernel_rem_pio2f+0x484>
 8008b7e:	f1b8 0f00 	cmp.w	r8, #0
 8008b82:	d035      	beq.n	8008bf0 <__kernel_rem_pio2f+0x490>
 8008b84:	eef1 7a47 	vneg.f32	s15, s14
 8008b88:	edc6 7a00 	vstr	s15, [r6]
 8008b8c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8008b90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b94:	a82f      	add	r0, sp, #188	; 0xbc
 8008b96:	2101      	movs	r1, #1
 8008b98:	428b      	cmp	r3, r1
 8008b9a:	da2c      	bge.n	8008bf6 <__kernel_rem_pio2f+0x496>
 8008b9c:	f1b8 0f00 	cmp.w	r8, #0
 8008ba0:	d001      	beq.n	8008ba6 <__kernel_rem_pio2f+0x446>
 8008ba2:	eef1 7a67 	vneg.f32	s15, s15
 8008ba6:	edc6 7a01 	vstr	s15, [r6, #4]
 8008baa:	e00d      	b.n	8008bc8 <__kernel_rem_pio2f+0x468>
 8008bac:	aa56      	add	r2, sp, #344	; 0x158
 8008bae:	4411      	add	r1, r2
 8008bb0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8008a78 <__kernel_rem_pio2f+0x318>
 8008bb4:	399c      	subs	r1, #156	; 0x9c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	da0e      	bge.n	8008bd8 <__kernel_rem_pio2f+0x478>
 8008bba:	f1b8 0f00 	cmp.w	r8, #0
 8008bbe:	d001      	beq.n	8008bc4 <__kernel_rem_pio2f+0x464>
 8008bc0:	eef1 7a67 	vneg.f32	s15, s15
 8008bc4:	edc6 7a00 	vstr	s15, [r6]
 8008bc8:	9b01      	ldr	r3, [sp, #4]
 8008bca:	f003 0007 	and.w	r0, r3, #7
 8008bce:	b057      	add	sp, #348	; 0x15c
 8008bd0:	ecbd 8b04 	vpop	{d8-d9}
 8008bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd8:	ed31 7a01 	vldmdb	r1!, {s14}
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008be2:	e7e8      	b.n	8008bb6 <__kernel_rem_pio2f+0x456>
 8008be4:	ed71 7a01 	vldmdb	r1!, {s15}
 8008be8:	3801      	subs	r0, #1
 8008bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008bee:	e7c4      	b.n	8008b7a <__kernel_rem_pio2f+0x41a>
 8008bf0:	eef0 7a47 	vmov.f32	s15, s14
 8008bf4:	e7c8      	b.n	8008b88 <__kernel_rem_pio2f+0x428>
 8008bf6:	ecb0 7a01 	vldmia	r0!, {s14}
 8008bfa:	3101      	adds	r1, #1
 8008bfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c00:	e7ca      	b.n	8008b98 <__kernel_rem_pio2f+0x438>
 8008c02:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008c06:	ed70 6a01 	vldmdb	r0!, {s13}
 8008c0a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008c0e:	3c01      	subs	r4, #1
 8008c10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c14:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008c18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c1c:	edc0 7a00 	vstr	s15, [r0]
 8008c20:	e78d      	b.n	8008b3e <__kernel_rem_pio2f+0x3de>
 8008c22:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008c26:	ed70 6a01 	vldmdb	r0!, {s13}
 8008c2a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008c2e:	3c01      	subs	r4, #1
 8008c30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c34:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008c38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3c:	edc0 7a00 	vstr	s15, [r0]
 8008c40:	e781      	b.n	8008b46 <__kernel_rem_pio2f+0x3e6>
 8008c42:	ed31 7a01 	vldmdb	r1!, {s14}
 8008c46:	3b01      	subs	r3, #1
 8008c48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c4c:	e77f      	b.n	8008b4e <__kernel_rem_pio2f+0x3ee>
 8008c4e:	eef1 6a66 	vneg.f32	s13, s13
 8008c52:	eeb1 7a47 	vneg.f32	s14, s14
 8008c56:	edc6 6a00 	vstr	s13, [r6]
 8008c5a:	ed86 7a01 	vstr	s14, [r6, #4]
 8008c5e:	eef1 7a67 	vneg.f32	s15, s15
 8008c62:	e781      	b.n	8008b68 <__kernel_rem_pio2f+0x408>

08008c64 <__kernel_sinf>:
 8008c64:	ee10 3a10 	vmov	r3, s0
 8008c68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c6c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008c70:	da04      	bge.n	8008c7c <__kernel_sinf+0x18>
 8008c72:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008c76:	ee17 3a90 	vmov	r3, s15
 8008c7a:	b35b      	cbz	r3, 8008cd4 <__kernel_sinf+0x70>
 8008c7c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008c80:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008cd8 <__kernel_sinf+0x74>
 8008c84:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008cdc <__kernel_sinf+0x78>
 8008c88:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008c8c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008ce0 <__kernel_sinf+0x7c>
 8008c90:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008c94:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008ce4 <__kernel_sinf+0x80>
 8008c98:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008c9c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008ce8 <__kernel_sinf+0x84>
 8008ca0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008ca4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008ca8:	b930      	cbnz	r0, 8008cb8 <__kernel_sinf+0x54>
 8008caa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008cec <__kernel_sinf+0x88>
 8008cae:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008cb2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008cb6:	4770      	bx	lr
 8008cb8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008cbc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008cc0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008cc4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008cc8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008cf0 <__kernel_sinf+0x8c>
 8008ccc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008cd0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	2f2ec9d3 	.word	0x2f2ec9d3
 8008cdc:	b2d72f34 	.word	0xb2d72f34
 8008ce0:	3638ef1b 	.word	0x3638ef1b
 8008ce4:	b9500d01 	.word	0xb9500d01
 8008ce8:	3c088889 	.word	0x3c088889
 8008cec:	be2aaaab 	.word	0xbe2aaaab
 8008cf0:	3e2aaaab 	.word	0x3e2aaaab

08008cf4 <fabsf>:
 8008cf4:	ee10 3a10 	vmov	r3, s0
 8008cf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cfc:	ee00 3a10 	vmov	s0, r3
 8008d00:	4770      	bx	lr
	...

08008d04 <floorf>:
 8008d04:	ee10 3a10 	vmov	r3, s0
 8008d08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008d0c:	0dca      	lsrs	r2, r1, #23
 8008d0e:	3a7f      	subs	r2, #127	; 0x7f
 8008d10:	2a16      	cmp	r2, #22
 8008d12:	dc2a      	bgt.n	8008d6a <floorf+0x66>
 8008d14:	2a00      	cmp	r2, #0
 8008d16:	da11      	bge.n	8008d3c <floorf+0x38>
 8008d18:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008d7c <floorf+0x78>
 8008d1c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008d20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d28:	dd05      	ble.n	8008d36 <floorf+0x32>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	da23      	bge.n	8008d76 <floorf+0x72>
 8008d2e:	4a14      	ldr	r2, [pc, #80]	; (8008d80 <floorf+0x7c>)
 8008d30:	2900      	cmp	r1, #0
 8008d32:	bf18      	it	ne
 8008d34:	4613      	movne	r3, r2
 8008d36:	ee00 3a10 	vmov	s0, r3
 8008d3a:	4770      	bx	lr
 8008d3c:	4911      	ldr	r1, [pc, #68]	; (8008d84 <floorf+0x80>)
 8008d3e:	4111      	asrs	r1, r2
 8008d40:	420b      	tst	r3, r1
 8008d42:	d0fa      	beq.n	8008d3a <floorf+0x36>
 8008d44:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008d7c <floorf+0x78>
 8008d48:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008d4c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d54:	ddef      	ble.n	8008d36 <floorf+0x32>
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	bfbe      	ittt	lt
 8008d5a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008d5e:	fa40 f202 	asrlt.w	r2, r0, r2
 8008d62:	189b      	addlt	r3, r3, r2
 8008d64:	ea23 0301 	bic.w	r3, r3, r1
 8008d68:	e7e5      	b.n	8008d36 <floorf+0x32>
 8008d6a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008d6e:	d3e4      	bcc.n	8008d3a <floorf+0x36>
 8008d70:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008d74:	4770      	bx	lr
 8008d76:	2300      	movs	r3, #0
 8008d78:	e7dd      	b.n	8008d36 <floorf+0x32>
 8008d7a:	bf00      	nop
 8008d7c:	7149f2ca 	.word	0x7149f2ca
 8008d80:	bf800000 	.word	0xbf800000
 8008d84:	007fffff 	.word	0x007fffff

08008d88 <scalbnf>:
 8008d88:	b508      	push	{r3, lr}
 8008d8a:	ee10 2a10 	vmov	r2, s0
 8008d8e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8008d92:	ed2d 8b02 	vpush	{d8}
 8008d96:	eef0 0a40 	vmov.f32	s1, s0
 8008d9a:	d004      	beq.n	8008da6 <scalbnf+0x1e>
 8008d9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008da0:	d306      	bcc.n	8008db0 <scalbnf+0x28>
 8008da2:	ee70 0a00 	vadd.f32	s1, s0, s0
 8008da6:	ecbd 8b02 	vpop	{d8}
 8008daa:	eeb0 0a60 	vmov.f32	s0, s1
 8008dae:	bd08      	pop	{r3, pc}
 8008db0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008db4:	d21c      	bcs.n	8008df0 <scalbnf+0x68>
 8008db6:	4b1f      	ldr	r3, [pc, #124]	; (8008e34 <scalbnf+0xac>)
 8008db8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008e38 <scalbnf+0xb0>
 8008dbc:	4298      	cmp	r0, r3
 8008dbe:	ee60 0a27 	vmul.f32	s1, s0, s15
 8008dc2:	db10      	blt.n	8008de6 <scalbnf+0x5e>
 8008dc4:	ee10 2a90 	vmov	r2, s1
 8008dc8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008dcc:	3b19      	subs	r3, #25
 8008dce:	4403      	add	r3, r0
 8008dd0:	2bfe      	cmp	r3, #254	; 0xfe
 8008dd2:	dd0f      	ble.n	8008df4 <scalbnf+0x6c>
 8008dd4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008e3c <scalbnf+0xb4>
 8008dd8:	eeb0 0a48 	vmov.f32	s0, s16
 8008ddc:	f000 f834 	bl	8008e48 <copysignf>
 8008de0:	ee60 0a08 	vmul.f32	s1, s0, s16
 8008de4:	e7df      	b.n	8008da6 <scalbnf+0x1e>
 8008de6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008e40 <scalbnf+0xb8>
 8008dea:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008dee:	e7da      	b.n	8008da6 <scalbnf+0x1e>
 8008df0:	0ddb      	lsrs	r3, r3, #23
 8008df2:	e7ec      	b.n	8008dce <scalbnf+0x46>
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	dd06      	ble.n	8008e06 <scalbnf+0x7e>
 8008df8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008dfc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008e00:	ee00 3a90 	vmov	s1, r3
 8008e04:	e7cf      	b.n	8008da6 <scalbnf+0x1e>
 8008e06:	f113 0f16 	cmn.w	r3, #22
 8008e0a:	da06      	bge.n	8008e1a <scalbnf+0x92>
 8008e0c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008e10:	4298      	cmp	r0, r3
 8008e12:	dcdf      	bgt.n	8008dd4 <scalbnf+0x4c>
 8008e14:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8008e40 <scalbnf+0xb8>
 8008e18:	e7de      	b.n	8008dd8 <scalbnf+0x50>
 8008e1a:	3319      	adds	r3, #25
 8008e1c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008e20:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008e24:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008e44 <scalbnf+0xbc>
 8008e28:	ee07 3a10 	vmov	s14, r3
 8008e2c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008e30:	e7b9      	b.n	8008da6 <scalbnf+0x1e>
 8008e32:	bf00      	nop
 8008e34:	ffff3cb0 	.word	0xffff3cb0
 8008e38:	4c000000 	.word	0x4c000000
 8008e3c:	7149f2ca 	.word	0x7149f2ca
 8008e40:	0da24260 	.word	0x0da24260
 8008e44:	33000000 	.word	0x33000000

08008e48 <copysignf>:
 8008e48:	ee10 3a10 	vmov	r3, s0
 8008e4c:	ee10 2a90 	vmov	r2, s1
 8008e50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e54:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	ee00 3a10 	vmov	s0, r3
 8008e5e:	4770      	bx	lr

08008e60 <_init>:
 8008e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e62:	bf00      	nop
 8008e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e66:	bc08      	pop	{r3}
 8008e68:	469e      	mov	lr, r3
 8008e6a:	4770      	bx	lr

08008e6c <_fini>:
 8008e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6e:	bf00      	nop
 8008e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e72:	bc08      	pop	{r3}
 8008e74:	469e      	mov	lr, r3
 8008e76:	4770      	bx	lr
